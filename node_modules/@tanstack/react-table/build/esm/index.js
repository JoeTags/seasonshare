/**
 * react-table
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
import * as React from 'react';
import { init, createTableInstance } from '@tanstack/table-core';
export * from '@tanstack/table-core';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var render = function render(Comp, props) {
  return !Comp ? null : isReactComponent(Comp) ? /*#__PURE__*/React.createElement(Comp, props) : Comp;
};

function isReactComponent(component) {
  return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);
}

function isClassComponent(component) {
  return typeof component === 'function' && function () {
    var proto = Object.getPrototypeOf(component);
    return proto.prototype && proto.prototype.isReactComponent;
  }();
}

function isExoticComponent(component) {
  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);
}

var _init = init({
  render: render
}),
    createTable = _init.createTable,
    createTableFactory = _init.createTableFactory;
function useTable(table, options) {
  var _table$__options;

  // Compose in the generic options to the user options
  var resolvedOptions = _extends({}, (_table$__options = table.__options) != null ? _table$__options : {}, {
    state: {},
    // Dummy state
    onStateChange: function onStateChange() {},
    // noop
    render: render
  }, options); // Create a new table instance and store it in state


  var _React$useState = React.useState(function () {
    return createTableInstance(resolvedOptions);
  }),
      instance = _React$useState[0]; // By default, manage table state here using the instance's initial state


  var _React$useState2 = React.useState(function () {
    return instance.initialState;
  }),
      state = _React$useState2[0],
      setState = _React$useState2[1]; // Compose the default state above with any user state. This will allow the user
  // to only control a subset of the state if desired.


  instance.setOptions(function (prev) {
    return _extends({}, prev, options, {
      state: _extends({}, state, options.state),
      // Similarly, we'll maintain both our internal state and any user-provided
      // state.
      onStateChange: function onStateChange(updater) {
        setState(updater);
        options.onStateChange == null ? void 0 : options.onStateChange(updater);
      }
    });
  });
  return instance;
}

export { createTable, createTableFactory, render, useTable };
//# sourceMappingURL=index.js.map

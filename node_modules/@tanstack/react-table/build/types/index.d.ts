import * as React from 'react';
export * from '@tanstack/table-core';
import { PartialKeys, Options, TableInstance, CreateTableFactoryOptions, Table, AnyGenerics } from '@tanstack/table-core';
export declare type Renderable<TProps> = React.ReactNode | React.FunctionComponent<TProps> | React.Component<TProps>;
export declare const render: <TProps extends {}>(Comp: Renderable<TProps>, props: TProps) => React.ReactNode;
export declare type Render = typeof render;
declare const createTable: import("@tanstack/table-core").CreateTableFactory<import("@tanstack/table-core").Overwrite<Partial<import("@tanstack/table-core").DefaultGenerics>, {
    Render: <TProps extends {}>(Comp: Renderable<TProps>, props: TProps) => React.ReactNode;
}>>, createTableFactory: <TGenerics extends AnyGenerics>(options: CreateTableFactoryOptions<(<TProps extends {}>(Comp: Renderable<TProps>, props: TProps) => React.ReactNode), any, any, any>) => import("@tanstack/table-core").CreateTableFactory<import("@tanstack/table-core").Overwrite<TGenerics, {
    Render: <TProps extends {}>(Comp: Renderable<TProps>, props: TProps) => React.ReactNode;
}>>;
export { createTable, createTableFactory };
export declare function useTable<TGenerics extends AnyGenerics>(table: Table<TGenerics>, options: PartialKeys<Omit<Options<TGenerics>, keyof CreateTableFactoryOptions<any, any, any, any>>, 'state' | 'onStateChange'>): TableInstance<TGenerics>;

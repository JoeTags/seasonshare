{"version":3,"file":"columnFilterRowsFn.js","sources":["../../../src/utils/columnFilterRowsFn.ts"],"sourcesContent":["import { AnyGenerics, TableInstance, Row, RowModel } from '../types'\nimport {\n  filterRowModelFromLeafs,\n  filterRowModelFromRoot,\n} from './filterRowsUtils'\n\nexport function columnFilterRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const columnFilters = instance.getState().columnFilters\n  const filterFromLeafRows = instance.options.filterFromLeafRows\n\n  const filterRows = (rowsToFilter: Row<TGenerics>[], depth: number) => {\n    for (let i = 0; i < columnFilters.length; i++) {\n      const { id: columnId, value: filterValue } = columnFilters[i]\n      // Find the columnFilters column\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Table: Could not find a column with id: ${columnId}`)\n        }\n        throw new Error()\n      }\n\n      if (depth === 0) {\n        const preFilteredRows = [...rowsToFilter]\n        column.getPreFilteredRows = () => preFilteredRows\n      }\n\n      const filterFn = instance.getColumnFilterFn(column.id)\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Could not find a valid 'column.filterType' for column with the ID: ${column.id}.`\n          )\n        }\n        continue\n      }\n\n      // Pass the rows, id, filterValue and column to the filterFn\n      // to get the filtered rows back\n      rowsToFilter = filterFn(rowsToFilter, [columnId], filterValue)\n    }\n\n    return rowsToFilter\n  }\n\n  if (filterFromLeafRows) {\n    return filterRowModelFromLeafs(rowModel.rows, filterRows, instance)\n  }\n\n  return filterRowModelFromRoot(rowModel.rows, filterRows, instance)\n}\n"],"names":["columnFilterRowsFn","instance","rowModel","columnFilters","getState","filterFromLeafRows","options","filterRows","rowsToFilter","depth","i","length","columnId","id","filterValue","value","column","getColumn","process","env","NODE_ENV","console","warn","Error","preFilteredRows","getPreFilteredRows","filterFn","getColumnFilterFn","filterRowModelFromLeafs","rows","filterRowModelFromRoot"],"mappings":";;;;;;;;;;;;;;;;AAMO,SAASA,kBAAT,CACLC,QADK,EAELC,QAFK,EAGgB;AACrB,MAAMC,aAAa,GAAGF,QAAQ,CAACG,QAAT,GAAoBD,aAA1C;AACA,MAAME,kBAAkB,GAAGJ,QAAQ,CAACK,OAAT,CAAiBD,kBAA5C;;AAEA,MAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,YAAD,EAAiCC,KAAjC,EAAmD;AACpE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,aAAa,CAACQ,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,6BAA6CP,aAAa,CAACO,CAAD,CAA1D;AAAA,UAAYE,QAAZ,oBAAQC,EAAR;AAAA,UAA6BC,WAA7B,oBAAsBC,KAAtB,CAD6C;;AAG7C,UAAMC,MAAM,GAAGf,QAAQ,CAACgB,SAAT,CAAmBL,QAAnB,CAAf;;AAEA,UAAI,CAACI,MAAL,EAAa;AACX,YAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,UAAAA,OAAO,CAACC,IAAR,8CAAwDV,QAAxD;AACD;;AACD,cAAM,IAAIW,KAAJ,EAAN;AACD;;AAED,UAAId,KAAK,KAAK,CAAd,EAAiB;AAAA;AACf,cAAMe,eAAe,aAAOhB,YAAP,CAArB;;AACAQ,UAAAA,MAAM,CAACS,kBAAP,GAA4B;AAAA,mBAAMD,eAAN;AAAA,WAA5B;AAFe;AAGhB;;AAED,UAAME,QAAQ,GAAGzB,QAAQ,CAAC0B,iBAAT,CAA2BX,MAAM,CAACH,EAAlC,CAAjB;;AAEA,UAAI,CAACa,QAAL,EAAe;AACb,YAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,UAAAA,OAAO,CAACC,IAAR,yEACwEN,MAAM,CAACH,EAD/E;AAGD;;AACD;AACD,OA1B4C;AA6B7C;;;AACAL,MAAAA,YAAY,GAAGkB,QAAQ,CAAClB,YAAD,EAAe,CAACI,QAAD,CAAf,EAA2BE,WAA3B,CAAvB;AACD;;AAED,WAAON,YAAP;AACD,GAnCD;;AAqCA,MAAIH,kBAAJ,EAAwB;AACtB,WAAOuB,uCAAuB,CAAC1B,QAAQ,CAAC2B,IAAV,EAAgBtB,UAAhB,EAA4BN,QAA5B,CAA9B;AACD;;AAED,SAAO6B,sCAAsB,CAAC5B,QAAQ,CAAC2B,IAAV,EAAgBtB,UAAhB,EAA4BN,QAA5B,CAA7B;AACD;;;;"}
{"version":3,"file":"filterRowsUtils.js","sources":["../../../src/utils/filterRowsUtils.ts"],"sourcesContent":["import { AnyGenerics, Row, RowModel, TableInstance } from '../types'\n\nexport function filterRowModelFromLeafs<TGenerics extends AnyGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRows: (\n    rowsToFilter: Row<TGenerics>[],\n    depth: number\n  ) => Row<TGenerics>[],\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    rowsToFilter = rowsToFilter.slice()\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      const row = rowsToFilter[i]\n\n      if (!row.subRows?.length) {\n        continue\n      }\n\n      rowsToFilter[i] = instance.createRow(\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        row.values\n      )\n\n      rowsToFilter[i].subRows = recurseFilterRows(row.subRows, depth + 1)\n\n      if (!rowsToFilter[i].subRows.length) {\n        rowsToFilter.splice(i, 1)\n        i--\n      }\n    }\n\n    rowsToFilter = filterRows(rowsToFilter, depth)\n\n    // Apply the filter to any subRows\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TGenerics extends AnyGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRows: (\n    rowsToFilter: Row<TGenerics>[],\n    depth: number\n  ) => Row<TGenerics>[],\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward first\n    rowsToFilter = filterRows(rowsToFilter, depth)\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      const row = rowsToFilter[i]\n\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!row.subRows?.length) {\n        rowsToFilter.splice(i, 1)\n        i--\n        continue\n      }\n\n      rowsToFilter[i] = instance.createRow(\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        row.values\n      )\n\n      rowsToFilter[i].subRows = recurseFilterRows(row.subRows, depth + 1)\n    }\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n"],"names":["filterRowModelFromLeafs","rowsToFilter","filterRows","instance","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","depth","slice","i","length","row","subRows","createRow","id","original","index","values","splice","forEach","push","rows","flatRows","rowsById","filterRowModelFromRoot"],"mappings":"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"}
/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var filterRowsUtils = require('./filterRowsUtils.js');

function columnFilterRowsFn(instance, rowModel) {
  var columnFilters = instance.getState().columnFilters;
  var filterFromLeafRows = instance.options.filterFromLeafRows;

  var filterRows = function filterRows(rowsToFilter, depth) {
    for (var i = 0; i < columnFilters.length; i++) {
      var _columnFilters$i = columnFilters[i],
          columnId = _columnFilters$i.id,
          filterValue = _columnFilters$i.value; // Find the columnFilters column

      var column = instance.getColumn(columnId);

      if (!column) {
        if (process.env.NODE_ENV !== 'production') {
          console.warn("Table: Could not find a column with id: " + columnId);
        }

        throw new Error();
      }

      if (depth === 0) {
        (function () {
          var preFilteredRows = [].concat(rowsToFilter);

          column.getPreFilteredRows = function () {
            return preFilteredRows;
          };
        })();
      }

      var filterFn = instance.getColumnFilterFn(column.id);

      if (!filterFn) {
        if (process.env.NODE_ENV !== 'production') {
          console.warn("Could not find a valid 'column.filterType' for column with the ID: " + column.id + ".");
        }

        continue;
      } // Pass the rows, id, filterValue and column to the filterFn
      // to get the filtered rows back


      rowsToFilter = filterFn(rowsToFilter, [columnId], filterValue);
    }

    return rowsToFilter;
  };

  if (filterFromLeafRows) {
    return filterRowsUtils.filterRowModelFromLeafs(rowModel.rows, filterRows, instance);
  }

  return filterRowsUtils.filterRowModelFromRoot(rowModel.rows, filterRows, instance);
}

exports.columnFilterRowsFn = columnFilterRowsFn;
//# sourceMappingURL=columnFilterRowsFn.js.map

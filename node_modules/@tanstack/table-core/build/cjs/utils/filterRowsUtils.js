/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function filterRowModelFromLeafs(rowsToFilter, filterRows, instance) {
  var newFilteredFlatRows = [];
  var newFilteredRowsById = {};

  var recurseFilterRows = function recurseFilterRows(rowsToFilter, depth) {
    if (depth === void 0) {
      depth = 0;
    }

    rowsToFilter = rowsToFilter.slice(); // Filter from children up first

    for (var i = 0; i < rowsToFilter.length; i++) {
      var _row$subRows;

      var row = rowsToFilter[i];

      if (!((_row$subRows = row.subRows) != null && _row$subRows.length)) {
        continue;
      }

      rowsToFilter[i] = instance.createRow(row.id, row.original, row.index, row.depth, row.values);
      rowsToFilter[i].subRows = recurseFilterRows(row.subRows, depth + 1);

      if (!rowsToFilter[i].subRows.length) {
        rowsToFilter.splice(i, 1);
        i--;
      }
    }

    rowsToFilter = filterRows(rowsToFilter, depth); // Apply the filter to any subRows

    rowsToFilter.forEach(function (row) {
      newFilteredFlatRows.push(row);
      newFilteredRowsById[row.id] = row;
    });
    return rowsToFilter;
  };

  return {
    rows: recurseFilterRows(rowsToFilter),
    flatRows: newFilteredFlatRows,
    rowsById: newFilteredRowsById
  };
}
function filterRowModelFromRoot(rowsToFilter, filterRows, instance) {
  var newFilteredFlatRows = [];
  var newFilteredRowsById = {}; // Filters top level and nested rows

  var recurseFilterRows = function recurseFilterRows(rowsToFilter, depth) {
    if (depth === void 0) {
      depth = 0;
    }

    // Filter from parents downward first
    rowsToFilter = filterRows(rowsToFilter, depth); // Apply the filter to any subRows

    for (var i = 0; i < rowsToFilter.length; i++) {
      var _row$subRows2;

      var row = rowsToFilter[i];
      newFilteredFlatRows.push(row);
      newFilteredRowsById[row.id] = row;

      if (!((_row$subRows2 = row.subRows) != null && _row$subRows2.length)) {
        rowsToFilter.splice(i, 1);
        i--;
        continue;
      }

      rowsToFilter[i] = instance.createRow(row.id, row.original, row.index, row.depth, row.values);
      rowsToFilter[i].subRows = recurseFilterRows(row.subRows, depth + 1);
    }

    return rowsToFilter;
  };

  return {
    rows: recurseFilterRows(rowsToFilter),
    flatRows: newFilteredFlatRows,
    rowsById: newFilteredRowsById
  };
}

exports.filterRowModelFromLeafs = filterRowModelFromLeafs;
exports.filterRowModelFromRoot = filterRowModelFromRoot;
//# sourceMappingURL=filterRowsUtils.js.map

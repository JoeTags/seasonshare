{"version":3,"file":"paginateRowsFn.js","sources":["../../../src/utils/paginateRowsFn.ts"],"sourcesContent":["import { TableInstance, RowModel, AnyGenerics } from '../types'\nimport { expandRowsFn } from './expandRowsFn'\n\nexport function paginateRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const { pageSize, pageIndex } = instance.getState().pagination\n  let { rows, flatRows, rowsById } = rowModel\n  const pageStart = pageSize * pageIndex\n  const pageEnd = pageStart + pageSize\n\n  rows = rows.slice(pageStart, pageEnd)\n\n  if (!instance.options.paginateExpandedRows) {\n    return expandRowsFn(instance, {\n      rows,\n      flatRows,\n      rowsById,\n    })\n  }\n\n  return {\n    rows,\n    flatRows,\n    rowsById,\n  }\n}\n"],"names":["paginateRowsFn","instance","rowModel","getState","pagination","pageSize","pageIndex","rows","flatRows","rowsById","pageStart","pageEnd","slice","options","paginateExpandedRows","expandRowsFn"],"mappings":";;;;;;;;;;;;;;;;AAGO,SAASA,cAAT,CACLC,QADK,EAELC,QAFK,EAGgB;AACrB,8BAAgCD,QAAQ,CAACE,QAAT,GAAoBC,UAApD;AAAA,MAAQC,QAAR,yBAAQA,QAAR;AAAA,MAAkBC,SAAlB,yBAAkBA,SAAlB;AACA,MAAMC,IAAN,GAAmCL,QAAnC,CAAMK,IAAN;AAAA,MAAYC,QAAZ,GAAmCN,QAAnC,CAAYM,QAAZ;AAAA,MAAsBC,QAAtB,GAAmCP,QAAnC,CAAsBO,QAAtB;AACA,MAAMC,SAAS,GAAGL,QAAQ,GAAGC,SAA7B;AACA,MAAMK,OAAO,GAAGD,SAAS,GAAGL,QAA5B;AAEAE,EAAAA,IAAI,GAAGA,IAAI,CAACK,KAAL,CAAWF,SAAX,EAAsBC,OAAtB,CAAP;;AAEA,MAAI,CAACV,QAAQ,CAACY,OAAT,CAAiBC,oBAAtB,EAA4C;AAC1C,WAAOC,yBAAY,CAACd,QAAD,EAAW;AAC5BM,MAAAA,IAAI,EAAJA,IAD4B;AAE5BC,MAAAA,QAAQ,EAARA,QAF4B;AAG5BC,MAAAA,QAAQ,EAARA;AAH4B,KAAX,CAAnB;AAKD;;AAED,SAAO;AACLF,IAAAA,IAAI,EAAJA,IADK;AAELC,IAAAA,QAAQ,EAARA,QAFK;AAGLC,IAAAA,QAAQ,EAARA;AAHK,GAAP;AAKD;;;;"}
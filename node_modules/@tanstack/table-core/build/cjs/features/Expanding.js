/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var utils = require('../utils.js');

//
var Expanding = {
  getInitialState: function getInitialState() {
    return {
      expanded: {}
    };
  },
  getDefaultOptions: function getDefaultOptions(instance) {
    return {
      onExpandedChange: utils.makeStateUpdater('expanded', instance),
      autoResetExpanded: true,
      expandSubRows: true,
      paginateExpandedRows: true
    };
  },
  getInstance: function getInstance(instance) {
    var registered = false;
    return {
      _notifyExpandedReset: function _notifyExpandedReset() {
        if (!registered) {
          registered = true;
          return;
        }

        if (instance.options.autoResetAll === false) {
          return;
        }

        if (instance.options.autoResetAll === true || instance.options.autoResetExpanded) {
          instance.resetExpanded();
        }
      },
      setExpanded: function setExpanded(updater) {
        return instance.options.onExpandedChange == null ? void 0 : instance.options.onExpandedChange(updater, utils.functionalUpdate(updater, instance.getState().expanded));
      },
      toggleRowExpanded: function toggleRowExpanded(rowId, expanded) {
        if (!rowId) return;
        instance.setExpanded(function (old) {
          var _expanded;

          var exists = old === true ? true : !!(old != null && old[rowId]);
          var oldExpanded = {};

          if (old === true) {
            Object.keys(instance.getRowModel().rowsById).forEach(function (rowId) {
              oldExpanded[rowId] = true;
            });
          } else {
            oldExpanded = old;
          }

          expanded = (_expanded = expanded) != null ? _expanded : !exists;

          if (!exists && expanded) {
            var _extends2;

            return _rollupPluginBabelHelpers["extends"]({}, oldExpanded, (_extends2 = {}, _extends2[rowId] = true, _extends2));
          }

          if (exists && !expanded) {
            var _oldExpanded = oldExpanded;
                _oldExpanded[rowId];
                var rest = _rollupPluginBabelHelpers.objectWithoutPropertiesLoose(_oldExpanded, [rowId].map(_rollupPluginBabelHelpers.toPropertyKey));

            return rest;
          }

          return old;
        });
      },
      toggleAllRowsExpanded: function toggleAllRowsExpanded(expanded) {
        if (expanded != null ? expanded : !instance.getIsAllRowsExpanded()) {
          instance.setExpanded(true);
        } else {
          instance.setExpanded({});
        }
      },
      resetExpanded: function resetExpanded() {
        var _instance$initialStat, _instance$initialStat2;

        instance.setExpanded((_instance$initialStat = (_instance$initialStat2 = instance.initialState) == null ? void 0 : _instance$initialStat2.expanded) != null ? _instance$initialStat : {});
      },
      getIsRowExpanded: function getIsRowExpanded(rowId) {
        var _instance$options$get;

        var row = instance.getPreExpandedRowModel().rowsById[rowId];

        if (!row) {
          if (process.env.NODE_ENV !== 'production') {
            console.warn("[Table] getIsRowExpanded: no row found with id " + rowId);
          }

          throw new Error();
        }

        var expanded = instance.getState().expanded;
        return !!((_instance$options$get = instance.options.getIsRowExpanded == null ? void 0 : instance.options.getIsRowExpanded(row)) != null ? _instance$options$get : expanded === true || (expanded == null ? void 0 : expanded[rowId]));
      },
      getRowCanExpand: function getRowCanExpand(rowId) {
        var _ref, _ref2, _instance$options$get2, _row$subRows;

        var row = instance.getRow(rowId);

        if (!row) {
          if (process.env.NODE_ENV !== 'production') {
            console.warn("[Table] getRowCanExpand: no row found with id " + rowId);
          }

          throw new Error();
        }

        return (_ref = (_ref2 = (_instance$options$get2 = instance.options.getRowCanExpand == null ? void 0 : instance.options.getRowCanExpand(row)) != null ? _instance$options$get2 : instance.options.enableExpanded) != null ? _ref2 : instance.options.defaultCanExpand) != null ? _ref : !!((_row$subRows = row.subRows) != null && _row$subRows.length);
      },
      getToggleExpandedProps: function getToggleExpandedProps(rowId, userProps) {
        var row = instance.getRow(rowId);

        if (!row) {
          return;
        }

        var canExpand = instance.getRowCanExpand(rowId);
        var initialProps = {
          title: canExpand ? 'Toggle Expanded' : undefined,
          onClick: canExpand ? function (e) {
            e.persist();
            instance.toggleRowExpanded(rowId);
          } : undefined
        };
        return utils.propGetter(initialProps, userProps);
      },
      getToggleAllRowsExpandedProps: function getToggleAllRowsExpandedProps(userProps) {
        var initialProps = {
          title: 'Toggle All Expanded',
          onClick: function onClick(e) {
            e.persist();
            instance.toggleAllRowsExpanded();
          }
        };
        return utils.propGetter(initialProps, userProps);
      },
      getIsSomeRowsExpanded: function getIsSomeRowsExpanded() {
        var expanded = instance.getState().expanded;
        return expanded === true || Object.values(expanded).some(Boolean);
      },
      getIsAllRowsExpanded: function getIsAllRowsExpanded() {
        var expanded = instance.getState().expanded; // If expanded is true, save some cycles and return true

        if (expanded === true) {
          return true;
        } // If any row is not expanded, return false


        if (Object.keys(instance.getRowModel().rowsById).some(function (id) {
          return !instance.getIsRowExpanded(id);
        })) {
          return false;
        } // They must all be expanded :shrug:


        return true;
      },
      getExpandedDepth: function getExpandedDepth() {
        var maxDepth = 0;
        var rowIds = instance.getState().expanded === true ? Object.keys(instance.getRowModel().rowsById) : Object.keys(instance.getState().expanded);
        rowIds.forEach(function (id) {
          var splitId = id.split('.');
          maxDepth = Math.max(maxDepth, splitId.length);
        });
        return maxDepth;
      },
      getExpandedRowModel: utils.memo(function () {
        return [instance.getState().expanded, instance.getGroupedRowModel(), instance.options.expandRowsFn, instance.options.paginateExpandedRows];
      }, function (expanded, rowModel, expandRowsFn, paginateExpandedRows) {
        if (!expandRowsFn || // Do not expand if rows are not included in pagination
        !paginateExpandedRows || expanded !== true && !Object.keys(expanded != null ? expanded : {}).length) {
          return rowModel;
        }

        return expandRowsFn(instance, rowModel);
      }, {
        key: 'getExpandedRowModel',
        debug: function debug() {
          var _instance$options$deb;

          return (_instance$options$deb = instance.options.debugAll) != null ? _instance$options$deb : instance.options.debugTable;
        }
      }),
      getPreExpandedRowModel: function getPreExpandedRowModel() {
        return instance.getGroupedRowModel();
      }
    };
  },
  createRow: function createRow(row, instance) {
    return {
      toggleExpanded: function toggleExpanded(expanded) {
        return void instance.toggleRowExpanded(row.id, expanded);
      },
      getIsExpanded: function getIsExpanded() {
        return instance.getIsRowExpanded(row.id);
      },
      getCanExpand: function getCanExpand() {
        return row.subRows && !!row.subRows.length;
      },
      getToggleExpandedProps: function getToggleExpandedProps(userProps) {
        return instance.getToggleExpandedProps(row.id, userProps);
      }
    };
  }
};

exports.Expanding = Expanding;
//# sourceMappingURL=Expanding.js.map

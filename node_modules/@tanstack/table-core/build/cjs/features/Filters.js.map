{"version":3,"file":"Filters.js","sources":["../../../src/features/Filters.ts"],"sourcesContent":["import { RowModel } from '..'\nimport { BuiltInFilterType, filterTypes } from '../filterTypes'\nimport {\n  Column,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type FilterFn<TGenerics extends AnyGenerics> = {\n  (rows: Row<TGenerics>[], columnIds: string[], filterValue: any): any\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends AnyGenerics> = (\n  value: unknown,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterTypes<TGenerics extends AnyGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type FilterType<TGenerics extends AnyGenerics> =\n  | 'auto'\n  | BuiltInFilterType\n  | TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends AnyGenerics> = {\n  filterType?: FilterType<Overwrite<TGenerics, { Value: any }>>\n  enableAllFilters?: boolean\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  defaultCanFilter?: boolean\n  defaultCanColumnFilter?: boolean\n  defaultCanGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends AnyGenerics> = {\n  filterType: FilterType<Overwrite<TGenerics, { Value: any }>>\n  getCanColumnFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getColumnFilterIndex: () => number\n  getIsColumnFiltered: () => boolean\n  getColumnFilterValue: () => unknown\n  setColumnFilterValue: (value: any) => void\n  getPreFilteredRows: () => Row<TGenerics>[] | undefined\n  getPreFilteredUniqueValues: () => Map<any, number>\n  getPreFilteredMinMaxValues: () => [any, any]\n}\n\nexport type FiltersOptions<TGenerics extends AnyGenerics> = {\n  filterFromLeafRows?: boolean\n  filterTypes?: TGenerics['FilterFns']\n  enableFilters?: boolean\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  autoResetColumnFilters?: boolean\n  enableColumnFilters?: boolean\n  columnFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    coreRowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  // Global\n  globalFilterType?: FilterType<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilters?: boolean\n  autoResetGlobalFilter?: boolean\n  enableGlobalFilter?: boolean\n  globalFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n}\n\nexport type FiltersInstance<TGenerics extends AnyGenerics> = {\n  _notifyFiltersReset: () => void\n  getColumnAutoFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  getColumnFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  setColumnFilterValue: (columnId: string, value: any) => void\n  resetColumnFilters: () => void\n  getColumnCanColumnFilter: (columnId: string) => boolean\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n\n  getColumnIsFiltered: (columnId: string) => boolean\n  getColumnFilterValue: (columnId: string) => unknown\n  getColumnFilterIndex: (columnId: string) => number\n\n  // All\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n\n  // Column Filters\n  getPreColumnFilteredRowModel: () => RowModel<TGenerics>\n  getColumnFilteredRowModel: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: () => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getColumnCanGlobalFilter: (columnId: string) => boolean\n  getPreGlobalFilteredRowModel: () => RowModel<TGenerics>\n  getGlobalFilteredRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Filters = {\n  getDefaultColumn: <\n    TGenerics extends AnyGenerics\n  >(): FiltersColumnDef<TGenerics> => {\n    return {\n      filterType: 'auto',\n    }\n  },\n\n  getInitialState: (): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      autoResetColumnFilters: true,\n      filterFromLeafRows: true,\n      autoResetGlobalFilter: true,\n      globalFilterType: 'auto',\n      getColumnCanGlobalFilterFn: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?.getAllCellsByColumnId()[column.id]?.value\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    const getFacetInfo = memo(\n      () => [column.getPreFilteredRows()],\n      (rows = []) => {\n        let preFilteredUniqueValues = new Map<any, number>()\n\n        let preFilteredMinMaxValues: [any, any] = [\n          rows[0]?.values[column.id] ?? null,\n          rows[0]?.values[column.id] ?? null,\n        ]\n\n        for (let i = 0; i < rows.length; i++) {\n          const value = rows[i]?.values[column.id]\n\n          if (preFilteredUniqueValues.has(value)) {\n            preFilteredUniqueValues.set(\n              value,\n              (preFilteredUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            preFilteredUniqueValues.set(value, 1)\n          }\n\n          if (value < preFilteredMinMaxValues[0]) {\n            preFilteredMinMaxValues[0] = value\n          } else if (value > preFilteredMinMaxValues[1]) {\n            preFilteredMinMaxValues[1] = value\n          }\n        }\n\n        return {\n          preFilteredUniqueValues,\n          preFilteredMinMaxValues,\n        }\n      },\n      {\n        key: 'column.getFacetInfo',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    )\n\n    return {\n      filterType: column.filterType,\n      getCanColumnFilter: () => instance.getColumnCanColumnFilter(column.id),\n      getCanGlobalFilter: () => instance.getColumnCanGlobalFilter(column.id),\n      getColumnFilterIndex: () => instance.getColumnFilterIndex(column.id),\n      getIsColumnFiltered: () => instance.getColumnIsFiltered(column.id),\n      getColumnFilterValue: () => instance.getColumnFilterValue(column.id),\n      setColumnFilterValue: val =>\n        instance.setColumnFilterValue(column.id, val),\n      getPreFilteredUniqueValues: () => getFacetInfo().preFilteredUniqueValues,\n      getPreFilteredMinMaxValues: () => getFacetInfo().preFilteredMinMaxValues,\n      getPreFilteredRows: () => undefined,\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyFiltersReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (instance.options.autoResetAll === true) {\n          instance.resetSorting()\n        } else {\n          if (instance.options.autoResetColumnFilters) {\n            instance.resetColumnFilters()\n          }\n          if (instance.options.autoResetGlobalFilter) {\n            instance.resetGlobalFilter()\n          }\n        }\n      },\n      getColumnAutoFilterFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return filterTypes.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterTypes.betweenNumberRange\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterTypes.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterTypes.arrIncludes\n        }\n\n        return filterTypes.weakEquals\n      },\n      getGlobalAutoFilterFn: () => {\n        return filterTypes.includesString\n      },\n      getColumnFilterFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userFilterTypes = instance.options.filterTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.filterType)\n          ? column.filterType\n          : column.filterType === 'auto'\n          ? instance.getColumnAutoFilterFn(columnId)\n          : (userFilterTypes as Record<string, any>)?.[\n              column.filterType as string\n            ] ??\n            (filterTypes[\n              column.filterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterTypes: userFilterTypes, globalFilterType } =\n          instance.options\n\n        return isFunction(globalFilterType)\n          ? globalFilterType\n          : globalFilterType === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterTypes as Record<string, any>)?.[\n              globalFilterType as string\n            ] ??\n            (filterTypes[\n              globalFilterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = instance.getColumnFilterFn(column.id)\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(\n          updateFn,\n          updateFn(instance.getState().columnFilters)\n        )\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().globalFilter)\n        )\n      },\n\n      resetGlobalFilter: () => {\n        instance.setGlobalFilter(undefined)\n      },\n\n      getColumnCanColumnFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableAllFilters ??\n          column.enableColumnFilter ??\n          instance.options.enableFilters ??\n          instance.options.enableColumnFilters ??\n          column.defaultCanFilter ??\n          column.defaultCanColumnFilter ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnCanGlobalFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          ((instance.options.enableFilters ??\n            instance.options.enableGlobalFilter ??\n            column.enableAllFilters ??\n            column.enableGlobalFilter ??\n            column.defaultCanFilter ??\n            column.defaultCanGlobalFilter ??\n            !!column.accessorFn) &&\n            instance.options.getColumnCanGlobalFilterFn?.(column)) ??\n          true\n        )\n      },\n\n      getColumnIsFiltered: columnId =>\n        instance.getColumnFilterIndex(columnId) > -1,\n\n      getColumnFilterValue: columnId =>\n        instance.getState().columnFilters?.find(d => d.id === columnId)?.value,\n\n      getColumnFilterIndex: columnId =>\n        instance.getState().columnFilters?.findIndex(d => d.id === columnId) ??\n        -1,\n\n      setColumnFilterValue: (columnId, value) => {\n        if (!columnId) return\n\n        instance.setColumnFilters(old => {\n          const column = instance.getColumn(columnId)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column with id: ${columnId}`\n              )\n            }\n            throw new Error()\n          }\n\n          const filterFn = instance.getColumnFilterFn(column.id)\n          const previousfilter = old?.find(d => d.id === columnId)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== columnId) ?? []\n          }\n\n          const newFilterObj = { id: columnId, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === columnId) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n\n      resetColumnFilters: () => {\n        instance.setColumnFilters(instance.initialState?.columnFilters ?? [])\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      getPreColumnFilteredRowModel: () => instance.getCoreRowModel(),\n      getColumnFilteredRowModel: memo(\n        () => [\n          instance.getState().columnFilters,\n          instance.getCoreRowModel(),\n          instance.options.columnFilterRowsFn,\n        ],\n        (columnFilters, rowModel, columnFiltersFn) => {\n          const columnFilteredRowModel = (() => {\n            if (!columnFilters?.length || !columnFiltersFn) {\n              return rowModel\n            }\n\n            return columnFiltersFn(instance as any, rowModel)\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => columnFilteredRowModel.rows\n          })\n\n          return columnFilteredRowModel\n        },\n        {\n          key: 'getColumnFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n      getPreGlobalFilteredRowModel: () => instance.getColumnFilteredRowModel(),\n      getGlobalFilteredRowModel: memo(\n        () => [\n          instance.getState().globalFilter,\n          instance.getColumnFilteredRowModel(),\n          instance.options.globalFilterRowsFn,\n        ],\n        (globalFilterValue, columnFilteredRowModel, globalFiltersFn) => {\n          const globalFilteredRowModel = (() => {\n            if (!globalFiltersFn || !globalFilterValue) {\n              return columnFilteredRowModel\n            }\n\n            return globalFiltersFn(\n              instance as TableInstance<TGenerics>,\n              columnFilteredRowModel\n            )\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => globalFilteredRowModel.rows\n          })\n\n          return globalFilteredRowModel\n        },\n        {\n          key: 'getGlobalFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifySortingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends AnyGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n"],"names":["Filters","getDefaultColumn","filterType","getInitialState","columnFilters","globalFilter","undefined","getDefaultOptions","instance","onColumnFiltersChange","makeStateUpdater","onGlobalFilterChange","autoResetColumnFilters","filterFromLeafRows","autoResetGlobalFilter","globalFilterType","getColumnCanGlobalFilterFn","column","value","getCoreRowModel","flatRows","getAllCellsByColumnId","id","createColumn","getFacetInfo","memo","getPreFilteredRows","rows","preFilteredUniqueValues","Map","preFilteredMinMaxValues","values","i","length","has","set","get","key","debug","options","debugAll","debugColumns","getCanColumnFilter","getColumnCanColumnFilter","getCanGlobalFilter","getColumnCanGlobalFilter","getColumnFilterIndex","getIsColumnFiltered","getColumnIsFiltered","getColumnFilterValue","setColumnFilterValue","val","getPreFilteredUniqueValues","getPreFilteredMinMaxValues","getInstance","registered","_notifyFiltersReset","autoResetAll","resetSorting","resetColumnFilters","resetGlobalFilter","getColumnAutoFilterFn","columnId","firstRow","filterTypes","includesString","betweenNumberRange","equals","Array","isArray","arrIncludes","weakEquals","getGlobalAutoFilterFn","getColumnFilterFn","getColumn","userFilterTypes","Error","isFunction","getGlobalFilterFn","setColumnFilters","updater","leafColumns","getAllLeafColumns","updateFn","old","functionalUpdate","filter","find","d","filterFn","shouldAutoRemoveFilter","getState","setGlobalFilter","enableAllFilters","enableColumnFilter","enableFilters","enableColumnFilters","defaultCanFilter","defaultCanColumnFilter","accessorFn","enableGlobalFilter","defaultCanGlobalFilter","findIndex","process","env","NODE_ENV","console","warn","previousfilter","newFilter","newFilterObj","map","initialState","getPreFilteredRowModel","getPreColumnFilteredRowModel","getColumnFilteredRowModel","columnFilterRowsFn","rowModel","columnFiltersFn","columnFilteredRowModel","nonFilteredColumns","forEach","debugTable","getPreGlobalFilteredRowModel","getGlobalFilteredRowModel","globalFilterRowsFn","globalFilterValue","globalFiltersFn","globalFilteredRowModel","onChange","_notifySortingReset","autoRemove"],"mappings":"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"}
/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var utils = require('../utils.js');

//
var defaultColumnSizing = {
  width: 150,
  minWidth: 20,
  maxWidth: Number.MAX_SAFE_INTEGER
};
var ColumnSizing = {
  getDefaultColumn: function getDefaultColumn() {
    return defaultColumnSizing;
  },
  getInitialState: function getInitialState() {
    return {
      columnSizing: {},
      columnSizingInfo: {
        startOffset: null,
        startSize: null,
        deltaOffset: null,
        deltaPercentage: null,
        isResizingColumn: false,
        columnSizingStart: []
      }
    };
  },
  getDefaultOptions: function getDefaultOptions(instance) {
    return {
      columnResizeMode: 'onEnd',
      onColumnSizingChange: utils.makeStateUpdater('columnSizing', instance),
      onColumnSizingInfoChange: utils.makeStateUpdater('columnSizingInfo', instance)
    };
  },
  getInstance: function getInstance(instance) {
    return {
      getColumnWidth: function getColumnWidth(columnId) {
        var _column$minWidth, _ref, _column$maxWidth;

        var column = instance.getColumn(columnId);

        if (!column) {
          throw new Error();
        }

        var columnSize = instance.getState().columnSizing[column.id];
        return Math.min(Math.max((_column$minWidth = column.minWidth) != null ? _column$minWidth : defaultColumnSizing.minWidth, (_ref = columnSize != null ? columnSize : column.width) != null ? _ref : defaultColumnSizing.width), (_column$maxWidth = column.maxWidth) != null ? _column$maxWidth : defaultColumnSizing.maxWidth);
      },
      setColumnSizing: function setColumnSizing(updater) {
        return instance.options.onColumnSizingChange == null ? void 0 : instance.options.onColumnSizingChange(updater, utils.functionalUpdate(updater, instance.getState().columnSizing));
      },
      setColumnSizingInfo: function setColumnSizingInfo(updater) {
        return instance.options.onColumnSizingInfoChange == null ? void 0 : instance.options.onColumnSizingInfoChange(updater, utils.functionalUpdate(updater, instance.getState().columnSizingInfo));
      },
      resetColumnSizing: function resetColumnSizing() {
        var _instance$initialStat;

        instance.setColumnSizing((_instance$initialStat = instance.initialState.columnSizing) != null ? _instance$initialStat : {});
      },
      resetHeaderSizeInfo: function resetHeaderSizeInfo() {
        var _instance$initialStat2;

        instance.setColumnSizingInfo((_instance$initialStat2 = instance.initialState.columnSizingInfo) != null ? _instance$initialStat2 : {});
      },
      resetColumnSize: function resetColumnSize(columnId) {
        instance.setColumnSizing(function (_ref2) {
          _ref2[columnId];
              var rest = _rollupPluginBabelHelpers.objectWithoutPropertiesLoose(_ref2, [columnId].map(_rollupPluginBabelHelpers.toPropertyKey));

          return rest;
        });
      },
      resetHeaderSize: function resetHeaderSize(headerId) {
        var header = instance.getHeader(headerId);
        return instance.resetColumnSize(header.column.id);
      },
      getHeaderCanResize: function getHeaderCanResize(headerId) {
        var header = instance.getHeader(headerId);

        if (!header) {
          throw new Error();
        }

        return instance.getColumnCanResize(header.column.id);
      },
      getColumnCanResize: function getColumnCanResize(columnId) {
        var _ref3, _ref4, _column$enableResizin;

        var column = instance.getColumn(columnId);

        if (!column) {
          throw new Error();
        }

        return (_ref3 = (_ref4 = (_column$enableResizin = column.enableResizing) != null ? _column$enableResizin : instance.options.enableColumnResizing) != null ? _ref4 : column.defaultCanResize) != null ? _ref3 : true;
      },
      getColumnIsResizing: function getColumnIsResizing(columnId) {
        var column = instance.getColumn(columnId);

        if (!column) {
          throw new Error();
        }

        return instance.getState().columnSizingInfo.isResizingColumn === columnId;
      },
      getHeaderIsResizing: function getHeaderIsResizing(headerId) {
        var header = instance.getHeader(headerId);

        if (!header) {
          throw new Error();
        }

        return instance.getColumnIsResizing(header.column.id);
      },
      getHeaderResizerProps: function getHeaderResizerProps(headerId, userProps) {
        var header = instance.getHeader(headerId);
        var column = instance.getColumn(header.column.id);
        var canResize = column.getCanResize();

        var onResizeStart = function onResizeStart(e) {
          if (isTouchStartEvent(e)) {
            // lets not respond to multiple touches (e.g. 2 or 3 fingers)
            if (e.touches && e.touches.length > 1) {
              return;
            }
          }

          var header = headerId ? instance.getHeader(headerId) : undefined;
          var startSize = header ? header.getWidth() : column.getWidth();
          var columnSizingStart = header ? header.getLeafHeaders().map(function (d) {
            return [d.column.id, d.getWidth()];
          }) : [[column.id, column.getWidth()]];
          var clientX = isTouchStartEvent(e) ? Math.round(e.touches[0].clientX) : e.clientX;

          var updateOffset = function updateOffset(eventType, clientXPos) {
            if (typeof clientXPos !== 'number') {
              return;
            }

            var newColumnSizing = {};
            instance.setColumnSizingInfo(function (old) {
              var _old$startOffset, _old$startSize;

              var deltaOffset = clientXPos - ((_old$startOffset = old == null ? void 0 : old.startOffset) != null ? _old$startOffset : 0);
              var deltaPercentage = Math.max(deltaOffset / ((_old$startSize = old == null ? void 0 : old.startSize) != null ? _old$startSize : 0), -0.999999);
              old.columnSizingStart.forEach(function (_ref5) {
                var columnId = _ref5[0],
                    headerWidth = _ref5[1];
                newColumnSizing[columnId] = Math.round(Math.max(headerWidth + headerWidth * deltaPercentage, 0) * 100) / 100;
              });
              return _rollupPluginBabelHelpers["extends"]({}, old, {
                deltaOffset: deltaOffset,
                deltaPercentage: deltaPercentage
              });
            });

            if (instance.options.columnResizeMode === 'onChange' || eventType === 'end') {
              instance.setColumnSizing(function (old) {
                return _rollupPluginBabelHelpers["extends"]({}, old, newColumnSizing);
              });
            }
          };

          var onMove = function onMove(clientXPos) {
            return updateOffset('move', clientXPos);
          };

          var onEnd = function onEnd(clientXPos) {
            updateOffset('end', clientXPos);
            instance.setColumnSizingInfo(function (old) {
              return _rollupPluginBabelHelpers["extends"]({}, old, {
                isResizingColumn: false,
                startOffset: null,
                startSize: null,
                deltaOffset: null,
                deltaPercentage: null,
                columnSizingStart: []
              });
            });
          };

          var mouseEvents = {
            moveHandler: function moveHandler(e) {
              return onMove(e.clientX);
            },
            upHandler: function upHandler(e) {
              document.removeEventListener('mousemove', mouseEvents.moveHandler);
              document.removeEventListener('mouseup', mouseEvents.upHandler);
              onEnd(e.clientX);
            }
          };
          var touchEvents = {
            moveHandler: function moveHandler(e) {
              if (e.cancelable) {
                e.preventDefault();
                e.stopPropagation();
              }

              onMove(e.touches[0].clientX);
              return false;
            },
            upHandler: function upHandler(e) {
              document.removeEventListener('touchmove', touchEvents.moveHandler);
              document.removeEventListener('touchend', touchEvents.upHandler);

              if (e.cancelable) {
                e.preventDefault();
                e.stopPropagation();
              }

              onEnd(e.touches[0].clientX);
            }
          };
          var passiveIfSupported = passiveEventSupported() ? {
            passive: false
          } : false;

          if (isTouchStartEvent(e)) {
            document.addEventListener('touchmove', touchEvents.moveHandler, passiveIfSupported);
            document.addEventListener('touchend', touchEvents.upHandler, passiveIfSupported);
          } else {
            document.addEventListener('mousemove', mouseEvents.moveHandler, passiveIfSupported);
            document.addEventListener('mouseup', mouseEvents.upHandler, passiveIfSupported);
          }

          instance.setColumnSizingInfo(function (old) {
            return _rollupPluginBabelHelpers["extends"]({}, old, {
              startOffset: clientX,
              startSize: startSize,
              deltaOffset: 0,
              deltaPercentage: 0,
              columnSizingStart: columnSizingStart,
              isResizingColumn: column.id
            });
          });
        };

        var initialProps = canResize ? {
          title: 'Toggle Grouping',
          draggable: false,
          role: 'separator',
          onMouseDown: function onMouseDown(e) {
            e.persist == null ? void 0 : e.persist();
            onResizeStart(e);
          },
          onTouchStart: function onTouchStart(e) {
            e.persist == null ? void 0 : e.persist();
            onResizeStart(e);
          }
        } : {};
        return utils.propGetter(initialProps, userProps);
      }
    };
  },
  createColumn: function createColumn(column, instance) {
    return {
      getIsResizing: function getIsResizing() {
        return instance.getColumnIsResizing(column.id);
      },
      getCanResize: function getCanResize() {
        return instance.getColumnCanResize(column.id);
      },
      resetSize: function resetSize() {
        return instance.resetColumnSize(column.id);
      }
    };
  },
  createHeader: function createHeader(header, instance) {
    return {
      getIsResizing: function getIsResizing() {
        return instance.getColumnIsResizing(header.column.id);
      },
      getCanResize: function getCanResize() {
        return instance.getColumnCanResize(header.column.id);
      },
      resetSize: function resetSize() {
        return instance.resetColumnSize(header.column.id);
      },
      getResizerProps: function getResizerProps(userProps) {
        return instance.getHeaderResizerProps(header.id, userProps);
      }
    };
  }
};
var passiveSupported = null;
function passiveEventSupported() {
  if (typeof passiveSupported === 'boolean') return passiveSupported;
  var supported = false;

  try {
    var options = {
      get passive() {
        supported = true;
        return false;
      }

    };

    var noop = function noop() {};

    window.addEventListener('test', noop, options);
    window.removeEventListener('test', noop);
  } catch (err) {
    supported = false;
  }

  passiveSupported = supported;
  return passiveSupported;
}

function isTouchStartEvent(e) {
  return e.type === 'touchstart';
}

exports.ColumnSizing = ColumnSizing;
exports.defaultColumnSizing = defaultColumnSizing;
exports.passiveEventSupported = passiveEventSupported;
//# sourceMappingURL=ColumnSizing.js.map

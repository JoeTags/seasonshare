/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var utils = require('../utils.js');

//
var RowSelection = {
  getInitialState: function getInitialState() {
    return {
      rowSelection: {}
    };
  },
  getDefaultOptions: function getDefaultOptions(instance) {
    return {
      onRowSelectionChange: utils.makeStateUpdater('rowSelection', instance),
      autoResetRowSelection: true,
      enableRowSelection: true,
      enableMultiRowSelection: true,
      enableSubRowSelection: true // enableGroupingRowSelection: false,
      // isAdditiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.metaKey,
      // isInclusiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.shiftKey,

    };
  },
  getInstance: function getInstance(instance) {
    var registered = false; // const pageRows = instance.getPageRows()

    return {
      _notifyRowSelectionReset: function _notifyRowSelectionReset() {
        if (!registered) {
          registered = true;
          return;
        }

        if (instance.options.autoResetAll === false) {
          return;
        }

        if (instance.options.autoResetAll === true || instance.options.autoResetRowSelection) {
          instance.resetRowSelection();
        }
      },
      setRowSelection: function setRowSelection(updater) {
        return instance.options.onRowSelectionChange == null ? void 0 : instance.options.onRowSelectionChange(updater, utils.functionalUpdate(updater, instance.getState().rowSelection));
      },
      resetRowSelection: function resetRowSelection() {
        var _instance$initialStat;

        return instance.setRowSelection((_instance$initialStat = instance.initialState.rowSelection) != null ? _instance$initialStat : {});
      },
      toggleAllRowsSelected: function toggleAllRowsSelected(value) {
        instance.setRowSelection(function (old) {
          value = typeof value !== 'undefined' ? value : !instance.getIsAllRowsSelected();

          var rowSelection = _rollupPluginBabelHelpers["extends"]({}, old);

          var preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows; // We don't use `mutateRowIsSelected` here for performance reasons.
          // All of the rows are flat already, so it wouldn't be worth it

          if (value) {
            preGroupedFlatRows.forEach(function (row) {
              rowSelection[row.id] = true;
            });
          } else {
            preGroupedFlatRows.forEach(function (row) {
              delete rowSelection[row.id];
            });
          }

          return rowSelection;
        });
      },
      toggleAllPageRowsSelected: function toggleAllPageRowsSelected(value) {
        return instance.setRowSelection(function (old) {
          typeof value !== 'undefined' ? value : !instance.getIsAllPageRowsSelected();

          var rowSelection = _rollupPluginBabelHelpers["extends"]({}, old);

          instance.getRowModel().rows.forEach(function (row) {
            mutateRowIsSelected(rowSelection, row.id, value, instance);
          });
          return rowSelection;
        });
      },
      toggleRowSelected: function toggleRowSelected(rowId, value) {
        var row = instance.getRow(rowId);
        var isSelected = row.getIsSelected();
        instance.setRowSelection(function (old) {
          value = typeof value !== 'undefined' ? value : !isSelected;

          if (isSelected === value) {
            return old;
          }

          var selectedRowIds = _rollupPluginBabelHelpers["extends"]({}, old);

          mutateRowIsSelected(selectedRowIds, rowId, value, instance);
          return selectedRowIds;
        });
      },
      // addRowSelectionRange: rowId => {
      //   const {
      //     rows,
      //     rowsById,
      //     options: { selectGroupingRows, selectSubRows },
      //   } = instance
      //   const findSelectedRow = (rows: Row[]) => {
      //     let found
      //     rows.find(d => {
      //       if (d.getIsSelected()) {
      //         found = d
      //         return true
      //       }
      //       const subFound = findSelectedRow(d.subRows || [])
      //       if (subFound) {
      //         found = subFound
      //         return true
      //       }
      //       return false
      //     })
      //     return found
      //   }
      //   const firstRow = findSelectedRow(rows) || rows[0]
      //   const lastRow = rowsById[rowId]
      //   let include = false
      //   const selectedRowIds = {}
      //   const addRow = (row: Row) => {
      //     mutateRowIsSelected(selectedRowIds, row.id, true, {
      //       rowsById,
      //       selectGroupingRows: selectGroupingRows!,
      //       selectSubRows: selectSubRows!,
      //     })
      //   }
      //   instance.rows.forEach(row => {
      //     const isFirstRow = row.id === firstRow.id
      //     const isLastRow = row.id === lastRow.id
      //     if (isFirstRow || isLastRow) {
      //       if (!include) {
      //         include = true
      //       } else if (include) {
      //         addRow(row)
      //         include = false
      //       }
      //     }
      //     if (include) {
      //       addRow(row)
      //     }
      //   })
      //   instance.setRowSelection(selectedRowIds)
      // },
      getPreSelectedRowModel: function getPreSelectedRowModel() {
        return instance.getCoreRowModel();
      },
      getSelectedRowModel: utils.memo(function () {
        return [instance.getState().rowSelection, instance.getCoreRowModel()];
      }, function (rowSelection, rowModel) {
        if (!Object.keys(rowSelection).length) {
          return {
            rows: [],
            flatRows: [],
            rowsById: {}
          };
        }

        return selectRowsFn(instance, rowModel);
      }, {
        key: 'getSelectedRowModel',
        debug: function debug() {
          var _instance$options$deb;

          return (_instance$options$deb = instance.options.debugAll) != null ? _instance$options$deb : instance.options.debugTable;
        },
        onChange: function onChange() {
          return instance._notifyExpandedReset();
        }
      }),
      getFilteredSelectedRowModel: utils.memo(function () {
        return [instance.getState().rowSelection, instance.getGlobalFilteredRowModel()];
      }, function (rowSelection, rowModel) {
        if (!Object.keys(rowSelection).length) {
          return {
            rows: [],
            flatRows: [],
            rowsById: {}
          };
        }

        return selectRowsFn(instance, rowModel);
      }, {
        key: 'getFilteredSelectedRowModel',
        debug: function debug() {
          var _instance$options$deb2;

          return (_instance$options$deb2 = instance.options.debugAll) != null ? _instance$options$deb2 : instance.options.debugTable;
        },
        onChange: function onChange() {
          return instance._notifyExpandedReset();
        }
      }),
      getGroupedSelectedRowModel: utils.memo(function () {
        return [instance.getState().rowSelection, instance.getGroupedRowModel()];
      }, function (rowSelection, rowModel) {
        if (!Object.keys(rowSelection).length) {
          return {
            rows: [],
            flatRows: [],
            rowsById: {}
          };
        }

        return selectRowsFn(instance, rowModel);
      }, {
        key: 'getGroupedSelectedRowModel',
        debug: function debug() {
          var _instance$options$deb3;

          return (_instance$options$deb3 = instance.options.debugAll) != null ? _instance$options$deb3 : instance.options.debugTable;
        },
        onChange: function onChange() {
          return instance._notifyExpandedReset();
        }
      }),
      ///
      getRowIsSelected: function getRowIsSelected(rowId) {
        var _instance$getState = instance.getState(),
            rowSelection = _instance$getState.rowSelection;

        var row = instance.getRow(rowId);

        if (!row) {
          throw new Error();
        }

        return isRowSelected(row, rowSelection) === true;
      },
      getRowIsSomeSelected: function getRowIsSomeSelected(rowId) {
        var _instance$getState2 = instance.getState(),
            rowSelection = _instance$getState2.rowSelection;

        var row = instance.getRow(rowId);

        if (!row) {
          throw new Error();
        }

        return isRowSelected(row, rowSelection) === 'some';
      },
      getRowCanSelect: function getRowCanSelect(rowId) {
        var _instance$options$ena;

        var row = instance.getRow(rowId);

        if (!row) {
          throw new Error();
        }

        if (typeof instance.options.enableRowSelection === 'function') {
          return instance.options.enableRowSelection(row);
        }

        return (_instance$options$ena = instance.options.enableRowSelection) != null ? _instance$options$ena : true;
      },
      getRowCanSelectSubRows: function getRowCanSelectSubRows(rowId) {
        var _instance$options$ena2;

        var row = instance.getRow(rowId);

        if (!row) {
          throw new Error();
        }

        if (typeof instance.options.enableSubRowSelection === 'function') {
          return instance.options.enableSubRowSelection(row);
        }

        return (_instance$options$ena2 = instance.options.enableSubRowSelection) != null ? _instance$options$ena2 : true;
      },
      getRowCanMultiSelect: function getRowCanMultiSelect(rowId) {
        var _instance$options$ena3;

        var row = instance.getRow(rowId);

        if (!row) {
          throw new Error();
        }

        if (typeof instance.options.enableMultiRowSelection === 'function') {
          return instance.options.enableMultiRowSelection(row);
        }

        return (_instance$options$ena3 = instance.options.enableMultiRowSelection) != null ? _instance$options$ena3 : true;
      },
      // getGroupingRowCanSelect: rowId => {
      //   const row = instance.getRow(rowId)
      //   if (!row) {
      //     throw new Error()
      //   }
      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {
      //     return instance.options.enableGroupingRowSelection(row)
      //   }
      //   return instance.options.enableGroupingRowSelection ?? false
      // },
      getIsAllRowsSelected: function getIsAllRowsSelected() {
        var preFilteredFlatRows = instance.getPreGlobalFilteredRowModel().flatRows;

        var _instance$getState3 = instance.getState(),
            rowSelection = _instance$getState3.rowSelection;

        var isAllRowsSelected = Boolean(preFilteredFlatRows.length && Object.keys(rowSelection).length);

        if (isAllRowsSelected) {
          if (preFilteredFlatRows.some(function (row) {
            return !rowSelection[row.id];
          })) {
            isAllRowsSelected = false;
          }
        }

        return isAllRowsSelected;
      },
      getIsAllPageRowsSelected: function getIsAllPageRowsSelected() {
        var paginationFlatRows = instance.getPaginationRowModel().flatRows;

        var _instance$getState4 = instance.getState(),
            rowSelection = _instance$getState4.rowSelection;

        var isAllPageRowsSelected = !!paginationFlatRows.length;

        if (isAllPageRowsSelected && paginationFlatRows.some(function (row) {
          return !rowSelection[row.id];
        })) {
          isAllPageRowsSelected = false;
        }

        return isAllPageRowsSelected;
      },
      getIsSomeRowsSelected: function getIsSomeRowsSelected() {
        var _instance$getState$ro;

        return !instance.getIsAllRowsSelected() && !!Object.keys((_instance$getState$ro = instance.getState().rowSelection) != null ? _instance$getState$ro : {}).length;
      },
      getIsSomePageRowsSelected: function getIsSomePageRowsSelected() {
        var paginationFlatRows = instance.getPaginationRowModel().flatRows;
        return instance.getIsAllPageRowsSelected() ? false : !!(paginationFlatRows != null && paginationFlatRows.length);
      },
      getToggleRowSelectedProps: function getToggleRowSelectedProps(rowId, userProps) {
        var row = instance.getRow(rowId);
        var isSelected = row.getIsSelected();
        var isSomeSelected = row.getIsSomeSelected();
        var canSelect = row.getCanSelect();
        var initialProps = {
          onChange: canSelect ? function (e) {
            row.toggleSelected(e.target.checked);
          } : undefined,
          checked: isSelected,
          title: 'Toggle Row Selected',
          indeterminate: isSomeSelected // onChange: forInput
          //   ? (e: Event) => e.stopPropagation()
          //   : (e: Event) => {
          //       if (instance.options.isAdditiveSelectEvent(e)) {
          //         row.toggleSelected()
          //       } else if (instance.options.isInclusiveSelectEvent(e)) {
          //         instance.addRowSelectionRange(row.id)
          //       } else {
          //         instance.setRowSelection({})
          //         row.toggleSelected()
          //       }
          //       if (props.onClick) props.onClick(e)
          //     },

        };
        return utils.propGetter(initialProps, userProps);
      },
      getToggleAllRowsSelectedProps: function getToggleAllRowsSelectedProps(userProps) {
        var isSomeRowsSelected = instance.getIsSomeRowsSelected();
        var isAllRowsSelected = instance.getIsAllRowsSelected();
        var initialProps = {
          onChange: function onChange(e) {
            instance.toggleAllRowsSelected(e.target.checked);
          },
          checked: isAllRowsSelected,
          title: 'Toggle All Rows Selected',
          indeterminate: isSomeRowsSelected
        };
        return utils.propGetter(initialProps, userProps);
      },
      getToggleAllPageRowsSelectedProps: function getToggleAllPageRowsSelectedProps(userProps) {
        var isSomePageRowsSelected = instance.getIsSomePageRowsSelected();
        var isAllPageRowsSelected = instance.getIsAllPageRowsSelected();
        var initialProps = {
          onChange: function onChange(e) {
            instance.toggleAllPageRowsSelected(e.target.checked);
          },
          checked: isAllPageRowsSelected,
          title: 'Toggle All Current Page Rows Selected',
          indeterminate: isSomePageRowsSelected
        };
        return utils.propGetter(initialProps, userProps);
      }
    };
  },
  createRow: function createRow(row, instance) {
    return {
      getIsSelected: function getIsSelected() {
        return instance.getRowIsSelected(row.id);
      },
      getIsSomeSelected: function getIsSomeSelected() {
        return instance.getRowIsSomeSelected(row.id);
      },
      toggleSelected: function toggleSelected(value) {
        return instance.toggleRowSelected(row.id, value);
      },
      getToggleSelectedProps: function getToggleSelectedProps(userProps) {
        return instance.getToggleRowSelectedProps(row.id, userProps);
      },
      getCanMultiSelect: function getCanMultiSelect() {
        return instance.getRowCanMultiSelect(row.id);
      },
      getCanSelect: function getCanSelect() {
        return instance.getRowCanSelect(row.id);
      }
    };
  }
};

var mutateRowIsSelected = function mutateRowIsSelected(selectedRowIds, id, value, instance) {
  var _row$subRows;

  var row = instance.getRow(id);
  row.getIsGrouped(); // if ( // TODO: enforce grouping row selection rules
  //   !isGrouped ||
  //   (isGrouped && instance.options.enableGroupingRowSelection)
  // ) {

  if (value) {
    selectedRowIds[id] = true;
  } else {
    delete selectedRowIds[id];
  } // }


  if ((_row$subRows = row.subRows) != null && _row$subRows.length && instance.getRowCanSelectSubRows(row.id)) {
    row.subRows.forEach(function (row) {
      return mutateRowIsSelected(selectedRowIds, row.id, value, instance);
    });
  }
};

function selectRowsFn(instance, rowModel) {
  var rowSelection = instance.getState().rowSelection;
  var newSelectedFlatRows = [];
  var newSelectedRowsById = {}; // Filters top level and nested rows

  var recurseRows = function recurseRows(rows, depth) {

    return rows.map(function (row) {
      var _row$subRows2;

      var isSelected = isRowSelected(row, rowSelection) === true;

      if (isSelected) {
        newSelectedFlatRows.push(row);
        newSelectedRowsById[row.id] = row;
      }

      if ((_row$subRows2 = row.subRows) != null && _row$subRows2.length) {
        row = _rollupPluginBabelHelpers["extends"]({}, row, {
          subRows: recurseRows(row.subRows)
        });
      }

      if (isSelected) {
        return row;
      }
    }).filter(Boolean);
  };

  return {
    rows: recurseRows(rowModel.rows),
    flatRows: newSelectedFlatRows,
    rowsById: newSelectedRowsById
  };
}
function isRowSelected(row, selection, instance) {
  if (selection[row.id]) {
    return true;
  }

  if (row.subRows && row.subRows.length) {
    var allChildrenSelected = true;
    var someSelected = false;
    row.subRows.forEach(function (subRow) {
      // Bail out early if we know both of these
      if (someSelected && !allChildrenSelected) {
        return;
      }

      if (isRowSelected(subRow, selection)) {
        someSelected = true;
      } else {
        allChildrenSelected = false;
      }
    });
    return allChildrenSelected ? true : someSelected ? 'some' : false;
  }

  return false;
}

exports.RowSelection = RowSelection;
exports.isRowSelected = isRowSelected;
exports.selectRowsFn = selectRowsFn;
//# sourceMappingURL=RowSelection.js.map

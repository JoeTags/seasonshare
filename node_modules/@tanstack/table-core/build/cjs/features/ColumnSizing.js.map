{"version":3,"file":"ColumnSizing.js","sources":["../../../src/features/ColumnSizing.ts"],"sourcesContent":["import {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\n//\n\nexport type ColumnSizing = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizing\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnResizerProps = {\n  title?: string\n  onMouseDown?: (e: MouseEvent) => void\n  onTouchStart?: (e: TouchEvent) => void\n  draggable?: boolean\n  role?: string\n}\n\nexport type ColumnSizingInstance<TGenerics extends AnyGenerics> = {\n  getColumnWidth: (columnId: string) => number\n  setColumnSizing: (updater: Updater<ColumnSizing>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: () => void\n  resetColumnSize: (columnId: string) => void\n  resetHeaderSize: (headerId: string) => void\n  resetHeaderSizeInfo: () => void\n  getColumnCanResize: (columnId: string) => boolean\n  getHeaderCanResize: (headerId: string) => boolean\n  getHeaderResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  getColumnIsResizing: (columnId: string) => boolean\n  getHeaderIsResizing: (headerId: string) => boolean\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  defaultCanResize?: boolean\n  width?: number\n  minWidth?: number\n  maxWidth?: number\n}\n\nexport type ColumnSizingColumn<TGenerics extends AnyGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends AnyGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  getResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  resetSize: () => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  width: 150,\n  minWidth: 20,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport const ColumnSizing = {\n  getDefaultColumn: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: {\n        startOffset: null,\n        startSize: null,\n        deltaOffset: null,\n        deltaPercentage: null,\n        isResizingColumn: false,\n        columnSizingStart: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      getColumnWidth: (columnId: string) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const columnSize = instance.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.minWidth ?? defaultColumnSizing.minWidth,\n            columnSize ?? column.width ?? defaultColumnSizing.width\n          ),\n          column.maxWidth ?? defaultColumnSizing.maxWidth\n        )\n      },\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizing)\n        ),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizingInfo)\n        ),\n      resetColumnSizing: () => {\n        instance.setColumnSizing(instance.initialState.columnSizing ?? {})\n      },\n      resetHeaderSizeInfo: () => {\n        instance.setColumnSizingInfo(\n          instance.initialState.columnSizingInfo ?? {}\n        )\n      },\n      resetColumnSize: columnId => {\n        instance.setColumnSizing(({ [columnId]: _, ...rest }) => {\n          return rest\n        })\n      },\n      resetHeaderSize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        return instance.resetColumnSize(header.column.id)\n      },\n      getHeaderCanResize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnCanResize(header.column.id)\n      },\n      getColumnCanResize: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableResizing ??\n          instance.options.enableColumnResizing ??\n          column.defaultCanResize ??\n          true\n        )\n      },\n      getColumnIsResizing: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === columnId\n        )\n      },\n      getHeaderIsResizing: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnIsResizing(header.column.id)\n      },\n\n      getHeaderResizerProps: (headerId, userProps) => {\n        const header = instance.getHeader(headerId)\n        const column = instance.getColumn(header.column.id)\n\n        const canResize = column.getCanResize()\n\n        const onResizeStart = (e: MouseEvent | TouchEvent) => {\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const header = headerId ? instance.getHeader(headerId) : undefined\n\n          const startSize = header ? header.getWidth() : column.getWidth()\n\n          const columnSizingStart: [string, number][] = header\n            ? header.getLeafHeaders().map(d => [d.column.id, d.getWidth()])\n            : [[column.id, column.getWidth()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0].clientX)\n            : e.clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizing = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerWidth]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerWidth + headerWidth * deltaPercentage, 0) *\n                      100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0].clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0].clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n\n        const initialProps: ColumnResizerProps = canResize\n          ? {\n              title: 'Toggle Grouping',\n              draggable: false,\n              role: 'separator',\n              onMouseDown: (e: MouseEvent & { persist?: () => void }) => {\n                e.persist?.()\n                onResizeStart(e)\n              },\n              onTouchStart: (e: TouchEvent & { persist?: () => void }) => {\n                e.persist?.()\n                onResizeStart(e)\n              },\n            }\n          : {}\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(column.id),\n      getCanResize: () => instance.getColumnCanResize(column.id),\n      resetSize: () => instance.resetColumnSize(column.id),\n    }\n  },\n\n  createHeader: <TGenerics extends AnyGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(header.column.id),\n      getCanResize: () => instance.getColumnCanResize(header.column.id),\n      resetSize: () => instance.resetColumnSize(header.column.id),\n      getResizerProps: userProps =>\n        instance.getHeaderResizerProps(header.id, userProps),\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: TouchEvent | MouseEvent): e is TouchEvent {\n  return e.type === 'touchstart'\n}\n"],"names":["defaultColumnSizing","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumn","getInitialState","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","instance","columnResizeMode","onColumnSizingChange","makeStateUpdater","onColumnSizingInfoChange","getInstance","getColumnWidth","columnId","column","getColumn","Error","columnSize","getState","id","Math","min","max","setColumnSizing","updater","options","functionalUpdate","setColumnSizingInfo","resetColumnSizing","initialState","resetHeaderSizeInfo","resetColumnSize","rest","resetHeaderSize","headerId","header","getHeader","getHeaderCanResize","getColumnCanResize","enableResizing","enableColumnResizing","defaultCanResize","getColumnIsResizing","getHeaderIsResizing","getHeaderResizerProps","userProps","canResize","getCanResize","onResizeStart","e","isTouchStartEvent","touches","length","undefined","getWidth","getLeafHeaders","map","d","clientX","round","updateOffset","eventType","clientXPos","newColumnSizing","old","forEach","headerWidth","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","initialProps","title","draggable","role","onMouseDown","persist","onTouchStart","propGetter","createColumn","getIsResizing","resetSize","createHeader","getResizerProps","passiveSupported","supported","noop","window","err","type"],"mappings":"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"}
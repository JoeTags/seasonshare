/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var utils = require('../utils.js');

//
var Pagination = {
  getInitialState: function getInitialState() {
    return {
      pagination: {
        pageCount: -1,
        pageIndex: 0,
        pageSize: 10
      }
    };
  },
  getDefaultOptions: function getDefaultOptions(instance) {
    return {
      onPaginationChange: utils.makeStateUpdater('pagination', instance),
      autoResetPageIndex: true
    };
  },
  getInstance: function getInstance(instance) {
    var registered = false;
    return {
      _notifyPageIndexReset: function _notifyPageIndexReset() {
        if (!registered) {
          registered = true;
          return;
        }

        if (instance.options.autoResetAll === false) {
          return;
        }

        if (instance.options.autoResetAll === true || instance.options.autoResetPageIndex) {
          instance.resetPageIndex();
        }
      },
      setPagination: function setPagination(updater) {
        var safeUpdater = function safeUpdater(old) {
          var newState = utils.functionalUpdate(updater, old);
          return newState;
        };

        return instance.options.onPaginationChange == null ? void 0 : instance.options.onPaginationChange(safeUpdater, utils.functionalUpdate(safeUpdater, instance.getState().pagination));
      },
      resetPagination: function resetPagination() {
        var _instance$initialStat;

        instance.setPagination((_instance$initialStat = instance.initialState.pagination) != null ? _instance$initialStat : {
          pageIndex: 0,
          pageSize: 10,
          pageCount: -1
        });
      },
      setPageIndex: function setPageIndex(updater) {
        instance.setPagination(function (old) {
          var pageIndex = utils.functionalUpdate(updater, old.pageIndex);
          var maxPageIndex = old.pageCount && old.pageCount > 0 ? old.pageCount - 1 : Number.MAX_SAFE_INTEGER;
          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex);
          return _rollupPluginBabelHelpers["extends"]({}, old, {
            pageIndex: pageIndex
          });
        });
      },
      resetPageIndex: function resetPageIndex() {
        instance.setPageIndex(0);
      },
      resetPageSize: function resetPageSize() {
        var _instance$initialStat2, _instance$initialStat3, _instance$initialStat4;

        instance.setPageSize((_instance$initialStat2 = (_instance$initialStat3 = instance.initialState) == null ? void 0 : (_instance$initialStat4 = _instance$initialStat3.pagination) == null ? void 0 : _instance$initialStat4.pageSize) != null ? _instance$initialStat2 : 10);
      },
      setPageSize: function setPageSize(updater) {
        instance.setPagination(function (old) {
          var pageSize = Math.max(1, utils.functionalUpdate(updater, old.pageSize));
          var topRowIndex = old.pageSize * old.pageIndex;
          var pageIndex = Math.floor(topRowIndex / pageSize);
          return _rollupPluginBabelHelpers["extends"]({}, old, {
            pageIndex: pageIndex,
            pageSize: pageSize
          });
        });
      },
      setPageCount: function setPageCount(updater) {
        return instance.setPagination(function (old) {
          var newPageCount = utils.functionalUpdate(updater, old.pageCount);

          if (typeof newPageCount === 'number') {
            newPageCount = Math.max(-1, newPageCount);
          }

          return _rollupPluginBabelHelpers["extends"]({}, old, {
            pageCount: newPageCount
          });
        });
      },
      getPageOptions: utils.memo(function () {
        return [instance.getState().pagination.pageSize, instance.getState().pagination.pageCount];
      }, function (pageSize, pageCount) {
        var pageOptions = [];

        if (pageCount && pageCount > 0) {
          pageOptions = [].concat(new Array(pageCount)).fill(null).map(function (_, i) {
            return i;
          });
        }

        return pageOptions;
      }, {
        key: 'getPageOptions',
        debug: function debug() {
          var _instance$options$deb;

          return (_instance$options$deb = instance.options.debugAll) != null ? _instance$options$deb : instance.options.debugTable;
        }
      }),
      getCanPreviousPage: function getCanPreviousPage() {
        return instance.getState().pagination.pageIndex > 0;
      },
      getCanNextPage: function getCanNextPage() {
        var _instance$getState$pa = instance.getState().pagination,
            pageIndex = _instance$getState$pa.pageIndex,
            pageSize = _instance$getState$pa.pageSize;
        var pageCount = instance.getPageCount();

        if (pageCount === -1) {
          return true;
        }

        if (pageCount === 0) {
          return false;
        }

        return pageIndex < Math.ceil(instance.getPrePaginationRowModel().rows.length / pageSize) - 1;
      },
      previousPage: function previousPage() {
        return instance.setPageIndex(function (old) {
          return old - 1;
        });
      },
      nextPage: function nextPage() {
        return instance.setPageIndex(function (old) {
          return old + 1;
        });
      },
      getPrePaginationRowModel: function getPrePaginationRowModel() {
        return instance.getExpandedRowModel();
      },
      getPaginationRowModel: utils.memo(function () {
        return [instance.getState().pagination, instance.getExpandedRowModel(), instance.options.paginateRowsFn];
      }, function (_pagination, rowModel, paginateRowsFn) {
        if (!paginateRowsFn || !rowModel.rows.length) {
          return rowModel;
        }

        return paginateRowsFn(instance, rowModel);
      }, {
        key: 'getPaginationRowModel',
        debug: function debug() {
          var _instance$options$deb2;

          return (_instance$options$deb2 = instance.options.debugAll) != null ? _instance$options$deb2 : instance.options.debugTable;
        }
      }),
      getPageCount: function getPageCount() {
        var pageCount = instance.getState().pagination.pageCount;

        if (pageCount > 0) {
          return pageCount;
        }

        return Math.ceil(instance.getPrePaginationRowModel().rows.length / instance.getState().pagination.pageSize);
      }
    };
  }
};

exports.Pagination = Pagination;
//# sourceMappingURL=Pagination.js.map

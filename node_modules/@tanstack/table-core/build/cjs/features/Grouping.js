/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var aggregationTypes = require('../aggregationTypes.js');
var utils = require('../utils.js');

//
var Grouping = {
  getDefaultColumn: function getDefaultColumn() {
    return {
      aggregationType: 'auto'
    };
  },
  getInitialState: function getInitialState() {
    return {
      grouping: []
    };
  },
  getDefaultOptions: function getDefaultOptions(instance) {
    return {
      onGroupingChange: utils.makeStateUpdater('grouping', instance),
      autoResetGrouping: true,
      groupedColumnMode: 'reorder'
    };
  },
  createColumn: function createColumn(column, instance) {
    return {
      aggregationType: column.aggregationType,
      getCanGroup: function getCanGroup() {
        return instance.getColumnCanGroup(column.id);
      },
      getGroupedIndex: function getGroupedIndex() {
        return instance.getColumnGroupedIndex(column.id);
      },
      getIsGrouped: function getIsGrouped() {
        return instance.getColumnIsGrouped(column.id);
      },
      toggleGrouping: function toggleGrouping() {
        return instance.toggleColumnGrouping(column.id);
      },
      getToggleGroupingProps: function getToggleGroupingProps(userProps) {
        return instance.getToggleGroupingProps(column.id, userProps);
      }
    };
  },
  getInstance: function getInstance(instance) {
    var registered = false;
    return {
      _notifyGroupingReset: function _notifyGroupingReset() {
        if (!registered) {
          registered = true;
          return;
        }

        if (instance.options.autoResetAll === false) {
          return;
        }

        if (instance.options.autoResetAll === true || instance.options.autoResetGrouping) {
          instance.resetGrouping();
        }
      },
      getColumnAutoAggregationFn: function getColumnAutoAggregationFn(columnId) {
        var firstRow = instance.getCoreRowModel().flatRows[0];
        var value = firstRow == null ? void 0 : firstRow.values[columnId];

        if (typeof value === 'number') {
          return aggregationTypes.aggregationTypes.sum;
        }

        if (Object.prototype.toString.call(value) === '[object Date]') {
          return aggregationTypes.aggregationTypes.extent;
        }

        return aggregationTypes.aggregationTypes.count;
      },
      getColumnAggregationFn: function getColumnAggregationFn(columnId) {
        var _ref;

        var column = instance.getColumn(columnId);
        var userAggregationTypes = instance.options.aggregationTypes;

        if (!column) {
          throw new Error();
        }

        return utils.isFunction(column.aggregationType) ? column.aggregationType : column.aggregationType === 'auto' ? instance.getColumnAutoAggregationFn(columnId) : (_ref = userAggregationTypes == null ? void 0 : userAggregationTypes[column.aggregationType]) != null ? _ref : aggregationTypes.aggregationTypes[column.aggregationType];
      },
      setGrouping: function setGrouping(updater) {
        return instance.options.onGroupingChange == null ? void 0 : instance.options.onGroupingChange(updater, utils.functionalUpdate(updater, instance.getState().grouping));
      },
      toggleColumnGrouping: function toggleColumnGrouping(columnId) {
        instance.setGrouping(function (old) {
          // Find any existing grouping for this column
          if (old != null && old.includes(columnId)) {
            return old.filter(function (d) {
              return d !== columnId;
            });
          }

          return [].concat(old != null ? old : [], [columnId]);
        });
      },
      getColumnCanGroup: function getColumnCanGroup(columnId) {
        var _ref2, _ref3, _column$enableGroupin;

        var column = instance.getColumn(columnId);

        if (!column) {
          throw new Error();
        }

        return (_ref2 = (_ref3 = (_column$enableGroupin = column.enableGrouping) != null ? _column$enableGroupin : instance.options.enableGrouping) != null ? _ref3 : column.defaultCanGroup) != null ? _ref2 : !!column.accessorFn;
      },
      getColumnIsGrouped: function getColumnIsGrouped(columnId) {
        var _instance$getState$gr;

        return (_instance$getState$gr = instance.getState().grouping) == null ? void 0 : _instance$getState$gr.includes(columnId);
      },
      getColumnGroupedIndex: function getColumnGroupedIndex(columnId) {
        var _instance$getState$gr2;

        return (_instance$getState$gr2 = instance.getState().grouping) == null ? void 0 : _instance$getState$gr2.indexOf(columnId);
      },
      resetGrouping: function resetGrouping() {
        var _instance$initialStat, _instance$initialStat2;

        instance.setGrouping((_instance$initialStat = (_instance$initialStat2 = instance.initialState) == null ? void 0 : _instance$initialStat2.grouping) != null ? _instance$initialStat : []);
      },
      getToggleGroupingProps: function getToggleGroupingProps(columnId, userProps) {
        var column = instance.getColumn(columnId);
        var canGroup = column.getCanGroup();
        var initialProps = {
          title: canGroup ? 'Toggle Grouping' : undefined,
          onClick: canGroup ? function (e) {
            column.toggleGrouping == null ? void 0 : column.toggleGrouping();
          } : undefined
        };
        return utils.propGetter(initialProps, userProps);
      },
      getRowIsGrouped: function getRowIsGrouped(rowId) {
        var _instance$getRow;

        return !!((_instance$getRow = instance.getRow(rowId)) != null && _instance$getRow.groupingColumnId);
      },
      getPreGroupedRowModel: function getPreGroupedRowModel() {
        return instance.getSortedRowModel();
      },
      getGroupedRowModel: utils.memo(function () {
        return [instance.getState().grouping, instance.getSortedRowModel(), instance.options.groupRowsFn];
      }, function (grouping, rowModel, groupRowsFn) {
        if (!groupRowsFn || !grouping.length) {
          return rowModel;
        }

        return groupRowsFn(instance, rowModel);
      }, {
        key: 'getGroupedRowModel',
        debug: function debug() {
          var _instance$options$deb;

          return (_instance$options$deb = instance.options.debugAll) != null ? _instance$options$deb : instance.options.debugTable;
        },
        onChange: function onChange() {
          return instance._notifyExpandedReset();
        }
      })
    };
  },
  createRow: function createRow(row, instance) {
    return {
      getIsGrouped: function getIsGrouped() {
        return instance.getRowIsGrouped(row.id);
      }
    };
  },
  createCell: function createCell(cell, column, row, instance) {
    return {
      getIsGrouped: function getIsGrouped() {
        return column.getIsGrouped() && column.id === row.groupingColumnId;
      },
      getIsPlaceholder: function getIsPlaceholder() {
        return !cell.getIsGrouped() && column.getIsGrouped();
      },
      getIsAggregated: function getIsAggregated() {
        var _row$subRows;

        return !cell.getIsGrouped() && !cell.getIsPlaceholder() && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length) > 1;
      },
      renderAggregatedCell: function renderAggregatedCell() {
        var _column$aggregatedCel;

        var template = (_column$aggregatedCel = column.aggregatedCell) != null ? _column$aggregatedCel : column.cell;
        return template ? instance.render(template, {
          instance: instance,
          column: column,
          row: row,
          cell: cell,
          value: cell.value
        }) : null;
      }
    };
  },
  orderColumns: function orderColumns(leafColumns, grouping, groupedColumnMode) {
    if (!(grouping != null && grouping.length) || !groupedColumnMode) {
      return leafColumns;
    }

    var nonGroupingColumns = leafColumns.filter(function (col) {
      return !grouping.includes(col.id);
    });

    if (groupedColumnMode === 'remove') {
      return nonGroupingColumns;
    }

    var groupingColumns = grouping.map(function (g) {
      return leafColumns.find(function (col) {
        return col.id === g;
      });
    }).filter(Boolean);
    return [].concat(groupingColumns, nonGroupingColumns);
  }
};

exports.Grouping = Grouping;
//# sourceMappingURL=Grouping.js.map

/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('../utils.js');
var ColumnSizing = require('./ColumnSizing.js');

//
var Headers = {
  createRow: function createRow(row, instance) {
    return {
      _getAllVisibleCells: utils.memo(function () {
        return [row.getAllCells().filter(function (cell) {
          return cell.column.getIsVisible();
        }).map(function (d) {
          return d.id;
        }).join('_')];
      }, function (_) {
        return row.getAllCells().filter(function (cell) {
          return cell.column.getIsVisible();
        });
      }, {
        key: 'row._getAllVisibleCells',
        debug: function debug() {
          var _instance$options$deb;

          return (_instance$options$deb = instance.options.debugAll) != null ? _instance$options$deb : instance.options.debugRows;
        }
      }),
      getVisibleCells: utils.memo(function () {
        return [row.getLeftVisibleCells(), row.getCenterVisibleCells(), row.getRightVisibleCells()];
      }, function (left, center, right) {
        return [].concat(left, center, right);
      }, {
        key: 'row.getVisibleCells',
        debug: function debug() {
          var _instance$options$deb2;

          return (_instance$options$deb2 = instance.options.debugAll) != null ? _instance$options$deb2 : instance.options.debugRows;
        }
      }),
      getCenterVisibleCells: utils.memo(function () {
        return [row._getAllVisibleCells(), instance.getState().columnPinning.left, instance.getState().columnPinning.right];
      }, function (allCells, left, right) {
        var leftAndRight = [].concat(left != null ? left : [], right != null ? right : []);
        return allCells.filter(function (d) {
          return !leftAndRight.includes(d.columnId);
        });
      }, {
        key: 'row.getCenterVisibleCells',
        debug: function debug() {
          var _instance$options$deb3;

          return (_instance$options$deb3 = instance.options.debugAll) != null ? _instance$options$deb3 : instance.options.debugRows;
        }
      }),
      getLeftVisibleCells: utils.memo(function () {
        return [row._getAllVisibleCells(), instance.getState().columnPinning.left,,];
      }, function (allCells, left) {
        var cells = (left != null ? left : []).map(function (columnId) {
          return allCells.find(function (cell) {
            return cell.columnId === columnId;
          });
        }).filter(Boolean);
        return cells;
      }, {
        key: 'row.getLeftVisibleCells',
        debug: function debug() {
          var _instance$options$deb4;

          return (_instance$options$deb4 = instance.options.debugAll) != null ? _instance$options$deb4 : instance.options.debugRows;
        }
      }),
      getRightVisibleCells: utils.memo(function () {
        return [row._getAllVisibleCells(), instance.getState().columnPinning.right];
      }, function (allCells, right) {
        var cells = (right != null ? right : []).map(function (columnId) {
          return allCells.find(function (cell) {
            return cell.columnId === columnId;
          });
        }).filter(Boolean);
        return cells;
      }, {
        key: 'row.getRightVisibleCells',
        debug: function debug() {
          var _instance$options$deb5;

          return (_instance$options$deb5 = instance.options.debugAll) != null ? _instance$options$deb5 : instance.options.debugRows;
        }
      })
    };
  },
  getInstance: function getInstance(instance) {
    return {
      createHeader: function createHeader(column, options) {
        var _options$id;

        var id = (_options$id = options.id) != null ? _options$id : column.id;
        var header = {
          id: id,
          column: column,
          isPlaceholder: options.isPlaceholder,
          placeholderId: options.placeholderId,
          depth: options.depth,
          subHeaders: [],
          colSpan: 0,
          rowSpan: 0,
          getWidth: function getWidth() {
            var sum = 0;

            var recurse = function recurse(header) {
              if (header.subHeaders.length) {
                header.subHeaders.forEach(recurse);
              } else {
                var _header$column$getWid;

                sum += (_header$column$getWid = header.column.getWidth()) != null ? _header$column$getWid : 0;
              }
            };

            recurse(header);
            return sum;
          },
          getLeafHeaders: function getLeafHeaders() {
            var leafHeaders = [];

            var recurseHeader = function recurseHeader(h) {
              if (h.subHeaders && h.subHeaders.length) {
                h.subHeaders.map(recurseHeader);
              }

              leafHeaders.push(h);
            };

            recurseHeader(header);
            return leafHeaders;
          },
          getHeaderProps: function getHeaderProps(userProps) {
            return instance.getHeaderProps(header.id, userProps);
          },
          getFooterProps: function getFooterProps(userProps) {
            return instance.getFooterProps(header.id, userProps);
          },
          renderHeader: function renderHeader() {
            return column.header ? instance.render(column.header, {
              instance: instance,
              header: header,
              column: column
            }) : null;
          },
          renderFooter: function renderFooter() {
            return column.footer ? instance.render(column.footer, {
              instance: instance,
              header: header,
              column: column
            }) : null;
          }
        }; // Yes, we have to convert instance to unknown, because we know more than the compiler here.

        return Object.assign(header, ColumnSizing.ColumnSizing.createHeader(header, instance));
      },
      // Header Groups
      getHeaderGroups: utils.memo(function () {
        return [instance.getAllColumns(), instance.getVisibleLeafColumns(), instance.getState().columnPinning.left, instance.getState().columnPinning.right];
      }, function (allColumns, leafColumns, left, right) {
        var leftColumns = leafColumns.filter(function (column) {
          return left == null ? void 0 : left.includes(column.id);
        });
        var rightColumns = leafColumns.filter(function (column) {
          return right == null ? void 0 : right.includes(column.id);
        });
        var centerColumns = leafColumns.filter(function (column) {
          return !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id));
        });
        var headerGroups = buildHeaderGroups(allColumns, [].concat(leftColumns, centerColumns, rightColumns), instance);
        return headerGroups;
      }, {
        key: 'getHeaderGroups',
        debug: function debug() {
          var _instance$options$deb6;

          return (_instance$options$deb6 = instance.options.debugAll) != null ? _instance$options$deb6 : instance.options.debugHeaders;
        }
      }),
      getCenterHeaderGroups: utils.memo(function () {
        return [instance.getAllColumns(), instance.getVisibleLeafColumns(), instance.getState().columnPinning.left, instance.getState().columnPinning.right];
      }, function (allColumns, leafColumns, left, right) {
        leafColumns = leafColumns.filter(function (column) {
          return !(left != null && left.includes(column.id)) && !(right != null && right.includes(column.id));
        });
        return buildHeaderGroups(allColumns, leafColumns, instance, 'center');
      }, {
        key: 'getCenterHeaderGroups',
        debug: function debug() {
          var _instance$options$deb7;

          return (_instance$options$deb7 = instance.options.debugAll) != null ? _instance$options$deb7 : instance.options.debugHeaders;
        }
      }),
      getLeftHeaderGroups: utils.memo(function () {
        return [instance.getAllColumns(), instance.getVisibleLeafColumns(), instance.getState().columnPinning.left];
      }, function (allColumns, leafColumns, left) {
        leafColumns = leafColumns.filter(function (column) {
          return left == null ? void 0 : left.includes(column.id);
        });
        return buildHeaderGroups(allColumns, leafColumns, instance, 'left');
      }, {
        key: 'getLeftHeaderGroups',
        debug: function debug() {
          var _instance$options$deb8;

          return (_instance$options$deb8 = instance.options.debugAll) != null ? _instance$options$deb8 : instance.options.debugHeaders;
        }
      }),
      getRightHeaderGroups: utils.memo(function () {
        return [instance.getAllColumns(), instance.getVisibleLeafColumns(), instance.getState().columnPinning.right];
      }, function (allColumns, leafColumns, right) {
        leafColumns = leafColumns.filter(function (column) {
          return right == null ? void 0 : right.includes(column.id);
        });
        return buildHeaderGroups(allColumns, leafColumns, instance, 'right');
      }, {
        key: 'getRightHeaderGroups',
        debug: function debug() {
          var _instance$options$deb9;

          return (_instance$options$deb9 = instance.options.debugAll) != null ? _instance$options$deb9 : instance.options.debugHeaders;
        }
      }),
      // Footer Groups
      getFooterGroups: utils.memo(function () {
        return [instance.getHeaderGroups()];
      }, function (headerGroups) {
        return [].concat(headerGroups).reverse();
      }, {
        key: 'getFooterGroups',
        debug: function debug() {
          var _instance$options$deb10;

          return (_instance$options$deb10 = instance.options.debugAll) != null ? _instance$options$deb10 : instance.options.debugHeaders;
        }
      }),
      getLeftFooterGroups: utils.memo(function () {
        return [instance.getLeftHeaderGroups()];
      }, function (headerGroups) {
        return [].concat(headerGroups).reverse();
      }, {
        key: 'getLeftFooterGroups',
        debug: function debug() {
          var _instance$options$deb11;

          return (_instance$options$deb11 = instance.options.debugAll) != null ? _instance$options$deb11 : instance.options.debugHeaders;
        }
      }),
      getCenterFooterGroups: utils.memo(function () {
        return [instance.getCenterHeaderGroups()];
      }, function (headerGroups) {
        return [].concat(headerGroups).reverse();
      }, {
        key: 'getCenterFooterGroups',
        debug: function debug() {
          var _instance$options$deb12;

          return (_instance$options$deb12 = instance.options.debugAll) != null ? _instance$options$deb12 : instance.options.debugHeaders;
        }
      }),
      getRightFooterGroups: utils.memo(function () {
        return [instance.getRightHeaderGroups()];
      }, function (headerGroups) {
        return [].concat(headerGroups).reverse();
      }, {
        key: 'getRightFooterGroups',
        debug: function debug() {
          var _instance$options$deb13;

          return (_instance$options$deb13 = instance.options.debugAll) != null ? _instance$options$deb13 : instance.options.debugHeaders;
        }
      }),
      // Flat Headers
      getFlatHeaders: utils.memo(function () {
        return [instance.getHeaderGroups()];
      }, function (headerGroups) {
        return headerGroups.map(function (headerGroup) {
          return headerGroup.headers;
        }).flat();
      }, {
        key: 'getFlatHeaders',
        debug: function debug() {
          var _instance$options$deb14;

          return (_instance$options$deb14 = instance.options.debugAll) != null ? _instance$options$deb14 : instance.options.debugHeaders;
        }
      }),
      getLeftFlatHeaders: utils.memo(function () {
        return [instance.getLeftHeaderGroups()];
      }, function (left) {
        return left.map(function (headerGroup) {
          return headerGroup.headers;
        }).flat();
      }, {
        key: 'getLeftFlatHeaders',
        debug: function debug() {
          var _instance$options$deb15;

          return (_instance$options$deb15 = instance.options.debugAll) != null ? _instance$options$deb15 : instance.options.debugHeaders;
        }
      }),
      getCenterFlatHeaders: utils.memo(function () {
        return [instance.getCenterHeaderGroups()];
      }, function (left) {
        return left.map(function (headerGroup) {
          return headerGroup.headers;
        }).flat();
      }, {
        key: 'getCenterFlatHeaders',
        debug: function debug() {
          var _instance$options$deb16;

          return (_instance$options$deb16 = instance.options.debugAll) != null ? _instance$options$deb16 : instance.options.debugHeaders;
        }
      }),
      getRightFlatHeaders: utils.memo(function () {
        return [instance.getRightHeaderGroups()];
      }, function (left) {
        return left.map(function (headerGroup) {
          return headerGroup.headers;
        }).flat();
      }, {
        key: 'getRightFlatHeaders',
        debug: function debug() {
          var _instance$options$deb17;

          return (_instance$options$deb17 = instance.options.debugAll) != null ? _instance$options$deb17 : instance.options.debugHeaders;
        }
      }),
      // Leaf Headers
      getCenterLeafHeaders: utils.memo(function () {
        return [instance.getCenterFlatHeaders()];
      }, function (flatHeaders) {
        return flatHeaders.filter(function (header) {
          var _header$subHeaders;

          return !((_header$subHeaders = header.subHeaders) != null && _header$subHeaders.length);
        });
      }, {
        key: 'getCenterLeafHeaders',
        debug: function debug() {
          var _instance$options$deb18;

          return (_instance$options$deb18 = instance.options.debugAll) != null ? _instance$options$deb18 : instance.options.debugHeaders;
        }
      }),
      getLeftLeafHeaders: utils.memo(function () {
        return [instance.getLeftFlatHeaders()];
      }, function (flatHeaders) {
        return flatHeaders.filter(function (header) {
          var _header$subHeaders2;

          return !((_header$subHeaders2 = header.subHeaders) != null && _header$subHeaders2.length);
        });
      }, {
        key: 'getLeftLeafHeaders',
        debug: function debug() {
          var _instance$options$deb19;

          return (_instance$options$deb19 = instance.options.debugAll) != null ? _instance$options$deb19 : instance.options.debugHeaders;
        }
      }),
      getRightLeafHeaders: utils.memo(function () {
        return [instance.getRightFlatHeaders()];
      }, function (flatHeaders) {
        return flatHeaders.filter(function (header) {
          var _header$subHeaders3;

          return !((_header$subHeaders3 = header.subHeaders) != null && _header$subHeaders3.length);
        });
      }, {
        key: 'getRightLeafHeaders',
        debug: function debug() {
          var _instance$options$deb20;

          return (_instance$options$deb20 = instance.options.debugAll) != null ? _instance$options$deb20 : instance.options.debugHeaders;
        }
      }),
      getLeafHeaders: utils.memo(function () {
        return [instance.getLeftHeaderGroups(), instance.getCenterHeaderGroups(), instance.getRightHeaderGroups()];
      }, function (left, center, right) {
        var _left$0$headers, _left$, _center$0$headers, _center$, _right$0$headers, _right$;

        return [].concat((_left$0$headers = (_left$ = left[0]) == null ? void 0 : _left$.headers) != null ? _left$0$headers : [], (_center$0$headers = (_center$ = center[0]) == null ? void 0 : _center$.headers) != null ? _center$0$headers : [], (_right$0$headers = (_right$ = right[0]) == null ? void 0 : _right$.headers) != null ? _right$0$headers : []).map(function (header) {
          return header.getLeafHeaders();
        }).flat();
      }, {
        key: 'getLeafHeaders',
        debug: function debug() {
          var _instance$options$deb21;

          return (_instance$options$deb21 = instance.options.debugAll) != null ? _instance$options$deb21 : instance.options.debugHeaders;
        }
      }),
      getHeader: function getHeader(id) {
        var header = [].concat(instance.getFlatHeaders(), instance.getCenterFlatHeaders(), instance.getLeftFlatHeaders(), instance.getRightFlatHeaders()).find(function (d) {
          return d.id === id;
        });

        if (!header) {
          if (process.env.NODE_ENV !== 'production') {
            console.warn("Could not find header with id: " + id);
          }

          throw new Error();
        }

        return header;
      },
      getHeaderGroupProps: function getHeaderGroupProps(id, userProps) {
        var headerGroup = instance.getHeaderGroups().find(function (d) {
          return d.id === id;
        });

        if (!headerGroup) {
          return;
        }

        return utils.propGetter({
          key: headerGroup.id,
          role: 'row'
        }, userProps);
      },
      getFooterGroupProps: function getFooterGroupProps(id, userProps) {
        var headerGroup = instance.getFooterGroups().find(function (d) {
          return d.id === id;
        });

        if (!headerGroup) {
          return;
        }

        var initialProps = {
          key: headerGroup.id,
          role: 'row'
        };
        return utils.propGetter(initialProps, userProps);
      },
      getHeaderProps: function getHeaderProps(id, userProps) {
        var header = instance.getHeader(id);

        if (!header) {
          throw new Error();
        }

        var initialProps = {
          key: header.id,
          role: 'columnheader',
          colSpan: header.colSpan,
          rowSpan: header.rowSpan
        };
        return utils.propGetter(initialProps, userProps);
      },
      getFooterProps: function getFooterProps(id, userProps) {
        var header = instance.getHeader(id);
        var initialProps = {
          key: header.id,
          role: 'columnfooter',
          colSpan: header.colSpan,
          rowSpan: header.rowSpan
        };
        return utils.propGetter(initialProps, userProps);
      },
      getTotalWidth: function getTotalWidth() {
        var width = 0;
        instance.getVisibleLeafColumns().forEach(function (column) {
          var _column$getWidth;

          width += (_column$getWidth = column.getWidth()) != null ? _column$getWidth : 0;
        });
        return width;
      }
    };
  }
};
function buildHeaderGroups(allColumns, columnsToGroup, instance, headerFamily) {
  var _headerGroups$0$heade, _headerGroups$;

  // Find the max depth of the columns:
  // build the leaf column row
  // build each buffer row going up
  //    placeholder for non-existent level
  //    real column for existing level
  var maxDepth = 0;

  var findMaxDepth = function findMaxDepth(columns, depth) {
    if (depth === void 0) {
      depth = 1;
    }

    maxDepth = Math.max(maxDepth, depth);
    columns.filter(function (column) {
      return column.getIsVisible();
    }).forEach(function (column) {
      var _column$columns;

      if ((_column$columns = column.columns) != null && _column$columns.length) {
        findMaxDepth(column.columns, depth + 1);
      }
    }, 0);
  };

  findMaxDepth(allColumns);
  var headerGroups = [];

  var createHeaderGroup = function createHeaderGroup(headersToGroup, depth) {
    // The header group we are creating
    var headerGroup = {
      depth: depth,
      id: [headerFamily, "" + depth].filter(Boolean).join('_'),
      headers: [],
      getHeaderGroupProps: function getHeaderGroupProps(getterValue) {
        return instance.getHeaderGroupProps("" + depth, getterValue);
      },
      getFooterGroupProps: function getFooterGroupProps(getterValue) {
        return instance.getFooterGroupProps("" + depth, getterValue);
      }
    }; // The parent columns we're going to scan next

    var parentHeaders = []; // Scan each column for parents

    headersToGroup.forEach(function (headerToGroup) {
      // What is the latest (last) parent column?
      var latestParentHeader = [].concat(parentHeaders).reverse()[0];
      var isLeafHeader = headerToGroup.column.depth === headerGroup.depth;
      var column;
      var isPlaceholder = false;

      if (isLeafHeader && headerToGroup.column.parent) {
        // The parent header is new
        column = headerToGroup.column.parent;
      } else {
        // The parent header is repeated
        column = headerToGroup.column;
        isPlaceholder = true;
      }

      var header = instance.createHeader(column, {
        id: [headerFamily, depth, column.id, headerToGroup == null ? void 0 : headerToGroup.id].filter(Boolean).join('_'),
        isPlaceholder: isPlaceholder,
        placeholderId: isPlaceholder ? "" + parentHeaders.filter(function (d) {
          return d.column === column;
        }).length : undefined,
        depth: depth
      });

      if (!latestParentHeader || latestParentHeader.column !== header.column) {
        header.subHeaders.push(headerToGroup);
        parentHeaders.push(header);
      } else {
        latestParentHeader.subHeaders.push(headerToGroup);
      } // if (!headerToGroup.isPlaceholder) {
      //   headerToGroup.column.header = headerToGroup;
      // }


      headerGroup.headers.push(headerToGroup);
    });
    headerGroups.push(headerGroup);

    if (depth > 0) {
      createHeaderGroup(parentHeaders, depth - 1);
    }
  };

  var bottomHeaders = columnsToGroup.map(function (column) {
    return instance.createHeader(column, {
      depth: maxDepth
    });
  });
  createHeaderGroup(bottomHeaders, maxDepth - 1);
  headerGroups.reverse(); // headerGroups = headerGroups.filter(headerGroup => {
  //   return !headerGroup.headers.every(header => header.isPlaceholder)
  // })

  var recurseHeadersForSpans = function recurseHeadersForSpans(headers) {
    var filteredHeaders = headers.filter(function (header) {
      return header.column.getIsVisible();
    });
    return filteredHeaders.map(function (header) {
      var colSpan = 0;
      var rowSpan = 0;
      var childRowSpans = [0];

      if (header.subHeaders && header.subHeaders.length) {
        childRowSpans = [];
        recurseHeadersForSpans(header.subHeaders).forEach(function (_ref) {
          var childColSpan = _ref.colSpan,
              childRowSpan = _ref.rowSpan;
          colSpan += childColSpan;
          childRowSpans.push(childRowSpan);
        });
      } else {
        colSpan = 1;
      }

      var minChildRowSpan = Math.min.apply(Math, childRowSpans);
      rowSpan = rowSpan + minChildRowSpan;
      header.colSpan = colSpan > 0 ? colSpan : undefined;
      header.rowSpan = rowSpan > 0 ? rowSpan : undefined;
      return {
        colSpan: colSpan,
        rowSpan: rowSpan
      };
    });
  };

  recurseHeadersForSpans((_headerGroups$0$heade = (_headerGroups$ = headerGroups[0]) == null ? void 0 : _headerGroups$.headers) != null ? _headerGroups$0$heade : []);
  return headerGroups;
}

exports.Headers = Headers;
exports.buildHeaderGroups = buildHeaderGroups;
//# sourceMappingURL=Headers.js.map

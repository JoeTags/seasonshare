{"version":3,"file":"Ordering.js","sources":["../../../src/features/Ordering.ts"],"sourcesContent":["import { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  AnyGenerics,\n  PartialGenerics,\n} from '../types'\n\nimport { Grouping } from './Grouping'\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends AnyGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: () => void\n  getOrderColumnsFn: () => (columns: Column<TGenerics>[]) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering = {\n  getInitialState: (): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnOrder)\n        ),\n      resetColumnOrder: () => {\n        instance.setColumnOrder(instance.initialState.columnOrder ?? [])\n      },\n      getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return Grouping.orderColumns(\n            orderedColumns,\n            grouping,\n            groupedColumnMode\n          )\n        },\n        {\n          key: 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n"],"names":["Ordering","getInitialState","columnOrder","getDefaultOptions","instance","onColumnOrderChange","makeStateUpdater","getInstance","setColumnOrder","updater","options","functionalUpdate","getState","resetColumnOrder","initialState","getOrderColumnsFn","memo","grouping","groupedColumnMode","columns","orderedColumns","length","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","findIndex","d","id","push","splice","Grouping","orderColumns","key"],"mappings":";;;;;;;;;;;;;;;;;AAiCA;IAEaA,QAAQ,GAAG;AACtBC,EAAAA,eAAe,EAAE,2BAA6B;AAC5C,WAAO;AACLC,MAAAA,WAAW,EAAE;AADR,KAAP;AAGD,GALqB;AAOtBC,EAAAA,iBAAiB,EAAE,2BACjBC,QADiB,EAEa;AAC9B,WAAO;AACLC,MAAAA,mBAAmB,EAAEC,sBAAgB,CAAC,aAAD,EAAgBF,QAAhB;AADhC,KAAP;AAGD,GAbqB;AAetBG,EAAAA,WAAW,EAAE,qBACXH,QADW,EAEwB;AACnC,WAAO;AACLI,MAAAA,cAAc,EAAE,wBAAAC,OAAO;AAAA,eACrBL,QAAQ,CAACM,OAAT,CAAiBL,mBADI,oBACrBD,QAAQ,CAACM,OAAT,CAAiBL,mBAAjB,CACEI,OADF,EAEEE,sBAAgB,CAACF,OAAD,EAAUL,QAAQ,CAACQ,QAAT,GAAoBV,WAA9B,CAFlB,CADqB;AAAA,OADlB;AAMLW,MAAAA,gBAAgB,EAAE,4BAAM;AAAA;;AACtBT,QAAAA,QAAQ,CAACI,cAAT,0BAAwBJ,QAAQ,CAACU,YAAT,CAAsBZ,WAA9C,oCAA6D,EAA7D;AACD,OARI;AASLa,MAAAA,iBAAiB,EAAEC,UAAI,CACrB;AAAA,eAAM,CACJZ,QAAQ,CAACQ,QAAT,GAAoBV,WADhB,EAEJE,QAAQ,CAACQ,QAAT,GAAoBK,QAFhB,EAGJb,QAAQ,CAACM,OAAT,CAAiBQ,iBAHb,CAAN;AAAA,OADqB,EAMrB,UAAChB,WAAD,EAAce,QAAd,EAAwBC,iBAAxB;AAAA,eAA8C,UAAAC,OAAO,EAAI;AACvD;AACA;AACA,cAAIC,cAAmC,GAAG,EAA1C,CAHuD;;AAMvD,cAAI,EAAClB,WAAD,YAACA,WAAW,CAAEmB,MAAd,CAAJ,EAA0B;AACxBD,YAAAA,cAAc,GAAGD,OAAjB;AACD,WAFD,MAEO;AACL,gBAAMG,eAAe,aAAOpB,WAAP,CAArB,CADK;;AAIL,gBAAMqB,WAAW,aAAOJ,OAAP,CAAjB,CAJK;AAQL;;AARK;AAUH,kBAAMK,cAAc,GAAGF,eAAe,CAACG,KAAhB,EAAvB;AACA,kBAAMC,UAAU,GAAGH,WAAW,CAACI,SAAZ,CACjB,UAAAC,CAAC;AAAA,uBAAIA,CAAC,CAACC,EAAF,KAASL,cAAb;AAAA,eADgB,CAAnB;;AAGA,kBAAIE,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACnBN,gBAAAA,cAAc,CAACU,IAAf,CAAoBP,WAAW,CAACQ,MAAZ,CAAmBL,UAAnB,EAA+B,CAA/B,EAAkC,CAAlC,CAApB;AACD;AAhBE;;AASL,mBAAOH,WAAW,CAACF,MAAZ,IAAsBC,eAAe,CAACD,MAA7C,EAAqD;AAAA;AAQpD,aAjBI;;;AAoBLD,YAAAA,cAAc,aAAOA,cAAP,EAA0BG,WAA1B,CAAd;AACD;;AAED,iBAAOS,iBAAQ,CAACC,YAAT,CACLb,cADK,EAELH,QAFK,EAGLC,iBAHK,CAAP;AAKD,SApCD;AAAA,OANqB,EA2CrB;AACEgB,QAAAA,GAAG,EAAE,mBADP;;AAAA,OA3CqB;AATlB,KAAP;AA0DD;AA5EqB;;;;"}
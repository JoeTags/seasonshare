{"version":3,"file":"Pagination.js","sources":["../../../src/features/Pagination.ts"],"sourcesContent":["import {\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationOptions<TGenerics extends AnyGenerics> = {\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  paginateRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n  autoResetPageIndex: boolean\n}\n\nexport type PaginationInstance<TGenerics extends AnyGenerics> = {\n  _notifyPageIndexReset: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: () => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: () => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: () => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nexport const Pagination = {\n  getInitialState: (): PaginationTableState => {\n    return {\n      pagination: {\n        pageCount: -1,\n        pageIndex: 0,\n        pageSize: 10,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n      autoResetPageIndex: true,\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    return {\n      _notifyPageIndexReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetPageIndex\n        ) {\n          instance.resetPageIndex()\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(\n          safeUpdater,\n          functionalUpdate(safeUpdater, instance.getState().pagination)\n        )\n      },\n      resetPagination: () => {\n        instance.setPagination(\n          instance.initialState.pagination ?? {\n            pageIndex: 0,\n            pageSize: 10,\n            pageCount: -1,\n          }\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            old.pageCount && old.pageCount > 0\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: () => {\n        instance.setPageIndex(0)\n      },\n      resetPageSize: () => {\n        instance.setPageSize(instance.initialState?.pagination?.pageSize ?? 10)\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex, pageSize } = instance.getState().pagination\n\n        const pageCount = instance.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return (\n          pageIndex <\n          Math.ceil(\n            instance.getPrePaginationRowModel().rows.length / pageSize\n          ) -\n            1\n        )\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: memo(\n        () => [\n          instance.getState().pagination,\n          instance.getExpandedRowModel(),\n          instance.options.paginateRowsFn,\n        ],\n        (_pagination, rowModel, paginateRowsFn) => {\n          if (!paginateRowsFn || !rowModel.rows.length) {\n            return rowModel\n          }\n\n          return paginateRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getPaginationRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n        if (pageCount > 0) {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n"],"names":["Pagination","getInitialState","pagination","pageCount","pageIndex","pageSize","getDefaultOptions","instance","onPaginationChange","makeStateUpdater","autoResetPageIndex","getInstance","registered","_notifyPageIndexReset","options","autoResetAll","resetPageIndex","setPagination","updater","safeUpdater","old","newState","functionalUpdate","getState","resetPagination","initialState","setPageIndex","maxPageIndex","Number","MAX_SAFE_INTEGER","Math","min","max","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","memo","pageOptions","Array","fill","map","_","i","key","debug","debugAll","debugTable","getCanPreviousPage","getCanNextPage","getPageCount","ceil","getPrePaginationRowModel","rows","length","previousPage","nextPage","getExpandedRowModel","getPaginationRowModel","paginateRowsFn","_pagination","rowModel"],"mappings":"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"}
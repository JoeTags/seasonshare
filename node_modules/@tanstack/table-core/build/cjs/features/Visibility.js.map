{"version":3,"file":"Visibility.js","sources":["../../../src/features/Visibility.ts"],"sourcesContent":["import {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<TGenerics extends AnyGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  toggleColumnVisibility: (columnId: string, value?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getColumnIsVisible: (columId: string) => boolean\n  getColumnCanHide: (columnId: string) => boolean\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityProps: <\n    TGetter extends Getter<ToggleAllColumnsVisibilityProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleAllColumnsVisibilityProps, TGetter>\n}\n\ntype ToggleVisibilityProps = {}\ntype ToggleAllColumnsVisibilityProps = {}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultCanHide?: boolean\n  defaultIsVisible?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends AnyGenerics> = {\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityProps: <TGetter extends Getter<ToggleVisibilityProps>>(\n    userProps?: TGetter\n  ) => PropGetterValue<ToggleVisibilityProps, TGetter>\n}\n\n//\n\nexport const Visibility = {\n  getInitialState: (): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  getDefaultColumn: () => {\n    return {\n      defaultIsVisible: true,\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      getCanHide: () => instance.getColumnCanHide(column.id),\n      getIsVisible: () => instance.getColumnIsVisible(column.id),\n      toggleVisibility: value =>\n        instance.toggleColumnVisibility(column.id, value),\n      getToggleVisibilityProps: userProps => {\n        const props: ToggleVisibilityProps = {\n          type: 'checkbox',\n          checked: column.getIsVisible?.(),\n          title: 'Toggle Column Visibility',\n          onChange: (e: MouseEvent | TouchEvent) => {\n            column.toggleVisibility?.((e.target as HTMLInputElement).checked)\n          },\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    return {\n      getVisibleFlatColumns: memo(\n        () => [\n          instance.getAllFlatColumns(),\n          instance\n            .getAllFlatColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleFlatColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getVisibleLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance\n            .getAllLeafColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnVisibility)\n        ),\n\n      toggleColumnVisibility: (columnId, value) => {\n        if (!columnId) return\n\n        if (instance.getColumnCanHide(columnId)) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [columnId]: value ?? !instance.getColumnIsVisible(columnId),\n          }))\n        }\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getColumnIsVisible: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnVisibility?.[columnId] ??\n          column.defaultIsVisible ??\n          true\n        )\n      },\n\n      getColumnCanHide: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.options.enableHiding ??\n          column.enableHiding ??\n          column.defaultCanHide ??\n          true\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityProps: userProps => {\n        const props: ToggleAllColumnsVisibilityProps = {\n          onChange: (e: MouseEvent) => {\n            instance.toggleAllColumnsVisible(\n              (e.target as HTMLInputElement)?.checked\n            )\n          },\n          type: 'checkbox',\n          title: 'Toggle visibility for all columns',\n          checked: instance.getIsAllColumnsVisible(),\n          indeterminate:\n            !instance.getIsAllColumnsVisible() &&\n            instance.getIsSomeColumnsVisible()\n              ? 'indeterminate'\n              : undefined,\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n}\n"],"names":["Visibility","getInitialState","columnVisibility","getDefaultOptions","instance","onColumnVisibilityChange","makeStateUpdater","getDefaultColumn","defaultIsVisible","createColumn","column","getCanHide","getColumnCanHide","id","getIsVisible","getColumnIsVisible","toggleVisibility","value","toggleColumnVisibility","getToggleVisibilityProps","userProps","props","type","checked","title","onChange","e","target","propGetter","getInstance","getVisibleFlatColumns","memo","getAllFlatColumns","filter","d","map","join","allFlatColumns","key","debug","options","debugAll","debugColumns","getVisibleLeafColumns","getAllLeafColumns","setColumnVisibility","updater","functionalUpdate","getState","columnId","old","toggleAllColumnsVisible","getIsAllColumnsVisible","reduce","obj","getColumn","Error","enableHiding","defaultCanHide","some","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityProps","indeterminate","undefined"],"mappings":";;;;;;;;;;;;;;;;;AAmEA;IAEaA,UAAU,GAAG;AACxBC,EAAAA,eAAe,EAAE,2BAA4B;AAC3C,WAAO;AACLC,MAAAA,gBAAgB,EAAE;AADb,KAAP;AAGD,GALuB;AAOxBC,EAAAA,iBAAiB,EAAE,2BACjBC,QADiB,EAEY;AAC7B,WAAO;AACLC,MAAAA,wBAAwB,EAAEC,sBAAgB,CAAC,kBAAD,EAAqBF,QAArB;AADrC,KAAP;AAGD,GAbuB;AAexBG,EAAAA,gBAAgB,EAAE,4BAAM;AACtB,WAAO;AACLC,MAAAA,gBAAgB,EAAE;AADb,KAAP;AAGD,GAnBuB;AAqBxBC,EAAAA,YAAY,EAAE,sBACZC,MADY,EAEZN,QAFY,EAGS;AACrB,WAAO;AACLO,MAAAA,UAAU,EAAE;AAAA,eAAMP,QAAQ,CAACQ,gBAAT,CAA0BF,MAAM,CAACG,EAAjC,CAAN;AAAA,OADP;AAELC,MAAAA,YAAY,EAAE;AAAA,eAAMV,QAAQ,CAACW,kBAAT,CAA4BL,MAAM,CAACG,EAAnC,CAAN;AAAA,OAFT;AAGLG,MAAAA,gBAAgB,EAAE,0BAAAC,KAAK;AAAA,eACrBb,QAAQ,CAACc,sBAAT,CAAgCR,MAAM,CAACG,EAAvC,EAA2CI,KAA3C,CADqB;AAAA,OAHlB;AAKLE,MAAAA,wBAAwB,EAAE,kCAAAC,SAAS,EAAI;AACrC,YAAMC,KAA4B,GAAG;AACnCC,UAAAA,IAAI,EAAE,UAD6B;AAEnCC,UAAAA,OAAO,EAAEb,MAAM,CAACI,YAAT,oBAAEJ,MAAM,CAACI,YAAP,EAF0B;AAGnCU,UAAAA,KAAK,EAAE,0BAH4B;AAInCC,UAAAA,QAAQ,EAAE,kBAACC,CAAD,EAAgC;AACxChB,YAAAA,MAAM,CAACM,gBAAP,oBAAAN,MAAM,CAACM,gBAAP,CAA2BU,CAAC,CAACC,MAAH,CAA+BJ,OAAzD;AACD;AANkC,SAArC;AASA,eAAOK,gBAAU,CAACP,KAAD,EAAQD,SAAR,CAAjB;AACD;AAhBI,KAAP;AAkBD,GA3CuB;AA6CxBS,EAAAA,WAAW,EAAE,qBACXzB,QADW,EAEuB;AAClC,WAAO;AACL0B,MAAAA,qBAAqB,EAAEC,UAAI,CACzB;AAAA,eAAM,CACJ3B,QAAQ,CAAC4B,iBAAT,EADI,EAEJ5B,QAAQ,CACL4B,iBADH,GAEGC,MAFH,CAEU,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACpB,YAAN,oBAAIoB,CAAC,CAACpB,YAAF,EAAJ;AAAA,SAFX,EAGGqB,GAHH,CAGO,UAAAD,CAAC;AAAA,iBAAIA,CAAC,CAACrB,EAAN;AAAA,SAHR,EAIGuB,IAJH,CAIQ,GAJR,CAFI,CAAN;AAAA,OADyB,EASzB,UAAAC,cAAc,EAAI;AAChB,eAAOA,cAAc,CAACJ,MAAf,CAAsB,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACpB,YAAN,oBAAIoB,CAAC,CAACpB,YAAF,EAAJ;AAAA,SAAvB,CAAP;AACD,OAXwB,EAYzB;AACEwB,QAAAA,GAAG,EAAE,uBADP;AAEEC,QAAAA,KAAK,EAAE;AAAA;;AAAA,0CACLnC,QAAQ,CAACoC,OAAT,CAAiBC,QADZ,oCACwBrC,QAAQ,CAACoC,OAAT,CAAiBE,YADzC;AAAA;AAFT,OAZyB,CADtB;AAoBLC,MAAAA,qBAAqB,EAAEZ,UAAI,CACzB;AAAA,eAAM,CACJ3B,QAAQ,CAACwC,iBAAT,EADI,EAEJxC,QAAQ,CACLwC,iBADH,GAEGX,MAFH,CAEU,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACpB,YAAN,oBAAIoB,CAAC,CAACpB,YAAF,EAAJ;AAAA,SAFX,EAGGqB,GAHH,CAGO,UAAAD,CAAC;AAAA,iBAAIA,CAAC,CAACrB,EAAN;AAAA,SAHR,EAIGuB,IAJH,CAIQ,GAJR,CAFI,CAAN;AAAA,OADyB,EASzB,UAAAC,cAAc,EAAI;AAChB,eAAOA,cAAc,CAACJ,MAAf,CAAsB,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACpB,YAAN,oBAAIoB,CAAC,CAACpB,YAAF,EAAJ;AAAA,SAAvB,CAAP;AACD,OAXwB,EAYzB;AACEwB,QAAAA,GAAG,EAAE,uBADP;AAEEC,QAAAA,KAAK,EAAE;AAAA;;AAAA,2CACLnC,QAAQ,CAACoC,OAAT,CAAiBC,QADZ,qCACwBrC,QAAQ,CAACoC,OAAT,CAAiBE,YADzC;AAAA;AAFT,OAZyB,CApBtB;AAuCLG,MAAAA,mBAAmB,EAAE,6BAAAC,OAAO;AAAA,eAC1B1C,QAAQ,CAACoC,OAAT,CAAiBnC,wBADS,oBAC1BD,QAAQ,CAACoC,OAAT,CAAiBnC,wBAAjB,CACEyC,OADF,EAEEC,sBAAgB,CAACD,OAAD,EAAU1C,QAAQ,CAAC4C,QAAT,GAAoB9C,gBAA9B,CAFlB,CAD0B;AAAA,OAvCvB;AA6CLgB,MAAAA,sBAAsB,EAAE,gCAAC+B,QAAD,EAAWhC,KAAX,EAAqB;AAC3C,YAAI,CAACgC,QAAL,EAAe;;AAEf,YAAI7C,QAAQ,CAACQ,gBAAT,CAA0BqC,QAA1B,CAAJ,EAAyC;AACvC7C,UAAAA,QAAQ,CAACyC,mBAAT,CAA6B,UAAAK,GAAG;AAAA;;AAAA,4DAC3BA,GAD2B,6BAE7BD,QAF6B,IAElBhC,KAFkB,WAElBA,KAFkB,GAET,CAACb,QAAQ,CAACW,kBAAT,CAA4BkC,QAA5B,CAFQ;AAAA,WAAhC;AAID;AACF,OAtDI;AAwDLE,MAAAA,uBAAuB,EAAE,iCAAAlC,KAAK,EAAI;AAAA;;AAChCA,QAAAA,KAAK,aAAGA,KAAH,qBAAY,CAACb,QAAQ,CAACgD,sBAAT,EAAlB;AAEAhD,QAAAA,QAAQ,CAACyC,mBAAT,CACEzC,QAAQ,CAACwC,iBAAT,GAA6BS,MAA7B,CACE,UAACC,GAAD,EAAM5C,MAAN;AAAA;;AAAA,0DACK4C,GADL,6BAEG5C,MAAM,CAACG,EAFV,IAEe,CAACI,KAAD,GAAS,EAACP,MAAM,CAACC,UAAR,YAACD,MAAM,CAACC,UAAP,EAAD,CAAT,GAAkCM,KAFjD;AAAA,SADF,EAKE,EALF,CADF;AASD,OApEI;AAsELF,MAAAA,kBAAkB,EAAE,4BAAAkC,QAAQ,EAAI;AAAA;;AAC9B,YAAMvC,MAAM,GAAGN,QAAQ,CAACmD,SAAT,CAAmBN,QAAnB,CAAf;;AAEA,YAAI,CAACvC,MAAL,EAAa;AACX,gBAAM,IAAI8C,KAAJ,EAAN;AACD;;AAED,0EACEpD,QAAQ,CAAC4C,QAAT,GAAoB9C,gBADtB,qBACE,uBAAuC+C,QAAvC,CADF,oCAEEvC,MAAM,CAACF,gBAFT,mBAGE,IAHF;AAKD,OAlFI;AAoFLI,MAAAA,gBAAgB,EAAE,0BAAAqC,QAAQ,EAAI;AAAA;;AAC5B,YAAMvC,MAAM,GAAGN,QAAQ,CAACmD,SAAT,CAAmBN,QAAnB,CAAf;;AAEA,YAAI,CAACvC,MAAL,EAAa;AACX,gBAAM,IAAI8C,KAAJ,EAAN;AACD;;AAED,0DACEpD,QAAQ,CAACoC,OAAT,CAAiBiB,YADnB,oCAEE/C,MAAM,CAAC+C,YAFT,oBAGE/C,MAAM,CAACgD,cAHT,oBAIE,IAJF;AAMD,OAjGI;AAmGLN,MAAAA,sBAAsB,EAAE;AAAA,eACtB,CAAChD,QAAQ,CAACwC,iBAAT,GAA6Be,IAA7B,CAAkC,UAAAjD,MAAM;AAAA,iBAAI,EAACA,MAAM,CAACI,YAAR,YAACJ,MAAM,CAACI,YAAP,EAAD,CAAJ;AAAA,SAAxC,CADqB;AAAA,OAnGnB;AAsGL8C,MAAAA,uBAAuB,EAAE;AAAA,eACvBxD,QAAQ,CAACwC,iBAAT,GAA6Be,IAA7B,CAAkC,UAAAjD,MAAM;AAAA,iBAAIA,MAAM,CAACI,YAAX,oBAAIJ,MAAM,CAACI,YAAP,EAAJ;AAAA,SAAxC,CADuB;AAAA,OAtGpB;AAyGL+C,MAAAA,kCAAkC,EAAE,4CAAAzC,SAAS,EAAI;AAC/C,YAAMC,KAAsC,GAAG;AAC7CI,UAAAA,QAAQ,EAAE,kBAACC,CAAD,EAAmB;AAAA;;AAC3BtB,YAAAA,QAAQ,CAAC+C,uBAAT,cACGzB,CAAC,CAACC,MADL,qBACE,UAAgCJ,OADlC;AAGD,WAL4C;AAM7CD,UAAAA,IAAI,EAAE,UANuC;AAO7CE,UAAAA,KAAK,EAAE,mCAPsC;AAQ7CD,UAAAA,OAAO,EAAEnB,QAAQ,CAACgD,sBAAT,EARoC;AAS7CU,UAAAA,aAAa,EACX,CAAC1D,QAAQ,CAACgD,sBAAT,EAAD,IACAhD,QAAQ,CAACwD,uBAAT,EADA,GAEI,eAFJ,GAGIG;AAbuC,SAA/C;AAgBA,eAAOnC,gBAAU,CAACP,KAAD,EAAQD,SAAR,CAAjB;AACD;AA3HI,KAAP;AA6HD;AA7KuB;;;;"}
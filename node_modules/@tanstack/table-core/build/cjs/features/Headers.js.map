{"version":3,"file":"Headers.js","sources":["../../../src/features/Headers.ts"],"sourcesContent":["import {\n  Cell,\n  Column,\n  CoreHeader,\n  FooterGroupProps,\n  FooterProps,\n  Getter,\n  Header,\n  HeaderGroup,\n  HeaderGroupProps,\n  HeaderProps,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n} from '../types'\nimport { propGetter, memo } from '../utils'\nimport { ColumnSizing } from './ColumnSizing'\n\nexport type HeadersRow<TGenerics extends AnyGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type HeadersInstance<TGenerics extends AnyGenerics> = {\n  createHeader: (\n    column: Column<TGenerics>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      depth: number\n    }\n  ) => Header<TGenerics>\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n\n  getHeader: (id: string) => Header<TGenerics>\n\n  getHeaderGroupProps: <TGetter extends Getter<HeaderGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderGroupProps, TGetter>\n  getFooterGroupProps: <TGetter extends Getter<FooterGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterGroupProps, TGetter>\n  getHeaderProps: <TGetter extends Getter<HeaderProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderProps, TGetter>\n  getFooterProps: <TGetter extends Getter<FooterProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterProps, TGetter>\n  getTotalWidth: () => number\n}\n\n//\n\nexport const Headers = {\n  createRow: <TGenerics extends AnyGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): HeadersRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key: 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.columnId))\n        },\n        {\n          key: 'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      createHeader: (\n        column: Column<TGenerics>,\n        options: {\n          id?: string\n          isPlaceholder?: boolean\n          placeholderId?: string\n          depth: number\n        }\n      ) => {\n        const id = options.id ?? column.id\n\n        let header: CoreHeader<TGenerics> = {\n          id,\n          column,\n          isPlaceholder: options.isPlaceholder,\n          placeholderId: options.placeholderId,\n          depth: options.depth,\n          subHeaders: [],\n          colSpan: 0,\n          rowSpan: 0,\n          getWidth: () => {\n            let sum = 0\n\n            const recurse = (header: CoreHeader<TGenerics>) => {\n              if (header.subHeaders.length) {\n                header.subHeaders.forEach(recurse)\n              } else {\n                sum += header.column.getWidth() ?? 0\n              }\n            }\n\n            recurse(header)\n\n            return sum\n          },\n          getLeafHeaders: (): Header<TGenerics>[] => {\n            const leafHeaders: CoreHeader<TGenerics>[] = []\n\n            const recurseHeader = (h: CoreHeader<TGenerics>) => {\n              if (h.subHeaders && h.subHeaders.length) {\n                h.subHeaders.map(recurseHeader)\n              }\n              leafHeaders.push(h)\n            }\n\n            recurseHeader(header)\n\n            return leafHeaders as Header<TGenerics>[]\n          },\n          getHeaderProps: userProps =>\n            instance.getHeaderProps(header.id, userProps)!,\n          getFooterProps: userProps =>\n            instance.getFooterProps(header.id, userProps)!,\n          renderHeader: () =>\n            column.header\n              ? instance.render(column.header, {\n                  instance,\n                  header: header as Header<TGenerics>,\n                  column,\n                })\n              : null,\n          renderFooter: () =>\n            column.footer\n              ? instance.render(column.footer, {\n                  instance,\n                  header: header as Header<TGenerics>,\n                  column,\n                })\n              : null,\n        }\n\n        // Yes, we have to convert instance to unknown, because we know more than the compiler here.\n        return Object.assign(\n          header,\n          ColumnSizing.createHeader(header as Header<TGenerics>, instance)\n        ) as Header<TGenerics>\n      },\n\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns = leafColumns.filter(column =>\n            left?.includes(column.id)\n          )\n          const rightColumns = leafColumns.filter(column =>\n            right?.includes(column.id)\n          )\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key: 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          leafColumns = leafColumns.filter(column => left?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'left')\n        },\n        {\n          key: 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          leafColumns = leafColumns.filter(column => right?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'right')\n        },\n        {\n          key: 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getHeader: (id: string) => {\n        const header = [\n          ...instance.getFlatHeaders(),\n          ...instance.getCenterFlatHeaders(),\n          ...instance.getLeftFlatHeaders(),\n          ...instance.getRightFlatHeaders(),\n        ].find(d => d.id === id)\n\n        if (!header) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Could not find header with id: ${id}`)\n          }\n          throw new Error()\n        }\n\n        return header\n      },\n\n      getHeaderGroupProps: (id, userProps) => {\n        const headerGroup = instance.getHeaderGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        return propGetter(\n          {\n            key: headerGroup.id,\n            role: 'row',\n          },\n          userProps\n        )\n      },\n\n      getFooterGroupProps: (id, userProps) => {\n        const headerGroup = instance.getFooterGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        const initialProps = {\n          key: headerGroup.id,\n          role: 'row',\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getHeaderProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        const initialProps: HeaderProps = {\n          key: header.id,\n          role: 'columnheader',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getFooterProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        const initialProps: FooterProps = {\n          key: header.id,\n          role: 'columnfooter',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getTotalWidth: () => {\n        let width = 0\n\n        instance.getVisibleLeafColumns().forEach(column => {\n          width += column.getWidth() ?? 0\n        })\n\n        return width\n      },\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends AnyGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n      getHeaderGroupProps: getterValue =>\n        instance.getHeaderGroupProps(`${depth}`, getterValue)!,\n      getFooterGroupProps: getterValue =>\n        instance.getFooterGroupProps(`${depth}`, getterValue)!,\n    }\n\n    // The parent columns we're going to scan next\n    const parentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestParentHeader = [...parentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      const header = instance.createHeader(column, {\n        id: [headerFamily, depth, column.id, headerToGroup?.id]\n          .filter(Boolean)\n          .join('_'),\n        isPlaceholder,\n        placeholderId: isPlaceholder\n          ? `${parentHeaders.filter(d => d.column === column).length}`\n          : undefined,\n        depth,\n      })\n\n      if (!latestParentHeader || latestParentHeader.column !== header.column) {\n        header.subHeaders.push(headerToGroup)\n        parentHeaders.push(header)\n      } else {\n        latestParentHeader.subHeaders.push(headerToGroup)\n      }\n\n      // if (!headerToGroup.isPlaceholder) {\n      //   headerToGroup.column.header = headerToGroup;\n      // }\n\n      headerGroup.headers.push(headerToGroup)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(parentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map(column =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (headers: Header<TGenerics>[]) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n"],"names":["Headers","createRow","row","instance","_getAllVisibleCells","memo","getAllCells","filter","cell","column","getIsVisible","map","d","id","join","_","key","debug","options","debugAll","debugRows","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","left","center","right","getState","columnPinning","allCells","leftAndRight","includes","columnId","cells","find","Boolean","getInstance","createHeader","header","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","getWidth","sum","recurse","length","forEach","getLeafHeaders","leafHeaders","recurseHeader","h","push","getHeaderProps","userProps","getFooterProps","renderHeader","render","renderFooter","footer","Object","assign","ColumnSizing","getHeaderGroups","getAllColumns","getVisibleLeafColumns","allColumns","leafColumns","leftColumns","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headerGroup","headers","flat","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","getHeader","process","env","NODE_ENV","console","warn","Error","getHeaderGroupProps","propGetter","role","getFooterGroupProps","initialProps","getTotalWidth","width","columnsToGroup","headerFamily","maxDepth","findMaxDepth","columns","Math","max","createHeaderGroup","headersToGroup","getterValue","parentHeaders","headerToGroup","latestParentHeader","isLeafHeader","parent","undefined","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","min"],"mappings":"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"}
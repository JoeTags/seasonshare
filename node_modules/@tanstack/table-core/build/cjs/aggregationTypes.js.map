{"version":3,"file":"aggregationTypes.js","sources":["../../src/aggregationTypes.ts"],"sourcesContent":["export const aggregationTypes = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationType = keyof typeof aggregationTypes\n\nfunction sum(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return getChildValues().reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let min: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(\n  _getLeafValues: () => unknown[],\n  getChildValues: () => unknown[]\n) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nfunction mean(getLeafValues: () => unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of getLeafValues() as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(getLeafValues: () => unknown[]) {\n  const leafValues = getLeafValues()\n  if (!leafValues.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafValues.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(getLeafValues: () => T[]) {\n  return Array.from(new Set(getLeafValues()).values())\n}\n\nfunction uniqueCount(getLeafValues: () => unknown[]) {\n  return new Set(getLeafValues()).size\n}\n\nfunction count(getLeafValues: () => unknown[]) {\n  return getLeafValues().length\n}\n"],"names":["aggregationTypes","sum","min","max","extent","mean","median","unique","uniqueCount","count","_getLeafValues","getChildValues","reduce","next","value","undefined","getLeafValues","leafValues","length","forEach","Math","Array","from","Set","values","size"],"mappings":"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"}
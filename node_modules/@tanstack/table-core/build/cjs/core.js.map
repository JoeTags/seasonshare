{"version":3,"file":"core.js","sources":["../../src/core.tsx"],"sourcesContent":["import {\n  flattenBy,\n  functionalUpdate,\n  propGetter,\n  memo,\n  RequiredKeys,\n} from './utils'\n\nimport {\n  Updater,\n  PropGetterValue,\n  Options,\n  TableState,\n  ColumnDef,\n  Row,\n  Column,\n  Cell,\n  Header,\n  AccessorFn,\n  HeaderRenderProps,\n  TableProps,\n  TableBodyProps,\n  PropGetter,\n  Getter,\n  RowProps,\n  CellProps,\n  TableInstance,\n  RowValues,\n  PartialGenerics,\n  CoreCell,\n  Renderable,\n  UseRenderer,\n  RowModel,\n  TableFeature,\n  AnyGenerics,\n} from './types'\n\nimport { ColumnSizing } from './features/ColumnSizing'\nimport { Expanding } from './features/Expanding'\nimport { Filters } from './features/Filters'\nimport { Grouping } from './features/Grouping'\nimport { Ordering } from './features/Ordering'\nimport { Pagination } from './features/Pagination'\nimport { Pinning } from './features/Pinning'\nimport { RowSelection } from './features/RowSelection'\nimport { Sorting } from './features/Sorting'\nimport { Visibility } from './features/Visibility'\nimport { Headers } from './features/Headers'\n\nconst features: TableFeature[] = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n]\n\nexport type CoreOptions<TGenerics extends AnyGenerics> = {\n  data: TGenerics['Row'][]\n  columns: ColumnDef<TGenerics>[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  render: TGenerics['Render']\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n  initialState?: Partial<TableState>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  autoResetAll?: boolean\n}\n\nexport type TableCore<TGenerics extends AnyGenerics> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<Options<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<Options<TGenerics>>) => void\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n  getTotalWidth: () => number\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    value: any\n  ) => Cell<TGenerics>\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    values: Record<string, any>\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n  getTableProps: PropGetter<TableProps>\n  getTableBodyProps: PropGetter<TableBodyProps>\n  getRowProps: <TGetter extends Getter<RowProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<RowProps, TGetter>\n  getCellProps: <TGetter extends Getter<CellProps>>(\n    rowId: string,\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<CellProps, TGetter>\n  getTableWidth: () => number\n  getLeftTableWidth: () => number\n  getCenterTableWidth: () => number\n  getRightTableWidth: () => number\n  render: <TProps>(\n    template: Renderable<TGenerics, TProps>,\n    props: TProps\n  ) => string | null | ReturnType<UseRenderer<TGenerics>>\n}\n\nexport type CoreRow<TGenerics extends AnyGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  values: RowValues\n  subRows: Row<TGenerics>[]\n  getLeafRows: () => Row<TGenerics>[]\n  getRowProps: PropGetter<RowProps>\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CoreColumnDef<TGenerics extends AnyGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columns?: ColumnDef<TGenerics>[]\n  header?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  footer?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  cell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      value: TGenerics['Value']\n    }\n  >\n  meta?: TGenerics['ColumnMeta']\n}\n// & GeneratedProperties<true>\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\nexport type CoreColumn<TGenerics extends AnyGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  columnDefType: CoreColumnDefType\n  getWidth: () => number\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport function createTableInstance<TGenerics extends AnyGenerics>(\n  options: Options<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let instance = {} as TableInstance<TGenerics>\n\n  const defaultOptions = features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(instance))\n  }, {})\n\n  const buildOptions = (options: Options<TGenerics>) => ({\n    ...defaultOptions,\n    ...options,\n  })\n\n  instance.options = buildOptions(options)\n\n  const initialState = {\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, feature.getInitialState?.())\n    }, {}),\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  const finalInstance: TableInstance<TGenerics> = {\n    ...instance,\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, feature.getInstance?.(instance))\n    }, {}),\n    initialState,\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      instance.options = buildOptions(\n        functionalUpdate(updater, instance.options)\n      )\n    },\n    render: (template, props) => {\n      if (typeof instance.options.render === 'function') {\n        return instance.options.render(template, props)\n      }\n\n      if (typeof template === 'function') {\n        return (template as Function)(props)\n      }\n\n      return template\n    },\n\n    getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) =>\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    getDefaultColumn: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n        return {\n          header: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          footer: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          cell: ({ value = '' }: { value: any }): JSX.Element =>\n            typeof value === 'boolean' ? value.toString() : value,\n          ...features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumn?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TGenerics>>\n      },\n      {\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n        key: 'getDefaultColumn',\n      }\n    ),\n\n    getColumnDefs: () => instance.options.columns,\n\n    createColumn: (\n      columnDef: ColumnDef<TGenerics> & { columnDefType?: CoreColumnDefType },\n      depth: number,\n      parent\n    ) => {\n      const defaultColumn = instance.getDefaultColumn()\n\n      let id =\n        columnDef.id ??\n        columnDef.accessorKey ??\n        (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n      let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n      if (columnDef.accessorFn) {\n        accessorFn = columnDef.accessorFn\n      } else if (columnDef.accessorKey) {\n        accessorFn = (originalRow?: TGenerics['Row']) =>\n          (originalRow as any)[columnDef.accessorKey]\n      }\n\n      if (!id) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            columnDef.accessorFn\n              ? `Columns require an id when using an accessorFn`\n              : `Columns require an id when using a non-string header`\n          )\n        }\n        throw new Error()\n      }\n\n      let column: CoreColumn<TGenerics> = {\n        ...defaultColumn,\n        ...columnDef,\n        id: `${id}`,\n        accessorFn,\n        parent: parent as any,\n        depth,\n        columnDef,\n        columnDefType: columnDef.columnDefType as CoreColumnDefType,\n        columns: [],\n        getWidth: () => instance.getColumnWidth(column.id),\n        getFlatColumns: memo(\n          () => [true],\n          () => {\n            return [\n              column as Column<TGenerics>,\n              ...column.columns?.flatMap(d => d.getFlatColumns()),\n            ]\n          },\n          {\n            key: 'column.getFlatColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n        getLeafColumns: memo(\n          () => [instance.getOrderColumnsFn()],\n          orderColumns => {\n            if (column.columns?.length) {\n              let leafColumns = column.columns.flatMap(column =>\n                column.getLeafColumns()\n              )\n\n              return orderColumns(leafColumns)\n            }\n\n            return [column as Column<TGenerics>]\n          },\n          {\n            key: 'column.getLeafColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n      }\n\n      column = features.reduce((obj, feature) => {\n        return Object.assign(obj, feature.createColumn?.(column, instance))\n      }, column)\n\n      // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n      return column as Column<TGenerics>\n    },\n\n    getAllColumns: memo(\n      () => [instance.getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TGenerics>[],\n          parent?: Column<TGenerics>,\n          depth = 0\n        ): Column<TGenerics>[] => {\n          return columnDefs.map(columnDef => {\n            const column = instance.createColumn(columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: 'getAllColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: 'getAllFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TGenerics>>)\n      },\n      {\n        key: 'getAllFlatColumnsById',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance.getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: 'getAllLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = instance.getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n\n    createCell: (row, column, value) => {\n      const cell: CoreCell<TGenerics> = {\n        id: `${row.id}_${column.id}`,\n        rowId: row.id,\n        columnId: column.id,\n        row,\n        column,\n        value,\n        getCellProps: userProps =>\n          instance.getCellProps(row.id, column.id, userProps)!,\n        renderCell: () =>\n          column.cell\n            ? instance.render(column.cell, {\n                instance,\n                column,\n                row,\n                cell: cell as Cell<TGenerics>,\n                value,\n              })\n            : null,\n      }\n\n      features.forEach(feature => {\n        Object.assign(\n          cell,\n          feature.createCell?.(\n            cell as Cell<TGenerics>,\n            column,\n            row as Row<TGenerics>,\n            instance\n          )\n        )\n      }, {})\n\n      return cell as Cell<TGenerics>\n    },\n\n    createRow: (id, original, rowIndex, depth, values) => {\n      let row: CoreRow<TGenerics> = {\n        id,\n        index: rowIndex,\n        original,\n        depth,\n        values,\n        subRows: [],\n        getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n        getRowProps: userProps => instance.getRowProps(row.id, userProps)!,\n        getAllCells: undefined!,\n        getAllCellsByColumnId: undefined!,\n      }\n\n      row.getAllCells = memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(\n              row as Row<TGenerics>,\n              column,\n              row.values[column.id]\n            )\n          })\n        },\n        {\n          key: process.env.NODE_ENV !== 'production' ? 'row.getAllCells' : '',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      row.getAllCellsByColumnId = memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key: 'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      for (let i = 0; i < features.length; i++) {\n        const feature = features[i]\n        Object.assign(row, feature.createRow?.(row, instance))\n      }\n\n      return row as Row<TGenerics>\n    },\n\n    getCoreRowModel: memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        // Access the row model using initial columns\n        const rows: Row<TGenerics>[] = []\n        const flatRows: Row<TGenerics>[] = []\n        const rowsById: Record<string, Row<TGenerics>> = {}\n\n        const leafColumns = instance.getAllLeafColumns()\n\n        const accessRow = (\n          originalRow: TGenerics['Row'],\n          rowIndex: number,\n          depth = 0,\n          parentRows: Row<TGenerics>[],\n          parent?: Row<TGenerics>\n        ) => {\n          const id = instance.getRowId(originalRow, rowIndex, parent)\n\n          if (!id) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`getRowId expected an ID, but got ${id}`)\n            }\n          }\n\n          const values: Record<string, any> = {}\n\n          for (let i = 0; i < leafColumns.length; i++) {\n            const column = leafColumns[i]\n            if (column && column.accessorFn) {\n              values[column.id] = column.accessorFn(originalRow, rowIndex)\n            }\n          }\n\n          // Make the row\n          const row = instance.createRow(\n            id,\n            originalRow,\n            rowIndex,\n            depth,\n            values\n          )\n\n          // Push instance row into the parentRows array\n          parentRows.push(row)\n          // Keep track of every row in a flat array\n          flatRows.push(row)\n          // Also keep track of every row by its ID\n          rowsById[id] = row\n\n          // Get the original subrows\n          if (instance.options.getSubRows) {\n            const originalSubRows = instance.options.getSubRows(\n              originalRow,\n              rowIndex\n            )\n\n            // Then recursively access them\n            if (originalSubRows?.length) {\n              row.originalSubRows = originalSubRows\n              const subRows: Row<TGenerics>[] = []\n\n              for (let i = 0; i < row.originalSubRows.length; i++) {\n                accessRow(\n                  row.originalSubRows[i] as TGenerics['Row'],\n                  i,\n                  depth + 1,\n                  subRows,\n                  row\n                )\n              }\n              row.subRows = subRows\n            }\n          }\n        }\n\n        for (let i = 0; i < data.length; i++) {\n          accessRow(data[i] as TGenerics['Row'], i, 0, rows)\n        }\n\n        return { rows, flatRows, rowsById }\n      },\n      {\n        key: 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._notifyFiltersReset()\n          instance._notifyRowSelectionReset()\n        },\n      }\n    ),\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getPaginationRowModel()\n    },\n\n    getRow: (id: string) => {\n      const row = instance.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n\n    getCell: (rowId: string, columnId: string) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`[Table] could not find row with id ${rowId}`)\n        }\n        throw new Error()\n      }\n\n      const cell = row.getAllCellsByColumnId()[columnId]\n\n      if (!cell) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `[Table] could not find cell ${columnId} in row ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return cell\n    },\n\n    getTableProps: userProps => {\n      return propGetter(\n        {\n          role: 'table',\n        },\n        userProps\n      )\n    },\n\n    getTableBodyProps: userProps => {\n      return propGetter(\n        {\n          role: 'rowgroup',\n        },\n        userProps\n      )\n    },\n\n    getRowProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n      if (!row) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: row.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getCellProps: (rowId, columnId, userProps) => {\n      const cell = instance.getCell(rowId, columnId)\n\n      if (!cell) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: cell.id,\n          role: 'gridcell',\n        },\n        userProps\n      )\n    },\n\n    getTableWidth: () =>\n      instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getLeftTableWidth: () =>\n      instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getCenterTableWidth: () =>\n      instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getRightTableWidth: () =>\n      instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n  }\n\n  instance = Object.assign(instance, finalInstance)\n\n  return instance\n}\n"],"names":["features","Headers","Visibility","Ordering","Pinning","Filters","Sorting","Grouping","Expanding","Pagination","RowSelection","ColumnSizing","createTableInstance","options","debugAll","debugTable","console","info","instance","defaultOptions","reduce","obj","feature","Object","assign","getDefaultOptions","buildOptions","initialState","getInitialState","finalInstance","getInstance","reset","setState","setOptions","updater","functionalUpdate","render","template","props","getRowId","_","index","parent","id","join","getState","state","onStateChange","getDefaultColumn","memo","defaultColumn","header","column","footer","cell","value","toString","debug","debugColumns","key","getColumnDefs","columns","createColumn","columnDef","depth","accessorKey","undefined","accessorFn","originalRow","process","env","NODE_ENV","Error","columnDefType","getWidth","getColumnWidth","getFlatColumns","flatMap","d","getLeafColumns","getOrderColumnsFn","orderColumns","length","leafColumns","getAllColumns","columnDefs","recurseColumns","map","getAllFlatColumns","allColumns","getAllFlatColumnsById","flatColumns","acc","getAllLeafColumns","getColumn","columnId","warn","createCell","row","rowId","getCellProps","userProps","renderCell","forEach","createRow","original","rowIndex","values","subRows","getLeafRows","flattenBy","getRowProps","getAllCells","getAllCellsByColumnId","debugRows","allCells","i","getCoreRowModel","data","rows","flatRows","rowsById","accessRow","parentRows","push","getSubRows","originalSubRows","onChange","_notifyFiltersReset","_notifyRowSelectionReset","getRowModel","getPaginationRowModel","getRow","getCell","getTableProps","propGetter","role","getTableBodyProps","getTableWidth","getHeaderGroups","headers","sum","getLeftTableWidth","getLeftHeaderGroups","getCenterTableWidth","getCenterHeaderGroups","getRightTableWidth","getRightHeaderGroups"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,IAAMA,QAAwB,GAAG,CAC/BC,eAD+B,EAE/BC,qBAF+B,EAG/BC,iBAH+B,EAI/BC,eAJ+B,EAK/BC,eAL+B,EAM/BC,eAN+B,EAO/BC,iBAP+B,EAQ/BC,mBAR+B,EAS/BC,qBAT+B,EAU/BC,yBAV+B,EAW/BC,yBAX+B,CAAjC;AAqKO,SAASC,mBAAT,CACLC,OADK,EAEqB;AAAA;;AAC1B,MAAIA,OAAO,CAACC,QAAR,IAAoBD,OAAO,CAACE,UAAhC,EAA4C;AAC1CC,IAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb;AACD;;AAED,MAAIC,QAAQ,GAAG,EAAf;AAEA,MAAMC,cAAc,GAAGnB,QAAQ,CAACoB,MAAT,CAAgB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACvD,WAAOC,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,OAAO,CAACG,iBAA3B,oBAAmBH,OAAO,CAACG,iBAAR,CAA4BP,QAA5B,CAAnB,CAAP;AACD,GAFsB,EAEpB,EAFoB,CAAvB;;AAIA,MAAMQ,YAAY,GAAG,SAAfA,YAAe,CAACb,OAAD;AAAA,oDAChBM,cADgB,EAEhBN,OAFgB;AAAA,GAArB;;AAKAK,EAAAA,QAAQ,CAACL,OAAT,GAAmBa,YAAY,CAACb,OAAD,CAA/B;;AAEA,MAAMc,YAAY,4CACb3B,QAAQ,CAACoB,MAAT,CAAgB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACnC,WAAOC,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,OAAO,CAACM,eAA3B,oBAAmBN,OAAO,CAACM,eAAR,EAAnB,CAAP;AACD,GAFE,EAEA,EAFA,CADa,2BAIZf,OAAO,CAACc,YAJI,oCAIY,EAJZ,CAAlB;;AAOA,MAAME,aAAuC,4CACxCX,QADwC,EAExClB,QAAQ,CAACoB,MAAT,CAAgB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACnC,WAAOC,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,OAAO,CAACQ,WAA3B,oBAAmBR,OAAO,CAACQ,WAAR,CAAsBZ,QAAtB,CAAnB,CAAP;AACD,GAFE,EAEA,EAFA,CAFwC;AAK3CS,IAAAA,YAAY,EAAZA,YAL2C;AAM3CI,IAAAA,KAAK,EAAE,iBAAM;AACXb,MAAAA,QAAQ,CAACc,QAAT,CAAkBd,QAAQ,CAACS,YAA3B;AACD,KAR0C;AAS3CM,IAAAA,UAAU,EAAE,oBAAAC,OAAO,EAAI;AACrBhB,MAAAA,QAAQ,CAACL,OAAT,GAAmBa,YAAY,CAC7BS,sBAAgB,CAACD,OAAD,EAAUhB,QAAQ,CAACL,OAAnB,CADa,CAA/B;AAGD,KAb0C;AAc3CuB,IAAAA,MAAM,EAAE,gBAACC,QAAD,EAAWC,KAAX,EAAqB;AAC3B,UAAI,OAAOpB,QAAQ,CAACL,OAAT,CAAiBuB,MAAxB,KAAmC,UAAvC,EAAmD;AACjD,eAAOlB,QAAQ,CAACL,OAAT,CAAiBuB,MAAjB,CAAwBC,QAAxB,EAAkCC,KAAlC,CAAP;AACD;;AAED,UAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,eAAQA,QAAD,CAAuBC,KAAvB,CAAP;AACD;;AAED,aAAOD,QAAP;AACD,KAxB0C;AA0B3CE,IAAAA,QAAQ,EAAE,kBAACC,CAAD,EAAsBC,KAAtB,EAAqCC,MAArC;AAAA,mBACLA,MAAM,GAAG,CAACA,MAAM,CAACC,EAAR,EAAYF,KAAZ,EAAmBG,IAAnB,CAAwB,GAAxB,CAAH,GAAkCH,KADnC;AAAA,KA1BiC;AA6B3CI,IAAAA,QAAQ,EAAE,oBAAM;AACd,aAAO3B,QAAQ,CAACL,OAAT,CAAiBiC,KAAxB;AACD,KA/B0C;AAiC3Cd,IAAAA,QAAQ,EAAE,kBAACE,OAAD,EAAkC;AAC1ChB,MAAAA,QAAQ,CAACL,OAAT,CAAiBkC,aAAjB,oBAAA7B,QAAQ,CAACL,OAAT,CAAiBkC,aAAjB,CAAiCb,OAAjC;AACD,KAnC0C;AAqC3Cc,IAAAA,gBAAgB,EAAEC,UAAI,CACpB;AAAA,aAAM,CAAC/B,QAAQ,CAACL,OAAT,CAAiBqC,aAAlB,CAAN;AAAA,KADoB,EAEpB,UAAAA,aAAa,EAAI;AAAA;;AACfA,MAAAA,aAAa,qBAAIA,aAAJ,6BAAqB,EAAlC;AAEA;AACEC,QAAAA,MAAM,EAAE,gBAACb,KAAD;AAAA,iBACNA,KAAK,CAACa,MAAN,CAAaC,MAAb,CAAoBT,EADd;AAAA,SADV;AAGEU,QAAAA,MAAM,EAAE,gBAACf,KAAD;AAAA,iBACNA,KAAK,CAACa,MAAN,CAAaC,MAAb,CAAoBT,EADd;AAAA,SAHV;AAKEW,QAAAA,IAAI,EAAE;AAAA,gCAAGC,KAAH;AAAA,cAAGA,KAAH,2BAAW,EAAX;AAAA,iBACJ,OAAOA,KAAP,KAAiB,SAAjB,GAA6BA,KAAK,CAACC,QAAN,EAA7B,GAAgDD,KAD5C;AAAA;AALR,SAOKvD,QAAQ,CAACoB,MAAT,CAAgB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACnC,eAAOC,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,OAAO,CAAC0B,gBAA3B,oBAAmB1B,OAAO,CAAC0B,gBAAR,EAAnB,CAAP;AACD,OAFE,EAEA,EAFA,CAPL,EAUKE,aAVL;AAYD,KAjBmB,EAkBpB;AACEO,MAAAA,KAAK,EAAE;AAAA;;AAAA,wCAAMvC,QAAQ,CAACL,OAAT,CAAiBC,QAAvB,oCAAmCI,QAAQ,CAACL,OAAT,CAAiB6C,YAApD;AAAA,OADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KAlBoB,CArCqB;AA6D3CC,IAAAA,aAAa,EAAE;AAAA,aAAM1C,QAAQ,CAACL,OAAT,CAAiBgD,OAAvB;AAAA,KA7D4B;AA+D3CC,IAAAA,YAAY,EAAE,sBACZC,SADY,EAEZC,KAFY,EAGZtB,MAHY,EAIT;AAAA;;AACH,UAAMQ,aAAa,GAAGhC,QAAQ,CAAC8B,gBAAT,EAAtB;AAEA,UAAIL,EAAE,6BACJoB,SAAS,CAACpB,EADN,4BAEJoB,SAAS,CAACE,WAFN,oBAGH,OAAOF,SAAS,CAACZ,MAAjB,KAA4B,QAA5B,GAAuCY,SAAS,CAACZ,MAAjD,GAA0De,SAH7D;AAKA,UAAIC,UAAJ;;AAEA,UAAIJ,SAAS,CAACI,UAAd,EAA0B;AACxBA,QAAAA,UAAU,GAAGJ,SAAS,CAACI,UAAvB;AACD,OAFD,MAEO,IAAIJ,SAAS,CAACE,WAAd,EAA2B;AAChCE,QAAAA,UAAU,GAAG,oBAACC,WAAD;AAAA,iBACVA,WAAD,CAAqBL,SAAS,CAACE,WAA/B,CADW;AAAA,SAAb;AAED;;AAED,UAAI,CAACtB,EAAL,EAAS;AACP,YAAI0B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,gBAAM,IAAIC,KAAJ,CACJT,SAAS,CAACI,UAAV,4GADI,CAAN;AAKD;;AACD,cAAM,IAAIK,KAAJ,EAAN;AACD;;AAED,UAAIpB,MAA6B,4CAC5BF,aAD4B,EAE5Ba,SAF4B;AAG/BpB,QAAAA,EAAE,OAAKA,EAHwB;AAI/BwB,QAAAA,UAAU,EAAVA,UAJ+B;AAK/BzB,QAAAA,MAAM,EAAEA,MALuB;AAM/BsB,QAAAA,KAAK,EAALA,KAN+B;AAO/BD,QAAAA,SAAS,EAATA,SAP+B;AAQ/BU,QAAAA,aAAa,EAAEV,SAAS,CAACU,aARM;AAS/BZ,QAAAA,OAAO,EAAE,EATsB;AAU/Ba,QAAAA,QAAQ,EAAE;AAAA,iBAAMxD,QAAQ,CAACyD,cAAT,CAAwBvB,MAAM,CAACT,EAA/B,CAAN;AAAA,SAVqB;AAW/BiC,QAAAA,cAAc,EAAE3B,UAAI,CAClB;AAAA,iBAAM,CAAC,IAAD,CAAN;AAAA,SADkB,EAElB,YAAM;AAAA;;AACJ,kBACEG,MADF,4BAEKA,MAAM,CAACS,OAFZ,qBAEK,gBAAgBgB,OAAhB,CAAwB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACF,cAAF,EAAJ;AAAA,WAAzB,CAFL;AAID,SAPiB,EAQlB;AACEjB,UAAAA,GAAG,EAAE,uBADP;AAEEF,UAAAA,KAAK,EAAE;AAAA;;AAAA,6CACLvC,QAAQ,CAACL,OAAT,CAAiBC,QADZ,qCACwBI,QAAQ,CAACL,OAAT,CAAiB6C,YADzC;AAAA;AAFT,SARkB,CAXW;AAyB/BqB,QAAAA,cAAc,EAAE9B,UAAI,CAClB;AAAA,iBAAM,CAAC/B,QAAQ,CAAC8D,iBAAT,EAAD,CAAN;AAAA,SADkB,EAElB,UAAAC,YAAY,EAAI;AAAA;;AACd,kCAAI7B,MAAM,CAACS,OAAX,aAAI,iBAAgBqB,MAApB,EAA4B;AAC1B,gBAAIC,WAAW,GAAG/B,MAAM,CAACS,OAAP,CAAegB,OAAf,CAAuB,UAAAzB,MAAM;AAAA,qBAC7CA,MAAM,CAAC2B,cAAP,EAD6C;AAAA,aAA7B,CAAlB;AAIA,mBAAOE,YAAY,CAACE,WAAD,CAAnB;AACD;;AAED,iBAAO,CAAC/B,MAAD,CAAP;AACD,SAZiB,EAalB;AACEO,UAAAA,GAAG,EAAE,uBADP;AAEEF,UAAAA,KAAK,EAAE;AAAA;;AAAA,6CACLvC,QAAQ,CAACL,OAAT,CAAiBC,QADZ,qCACwBI,QAAQ,CAACL,OAAT,CAAiB6C,YADzC;AAAA;AAFT,SAbkB;AAzBW,QAAjC;;AA8CAN,MAAAA,MAAM,GAAGpD,QAAQ,CAACoB,MAAT,CAAgB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACzC,eAAOC,MAAM,CAACC,MAAP,CAAcH,GAAd,EAAmBC,OAAO,CAACwC,YAA3B,oBAAmBxC,OAAO,CAACwC,YAAR,CAAuBV,MAAvB,EAA+BlC,QAA/B,CAAnB,CAAP;AACD,OAFQ,EAENkC,MAFM,CAAT,CA1EG;;AA+EH,aAAOA,MAAP;AACD,KAnJ0C;AAqJ3CgC,IAAAA,aAAa,EAAEnC,UAAI,CACjB;AAAA,aAAM,CAAC/B,QAAQ,CAAC0C,aAAT,EAAD,CAAN;AAAA,KADiB,EAEjB,UAAAyB,UAAU,EAAI;AACZ,UAAMC,cAAc,GAAG,SAAjBA,cAAiB,CACrBD,UADqB,EAErB3C,MAFqB,EAGrBsB,KAHqB,EAIG;AAAA,YADxBA,KACwB;AADxBA,UAAAA,KACwB,GADhB,CACgB;AAAA;;AACxB,eAAOqB,UAAU,CAACE,GAAX,CAAe,UAAAxB,SAAS,EAAI;AACjC,cAAMX,MAAM,GAAGlC,QAAQ,CAAC4C,YAAT,CAAsBC,SAAtB,EAAiCC,KAAjC,EAAwCtB,MAAxC,CAAf;AAEAU,UAAAA,MAAM,CAACS,OAAP,GAAiBE,SAAS,CAACF,OAAV,GACbyB,cAAc,CAACvB,SAAS,CAACF,OAAX,EAAoBT,MAApB,EAA4BY,KAAK,GAAG,CAApC,CADD,GAEb,EAFJ;AAIA,iBAAOZ,MAAP;AACD,SARM,CAAP;AASD,OAdD;;AAgBA,aAAOkC,cAAc,CAACD,UAAD,CAArB;AACD,KApBgB,EAqBjB;AACE1B,MAAAA,GAAG,EAAE,eADP;AAEEF,MAAAA,KAAK,EAAE;AAAA;;AAAA,yCAAMvC,QAAQ,CAACL,OAAT,CAAiBC,QAAvB,qCAAmCI,QAAQ,CAACL,OAAT,CAAiB6C,YAApD;AAAA;AAFT,KArBiB,CArJwB;AAgL3C8B,IAAAA,iBAAiB,EAAEvC,UAAI,CACrB;AAAA,aAAM,CAAC/B,QAAQ,CAACkE,aAAT,EAAD,CAAN;AAAA,KADqB,EAErB,UAAAK,UAAU,EAAI;AACZ,aAAOA,UAAU,CAACZ,OAAX,CAAmB,UAAAzB,MAAM,EAAI;AAClC,eAAOA,MAAM,CAACwB,cAAP,EAAP;AACD,OAFM,CAAP;AAGD,KANoB,EAOrB;AACEjB,MAAAA,GAAG,EAAE,mBADP;AAEEF,MAAAA,KAAK,EAAE;AAAA;;AAAA,yCAAMvC,QAAQ,CAACL,OAAT,CAAiBC,QAAvB,qCAAmCI,QAAQ,CAACL,OAAT,CAAiB6C,YAApD;AAAA;AAFT,KAPqB,CAhLoB;AA6L3CgC,IAAAA,qBAAqB,EAAEzC,UAAI,CACzB;AAAA,aAAM,CAAC/B,QAAQ,CAACsE,iBAAT,EAAD,CAAN;AAAA,KADyB,EAEzB,UAAAG,WAAW,EAAI;AACb,aAAOA,WAAW,CAACvE,MAAZ,CAAmB,UAACwE,GAAD,EAAMxC,MAAN,EAAiB;AACzCwC,QAAAA,GAAG,CAACxC,MAAM,CAACT,EAAR,CAAH,GAAiBS,MAAjB;AACA,eAAOwC,GAAP;AACD,OAHM,EAGJ,EAHI,CAAP;AAID,KAPwB,EAQzB;AACEjC,MAAAA,GAAG,EAAE,uBADP;AAEEF,MAAAA,KAAK,EAAE;AAAA;;AAAA,yCAAMvC,QAAQ,CAACL,OAAT,CAAiBC,QAAvB,qCAAmCI,QAAQ,CAACL,OAAT,CAAiB6C,YAApD;AAAA;AAFT,KARyB,CA7LgB;AA2M3CmC,IAAAA,iBAAiB,EAAE5C,UAAI,CACrB;AAAA,aAAM,CAAC/B,QAAQ,CAACkE,aAAT,EAAD,EAA2BlE,QAAQ,CAAC8D,iBAAT,EAA3B,CAAN;AAAA,KADqB,EAErB,UAACS,UAAD,EAAaR,YAAb,EAA8B;AAC5B,UAAIE,WAAW,GAAGM,UAAU,CAACZ,OAAX,CAAmB,UAAAzB,MAAM;AAAA,eAAIA,MAAM,CAAC2B,cAAP,EAAJ;AAAA,OAAzB,CAAlB;AACA,aAAOE,YAAY,CAACE,WAAD,CAAnB;AACD,KALoB,EAMrB;AACExB,MAAAA,GAAG,EAAE,mBADP;AAEEF,MAAAA,KAAK,EAAE;AAAA;;AAAA,yCAAMvC,QAAQ,CAACL,OAAT,CAAiBC,QAAvB,qCAAmCI,QAAQ,CAACL,OAAT,CAAiB6C,YAApD;AAAA;AAFT,KANqB,CA3MoB;AAuN3CoC,IAAAA,SAAS,EAAE,mBAAAC,QAAQ,EAAI;AACrB,UAAM3C,MAAM,GAAGlC,QAAQ,CAACwE,qBAAT,GAAiCK,QAAjC,CAAf;;AAEA,UAAI,CAAC3C,MAAL,EAAa;AACX,YAAIiB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCvD,UAAAA,OAAO,CAACgF,IAAR,6BAAuCD,QAAvC;AACD;;AACD,cAAM,IAAIvB,KAAJ,EAAN;AACD;;AAED,aAAOpB,MAAP;AACD,KAlO0C;AAoO3C6C,IAAAA,UAAU,EAAE,oBAACC,GAAD,EAAM9C,MAAN,EAAcG,KAAd,EAAwB;AAClC,UAAMD,IAAyB,GAAG;AAChCX,QAAAA,EAAE,EAAKuD,GAAG,CAACvD,EAAT,SAAeS,MAAM,CAACT,EADQ;AAEhCwD,QAAAA,KAAK,EAAED,GAAG,CAACvD,EAFqB;AAGhCoD,QAAAA,QAAQ,EAAE3C,MAAM,CAACT,EAHe;AAIhCuD,QAAAA,GAAG,EAAHA,GAJgC;AAKhC9C,QAAAA,MAAM,EAANA,MALgC;AAMhCG,QAAAA,KAAK,EAALA,KANgC;AAOhC6C,QAAAA,YAAY,EAAE,sBAAAC,SAAS;AAAA,iBACrBnF,QAAQ,CAACkF,YAAT,CAAsBF,GAAG,CAACvD,EAA1B,EAA8BS,MAAM,CAACT,EAArC,EAAyC0D,SAAzC,CADqB;AAAA,SAPS;AAShCC,QAAAA,UAAU,EAAE;AAAA,iBACVlD,MAAM,CAACE,IAAP,GACIpC,QAAQ,CAACkB,MAAT,CAAgBgB,MAAM,CAACE,IAAvB,EAA6B;AAC3BpC,YAAAA,QAAQ,EAARA,QAD2B;AAE3BkC,YAAAA,MAAM,EAANA,MAF2B;AAG3B8C,YAAAA,GAAG,EAAHA,GAH2B;AAI3B5C,YAAAA,IAAI,EAAEA,IAJqB;AAK3BC,YAAAA,KAAK,EAALA;AAL2B,WAA7B,CADJ,GAQI,IATM;AAAA;AAToB,OAAlC;AAqBAvD,MAAAA,QAAQ,CAACuG,OAAT,CAAiB,UAAAjF,OAAO,EAAI;AAC1BC,QAAAA,MAAM,CAACC,MAAP,CACE8B,IADF,EAEEhC,OAAO,CAAC2E,UAFV,oBAEE3E,OAAO,CAAC2E,UAAR,CACE3C,IADF,EAEEF,MAFF,EAGE8C,GAHF,EAIEhF,QAJF,CAFF;AASD,OAVD,EAUG,EAVH;AAYA,aAAOoC,IAAP;AACD,KAvQ0C;AAyQ3CkD,IAAAA,SAAS,EAAE,mBAAC7D,EAAD,EAAK8D,QAAL,EAAeC,QAAf,EAAyB1C,KAAzB,EAAgC2C,MAAhC,EAA2C;AACpD,UAAIT,GAAuB,GAAG;AAC5BvD,QAAAA,EAAE,EAAFA,EAD4B;AAE5BF,QAAAA,KAAK,EAAEiE,QAFqB;AAG5BD,QAAAA,QAAQ,EAARA,QAH4B;AAI5BzC,QAAAA,KAAK,EAALA,KAJ4B;AAK5B2C,QAAAA,MAAM,EAANA,MAL4B;AAM5BC,QAAAA,OAAO,EAAE,EANmB;AAO5BC,QAAAA,WAAW,EAAE;AAAA,iBAAMC,eAAS,CAACZ,GAAG,CAACU,OAAL,EAAc,UAAA9B,CAAC;AAAA,mBAAIA,CAAC,CAAC8B,OAAN;AAAA,WAAf,CAAf;AAAA,SAPe;AAQ5BG,QAAAA,WAAW,EAAE,qBAAAV,SAAS;AAAA,iBAAInF,QAAQ,CAAC6F,WAAT,CAAqBb,GAAG,CAACvD,EAAzB,EAA6B0D,SAA7B,CAAJ;AAAA,SARM;AAS5BW,QAAAA,WAAW,EAAE9C,SATe;AAU5B+C,QAAAA,qBAAqB,EAAE/C;AAVK,OAA9B;AAaAgC,MAAAA,GAAG,CAACc,WAAJ,GAAkB/D,UAAI,CACpB;AAAA,eAAM,CAAC/B,QAAQ,CAAC2E,iBAAT,EAAD,CAAN;AAAA,OADoB,EAEpB,UAAAV,WAAW,EAAI;AACb,eAAOA,WAAW,CAACI,GAAZ,CAAgB,UAAAnC,MAAM,EAAI;AAC/B,iBAAOlC,QAAQ,CAAC+E,UAAT,CACLC,GADK,EAEL9C,MAFK,EAGL8C,GAAG,CAACS,MAAJ,CAAWvD,MAAM,CAACT,EAAlB,CAHK,CAAP;AAKD,SANM,CAAP;AAOD,OAVmB,EAWpB;AACEgB,QAAAA,GAAG,EAAEU,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,iBAAxC,GAA4D,EADnE;AAEEd,QAAAA,KAAK,EAAE;AAAA;;AAAA,2CAAMvC,QAAQ,CAACL,OAAT,CAAiBC,QAAvB,qCAAmCI,QAAQ,CAACL,OAAT,CAAiBqG,SAApD;AAAA;AAFT,OAXoB,CAAtB;AAiBAhB,MAAAA,GAAG,CAACe,qBAAJ,GAA4BhE,UAAI,CAC9B;AAAA,eAAM,CAACiD,GAAG,CAACc,WAAJ,EAAD,CAAN;AAAA,OAD8B,EAE9B,UAAAG,QAAQ,EAAI;AACV,eAAOA,QAAQ,CAAC/F,MAAT,CAAgB,UAACwE,GAAD,EAAMtC,IAAN,EAAe;AACpCsC,UAAAA,GAAG,CAACtC,IAAI,CAACyC,QAAN,CAAH,GAAqBzC,IAArB;AACA,iBAAOsC,GAAP;AACD,SAHM,EAGJ,EAHI,CAAP;AAID,OAP6B,EAQ9B;AACEjC,QAAAA,GAAG,EAAE,2BADP;AAEEF,QAAAA,KAAK,EAAE;AAAA;;AAAA,2CAAMvC,QAAQ,CAACL,OAAT,CAAiBC,QAAvB,qCAAmCI,QAAQ,CAACL,OAAT,CAAiBqG,SAApD;AAAA;AAFT,OAR8B,CAAhC;;AAcA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpH,QAAQ,CAACkF,MAA7B,EAAqCkC,CAAC,EAAtC,EAA0C;AACxC,YAAM9F,OAAO,GAAGtB,QAAQ,CAACoH,CAAD,CAAxB;AACA7F,QAAAA,MAAM,CAACC,MAAP,CAAc0E,GAAd,EAAmB5E,OAAO,CAACkF,SAA3B,oBAAmBlF,OAAO,CAACkF,SAAR,CAAoBN,GAApB,EAAyBhF,QAAzB,CAAnB;AACD;;AAED,aAAOgF,GAAP;AACD,KA5T0C;AA8T3CmB,IAAAA,eAAe,EAAEpE,UAAI,CACnB;AAAA,aAAM,CAAC/B,QAAQ,CAACL,OAAT,CAAiByG,IAAlB,CAAN;AAAA,KADmB,EAEnB,UACEA,IADF,EAMK;AACH;AACA,UAAMC,IAAsB,GAAG,EAA/B;AACA,UAAMC,QAA0B,GAAG,EAAnC;AACA,UAAMC,QAAwC,GAAG,EAAjD;AAEA,UAAMtC,WAAW,GAAGjE,QAAQ,CAAC2E,iBAAT,EAApB;;AAEA,UAAM6B,SAAS,GAAG,SAAZA,SAAY,CAChBtD,WADgB,EAEhBsC,QAFgB,EAGhB1C,KAHgB,EAIhB2D,UAJgB,EAKhBjF,MALgB,EAMb;AAAA,YAHHsB,KAGG;AAHHA,UAAAA,KAGG,GAHK,CAGL;AAAA;;AACH,YAAMrB,EAAE,GAAGzB,QAAQ,CAACqB,QAAT,CAAkB6B,WAAlB,EAA+BsC,QAA/B,EAAyChE,MAAzC,CAAX;;AAEA,YAAI,CAACC,EAAL,EAAS;AACP,cAAI0B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,kBAAM,IAAIC,KAAJ,uCAA8C7B,EAA9C,CAAN;AACD;AACF;;AAED,YAAMgE,MAA2B,GAAG,EAApC;;AAEA,aAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjC,WAAW,CAACD,MAAhC,EAAwCkC,CAAC,EAAzC,EAA6C;AAC3C,cAAMhE,OAAM,GAAG+B,WAAW,CAACiC,CAAD,CAA1B;;AACA,cAAIhE,OAAM,IAAIA,OAAM,CAACe,UAArB,EAAiC;AAC/BwC,YAAAA,MAAM,CAACvD,OAAM,CAACT,EAAR,CAAN,GAAoBS,OAAM,CAACe,UAAP,CAAkBC,WAAlB,EAA+BsC,QAA/B,CAApB;AACD;AACF,SAhBE;;;AAmBH,YAAMR,GAAG,GAAGhF,QAAQ,CAACsF,SAAT,CACV7D,EADU,EAEVyB,WAFU,EAGVsC,QAHU,EAIV1C,KAJU,EAKV2C,MALU,CAAZ,CAnBG;;AA4BHgB,QAAAA,UAAU,CAACC,IAAX,CAAgB1B,GAAhB,EA5BG;;AA8BHsB,QAAAA,QAAQ,CAACI,IAAT,CAAc1B,GAAd,EA9BG;;AAgCHuB,QAAAA,QAAQ,CAAC9E,EAAD,CAAR,GAAeuD,GAAf,CAhCG;;AAmCH,YAAIhF,QAAQ,CAACL,OAAT,CAAiBgH,UAArB,EAAiC;AAC/B,cAAMC,eAAe,GAAG5G,QAAQ,CAACL,OAAT,CAAiBgH,UAAjB,CACtBzD,WADsB,EAEtBsC,QAFsB,CAAxB,CAD+B;;AAO/B,cAAIoB,eAAJ,YAAIA,eAAe,CAAE5C,MAArB,EAA6B;AAC3BgB,YAAAA,GAAG,CAAC4B,eAAJ,GAAsBA,eAAtB;AACA,gBAAMlB,OAAyB,GAAG,EAAlC;;AAEA,iBAAK,IAAIQ,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGlB,GAAG,CAAC4B,eAAJ,CAAoB5C,MAAxC,EAAgDkC,EAAC,EAAjD,EAAqD;AACnDM,cAAAA,SAAS,CACPxB,GAAG,CAAC4B,eAAJ,CAAoBV,EAApB,CADO,EAEPA,EAFO,EAGPpD,KAAK,GAAG,CAHD,EAIP4C,OAJO,EAKPV,GALO,CAAT;AAOD;;AACDA,YAAAA,GAAG,CAACU,OAAJ,GAAcA,OAAd;AACD;AACF;AACF,OAhED;;AAkEA,WAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,IAAI,CAACpC,MAAzB,EAAiCkC,CAAC,EAAlC,EAAsC;AACpCM,QAAAA,SAAS,CAACJ,IAAI,CAACF,CAAD,CAAL,EAA8BA,CAA9B,EAAiC,CAAjC,EAAoCG,IAApC,CAAT;AACD;;AAED,aAAO;AAAEA,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,QAAQ,EAARA,QAAR;AAAkBC,QAAAA,QAAQ,EAARA;AAAlB,OAAP;AACD,KAvFkB,EAwFnB;AACE9D,MAAAA,GAAG,EAAE,aADP;AAEEF,MAAAA,KAAK,EAAE;AAAA;;AAAA,0CAAMvC,QAAQ,CAACL,OAAT,CAAiBC,QAAvB,sCAAmCI,QAAQ,CAACL,OAAT,CAAiBE,UAApD;AAAA,OAFT;AAGEgH,MAAAA,QAAQ,EAAE,oBAAM;AACd7G,QAAAA,QAAQ,CAAC8G,mBAAT;;AACA9G,QAAAA,QAAQ,CAAC+G,wBAAT;AACD;AANH,KAxFmB,CA9TsB;AAga3C;AACA;AAEAC,IAAAA,WAAW,EAAE,uBAAM;AACjB,aAAOhH,QAAQ,CAACiH,qBAAT,EAAP;AACD,KAra0C;AAua3CC,IAAAA,MAAM,EAAE,gBAACzF,EAAD,EAAgB;AACtB,UAAMuD,GAAG,GAAGhF,QAAQ,CAACgH,WAAT,GAAuBT,QAAvB,CAAgC9E,EAAhC,CAAZ;;AAEA,UAAI,CAACuD,GAAL,EAAU;AACR,YAAI7B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,gBAAM,IAAIC,KAAJ,qCAA4C7B,EAA5C,CAAN;AACD;;AACD,cAAM,IAAI6B,KAAJ,EAAN;AACD;;AAED,aAAO0B,GAAP;AACD,KAlb0C;AAob3CmC,IAAAA,OAAO,EAAE,iBAAClC,KAAD,EAAgBJ,QAAhB,EAAqC;AAC5C,UAAMG,GAAG,GAAGhF,QAAQ,CAACkH,MAAT,CAAgBjC,KAAhB,CAAZ;;AAEA,UAAI,CAACD,GAAL,EAAU;AACR,YAAI7B,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,gBAAM,IAAIC,KAAJ,yCAAgD2B,KAAhD,CAAN;AACD;;AACD,cAAM,IAAI3B,KAAJ,EAAN;AACD;;AAED,UAAMlB,IAAI,GAAG4C,GAAG,CAACe,qBAAJ,GAA4BlB,QAA5B,CAAb;;AAEA,UAAI,CAACzC,IAAL,EAAW;AACT,YAAIe,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,gBAAM,IAAIC,KAAJ,kCAC2BuB,QAD3B,gBAC8CI,KAD9C,CAAN;AAGD;;AACD,cAAM,IAAI3B,KAAJ,EAAN;AACD;;AAED,aAAOlB,IAAP;AACD,KA1c0C;AA4c3CgF,IAAAA,aAAa,EAAE,uBAAAjC,SAAS,EAAI;AAC1B,aAAOkC,gBAAU,CACf;AACEC,QAAAA,IAAI,EAAE;AADR,OADe,EAIfnC,SAJe,CAAjB;AAMD,KAnd0C;AAqd3CoC,IAAAA,iBAAiB,EAAE,2BAAApC,SAAS,EAAI;AAC9B,aAAOkC,gBAAU,CACf;AACEC,QAAAA,IAAI,EAAE;AADR,OADe,EAIfnC,SAJe,CAAjB;AAMD,KA5d0C;AA8d3CU,IAAAA,WAAW,EAAE,qBAACZ,KAAD,EAAQE,SAAR,EAAsB;AACjC,UAAMH,GAAG,GAAGhF,QAAQ,CAACkH,MAAT,CAAgBjC,KAAhB,CAAZ;;AACA,UAAI,CAACD,GAAL,EAAU;AACR;AACD;;AAED,aAAOqC,gBAAU,CACf;AACE5E,QAAAA,GAAG,EAAEuC,GAAG,CAACvD,EADX;AAEE6F,QAAAA,IAAI,EAAE;AAFR,OADe,EAKfnC,SALe,CAAjB;AAOD,KA3e0C;AA6e3CD,IAAAA,YAAY,EAAE,sBAACD,KAAD,EAAQJ,QAAR,EAAkBM,SAAlB,EAAgC;AAC5C,UAAM/C,IAAI,GAAGpC,QAAQ,CAACmH,OAAT,CAAiBlC,KAAjB,EAAwBJ,QAAxB,CAAb;;AAEA,UAAI,CAACzC,IAAL,EAAW;AACT;AACD;;AAED,aAAOiF,gBAAU,CACf;AACE5E,QAAAA,GAAG,EAAEL,IAAI,CAACX,EADZ;AAEE6F,QAAAA,IAAI,EAAE;AAFR,OADe,EAKfnC,SALe,CAAjB;AAOD,KA3f0C;AA6f3CqC,IAAAA,aAAa,EAAE;AAAA;;AAAA,gEACbxH,QAAQ,CAACyH,eAAT,GAA2B,CAA3B,CADa,qBACb,uBAA+BC,OAA/B,CAAuCxH,MAAvC,CAA8C,UAACyH,GAAD,EAAM1F,MAAN,EAAiB;AAC7D,eAAO0F,GAAG,GAAG1F,MAAM,CAACuB,QAAP,EAAb;AACD,OAFD,EAEG,CAFH,CADa,oCAGJ,CAHI;AAAA,KA7f4B;AAigB3CoE,IAAAA,iBAAiB,EAAE;AAAA;;AAAA,gEACjB5H,QAAQ,CAAC6H,mBAAT,GAA+B,CAA/B,CADiB,qBACjB,uBAAmCH,OAAnC,CAA2CxH,MAA3C,CAAkD,UAACyH,GAAD,EAAM1F,MAAN,EAAiB;AACjE,eAAO0F,GAAG,GAAG1F,MAAM,CAACuB,QAAP,EAAb;AACD,OAFD,EAEG,CAFH,CADiB,oCAGR,CAHQ;AAAA,KAjgBwB;AAqgB3CsE,IAAAA,mBAAmB,EAAE;AAAA;;AAAA,gEACnB9H,QAAQ,CAAC+H,qBAAT,GAAiC,CAAjC,CADmB,qBACnB,uBAAqCL,OAArC,CAA6CxH,MAA7C,CAAoD,UAACyH,GAAD,EAAM1F,MAAN,EAAiB;AACnE,eAAO0F,GAAG,GAAG1F,MAAM,CAACuB,QAAP,EAAb;AACD,OAFD,EAEG,CAFH,CADmB,oCAGV,CAHU;AAAA,KArgBsB;AAygB3CwE,IAAAA,kBAAkB,EAAE;AAAA;;AAAA,gEAClBhI,QAAQ,CAACiI,oBAAT,GAAgC,CAAhC,CADkB,qBAClB,uBAAoCP,OAApC,CAA4CxH,MAA5C,CAAmD,UAACyH,GAAD,EAAM1F,MAAN,EAAiB;AAClE,eAAO0F,GAAG,GAAG1F,MAAM,CAACuB,QAAP,EAAb;AACD,OAFD,EAEG,CAFH,CADkB,oCAGT,CAHS;AAAA;AAzgBuB,IAA7C;;AA+gBAxD,EAAAA,QAAQ,GAAGK,MAAM,CAACC,MAAP,CAAcN,QAAd,EAAwBW,aAAxB,CAAX;AAEA,SAAOX,QAAP;AACD;;;;"}
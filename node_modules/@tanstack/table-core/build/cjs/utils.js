/**
 * table-core
 *
 * Copyright (c) TanStack
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('./_virtual/_rollupPluginBabelHelpers.js');

function functionalUpdate(updater, input) {
  return typeof updater === 'function' ? updater(input) : updater;
}
function noop() {//
}
function makeStateUpdater(key, instance) {
  return function (updater) {
    instance.setState(function (old) {
      var _extends2;

      return _rollupPluginBabelHelpers["extends"]({}, old, (_extends2 = {}, _extends2[key] = functionalUpdate(updater, old[key]), _extends2));
    });
  };
}
function isFunction(d) {
  return d instanceof Function;
}
function flattenBy(arr, getChildren) {
  var flat = [];

  var recurse = function recurse(subArr) {
    subArr.forEach(function (item) {
      flat.push(item);
      var children = getChildren(item);

      if (children != null && children.length) {
        recurse(children);
      }
    });
  };

  recurse(arr);
  return flat;
}
// @ts-ignore // Just rely on the type, not the implementation
var propGetter = function propGetter(initial, getter) {
  if (isFunction(getter)) {
    return getter(initial);
  }

  return _rollupPluginBabelHelpers["extends"]({}, initial, getter != null ? getter : {});
};
function memo(getDeps, fn, opts) {
  var deps = [];
  var result;
  return function () {
    var depTime;
    if (opts.key && opts.debug) depTime = performance.now();
    var newDeps = getDeps();
    var depsChanged = newDeps.length !== deps.length || newDeps.some(function (dep, index) {
      return deps[index] !== dep;
    });

    if (depsChanged) {
      var oldResult = result;
      var resultTime;
      if (opts.key && opts.debug) resultTime = performance.now();
      result = fn.apply(void 0, newDeps);
      deps = newDeps;
      opts == null ? void 0 : opts.onChange == null ? void 0 : opts.onChange(result, oldResult);

      if (opts.key && opts.debug) {
        if (opts != null && opts.debug()) {
          var depEndTime = Math.round((performance.now() - depTime) * 100) / 100;
          var resultEndTime = Math.round((performance.now() - resultTime) * 100) / 100;
          var resultFpsPercentage = resultEndTime / 16;

          var pad = function pad(str, num) {
            str = String(str);

            while (str.length < num) {
              str = ' ' + str;
            }

            return str;
          };

          console.info("%c\u23F1 " + pad(resultEndTime, 5) + " /" + pad(depEndTime, 5) + " ms", "\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(" + Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120)) + "deg 100% 31%);", opts == null ? void 0 : opts.key, _rollupPluginBabelHelpers["extends"]({
            length: deps.length + " -> " + newDeps.length
          }, newDeps.map(function (_, index) {
            if (deps[index] !== newDeps[index]) {
              return [index, deps[index], newDeps[index]];
            }

            return false;
          }).filter(Boolean).reduce(function (accu, _ref) {
            var _extends3;

            var a = _ref[0],
                b = _ref[1];
            return _rollupPluginBabelHelpers["extends"]({}, accu, (_extends3 = {}, _extends3[a] = b, _extends3));
          }, {}), {
            parent: parent
          }));
        }
      }

      oldResult = undefined;
    }

    return result;
  };
} // export function hashString(str: string, seed = 0): string {
//   let h1 = 0xdeadbeef ^ seed,
//     h2 = 0x41c6ce57 ^ seed
//   for (let i = 0, ch; i < str.length; i++) {
//     ch = str.charCodeAt(i)
//     h1 = Math.imul(h1 ^ ch, 2654435761)
//     h2 = Math.imul(h2 ^ ch, 1597334677)
//   }
//   h1 =
//     Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^
//     Math.imul(h2 ^ (h2 >>> 13), 3266489909)
//   h2 =
//     Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^
//     Math.imul(h1 ^ (h1 >>> 13), 3266489909)
//   return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString()
// }

exports.flattenBy = flattenBy;
exports.functionalUpdate = functionalUpdate;
exports.isFunction = isFunction;
exports.makeStateUpdater = makeStateUpdater;
exports.memo = memo;
exports.noop = noop;
exports.propGetter = propGetter;
//# sourceMappingURL=utils.js.map

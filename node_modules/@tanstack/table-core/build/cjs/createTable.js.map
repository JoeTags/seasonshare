{"version":3,"file":"createTable.js","sources":["../../src/createTable.tsx"],"sourcesContent":["import { CustomFilterTypes } from './features/Filters'\nimport { CustomAggregationTypes } from './features/Grouping'\nimport { CustomSortingTypes } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  PartialGenerics,\n  AnyRender,\n  AnyGenerics,\n} from './types'\nimport { Overwrite, PartialKeys } from './utils'\n\nexport type CreateTableFactory<TGenerics extends AnyGenerics> = <\n  TSubGenerics extends {\n    Row: any\n    ColumnMeta?: object\n  }\n>() => Table<\n  Overwrite<\n    TGenerics,\n    { Row: TSubGenerics['Row']; ColumnMeta: TSubGenerics['ColumnMeta'] }\n  >\n>\n\nexport type CreateTableFactoryOptions<\n  TRender extends AnyRender,\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n> = {\n  render: TRender\n  filterFns?: TFilterFns\n  sortingFns?: TSortingFns\n  aggregationFns?: TAggregationFns\n}\n\nexport type Table<TGenerics extends AnyGenerics> = {\n  generics: TGenerics\n  __options: CreateTableFactoryOptions<any, any, any, any>\n  createColumns: <TColumnDef extends ColumnDef<any>>(\n    columns: TColumnDef[]\n  ) => TColumnDef[]\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            id: string\n            header?: string | ((...any: any) => any)\n          }\n        >,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: Overwrite<\n      PartialKeys<ColumnDef<TGenerics>, 'accessorFn' | 'accessorKey'>,\n      {\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          ColumnDef<Overwrite<TGenerics, { Value: ReturnType<TAccessor> }>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            ColumnDef<\n              Overwrite<TGenerics, { Value: TGenerics['Row'][TAccessor] }>\n            >,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n}\n\ntype InitTable<TRender extends AnyRender> = {\n  createTableFactory: <TGenerics extends AnyGenerics>(\n    options: CreateTableFactoryOptions<TRender, any, any, any>\n  ) => CreateTableFactory<Overwrite<TGenerics, { Render: TRender }>>\n  createTable: CreateTableFactory<\n    Overwrite<PartialGenerics, { Render: TRender }>\n  >\n}\n\n//\n\nexport function init<TRender extends AnyRender>(opts: {\n  render: TRender\n}): InitTable<TRender> {\n  return {\n    createTableFactory: factoryOptions => () =>\n      _createTable(undefined, undefined, { ...factoryOptions, ...opts }),\n    createTable: () => _createTable(undefined, undefined, opts),\n  }\n}\n\nfunction _createTable<TGenerics extends AnyGenerics>(\n  _: undefined,\n  __: undefined,\n  __options: CreateTableFactoryOptions<any, any, any, any>\n): Table<TGenerics> {\n  return {\n    generics: undefined!,\n    __options: __options ?? {\n      render: () => {\n        throw new Error()\n      },\n    },\n    createColumns: columns => columns,\n    createDisplayColumn: column => ({ ...column, columnDefType: 'display' }),\n    createGroup: column => ({ ...column, columnDefType: 'group' } as any),\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        columnDefType: 'data',\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n  }\n}\n"],"names":["init","opts","createTableFactory","factoryOptions","_createTable","undefined","createTable","_","__","__options","generics","render","Error","createColumns","columns","createDisplayColumn","column","columnDefType","createGroup","createDataColumn","accessor","id","accessorKey","accessorFn"],"mappings":";;;;;;;;;;;;;;;;AA8GA;AAEO,SAASA,IAAT,CAAyCC,IAAzC,EAEgB;AACrB,SAAO;AACLC,IAAAA,kBAAkB,EAAE,4BAAAC,cAAc;AAAA,aAAI;AAAA,eACpCC,YAAY,CAACC,SAAD,EAAYA,SAAZ,2CAA4BF,cAA5B,EAA+CF,IAA/C,EADwB;AAAA,OAAJ;AAAA,KAD7B;AAGLK,IAAAA,WAAW,EAAE;AAAA,aAAMF,YAAY,CAACC,SAAD,EAAYA,SAAZ,EAAuBJ,IAAvB,CAAlB;AAAA;AAHR,GAAP;AAKD;;AAED,SAASG,YAAT,CACEG,CADF,EAEEC,EAFF,EAGEC,SAHF,EAIoB;AAClB,SAAO;AACLC,IAAAA,QAAQ,EAAEL,SADL;AAELI,IAAAA,SAAS,EAAEA,SAAF,WAAEA,SAAF,GAAe;AACtBE,MAAAA,MAAM,EAAE,kBAAM;AACZ,cAAM,IAAIC,KAAJ,EAAN;AACD;AAHqB,KAFnB;AAOLC,IAAAA,aAAa,EAAE,uBAAAC,OAAO;AAAA,aAAIA,OAAJ;AAAA,KAPjB;AAQLC,IAAAA,mBAAmB,EAAE,6BAAAC,MAAM;AAAA,sDAAUA,MAAV;AAAkBC,QAAAA,aAAa,EAAE;AAAjC;AAAA,KARtB;AASLC,IAAAA,WAAW,EAAE,qBAAAF,MAAM;AAAA,sDAAUA,MAAV;AAAkBC,QAAAA,aAAa,EAAE;AAAjC;AAAA,KATd;AAULE,IAAAA,gBAAgB,EAAE,0BAACC,QAAD,EAAWJ,MAAX,EAA2B;AAC3CA,MAAAA,MAAM,4CACDA,MADC;AAEJC,QAAAA,aAAa,EAAE,MAFX;AAGJI,QAAAA,EAAE,EAAEL,MAAM,CAACK;AAHP,QAAN;;AAMA,UAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAAA;;AAChC,wDACKJ,MADL;AAEEK,UAAAA,EAAE,gBAAEL,MAAM,CAACK,EAAT,yBAAeD,QAFnB;AAGEE,UAAAA,WAAW,EAAEF;AAHf;AAKD;;AAED,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,wDACKJ,MADL;AAEEO,UAAAA,UAAU,EAAEH;AAFd;AAID;;AAED,YAAM,IAAIR,KAAJ,CAAU,kBAAV,CAAN;AACD;AAjCI,GAAP;AAmCD;;;;"}
import { Getter, OnChangeFn, AnyGenerics, PropGetterValue, TableInstance, Row, RowModel, Updater } from '../types';
export declare type RowSelectionState = Record<string, boolean>;
export declare type RowSelectionTableState = {
    rowSelection: RowSelectionState;
};
export declare type RowSelectionOptions<TGenerics extends AnyGenerics> = {
    onRowSelectionChange?: OnChangeFn<RowSelectionState>;
    autoResetRowSelection?: boolean;
    enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean);
    enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean);
    enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean);
};
declare type ToggleRowSelectedProps = {
    onChange?: (e: MouseEvent | TouchEvent) => void;
    checked?: boolean;
    title?: string;
    indeterminate?: boolean;
};
export declare type RowSelectionRow = {
    getIsSelected: () => boolean;
    getIsSomeSelected: () => boolean;
    getCanSelect: () => boolean;
    getCanMultiSelect: () => boolean;
    toggleSelected: (value?: boolean) => void;
    getToggleSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(userProps?: TGetter) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>;
};
export declare type RowSelectionInstance<TGenerics extends AnyGenerics> = {
    _notifyRowSelectionReset: () => void;
    getToggleRowSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(rowId: string, userProps?: TGetter) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>;
    getToggleAllRowsSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(userProps?: TGetter) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>;
    getToggleAllPageRowsSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(userProps?: TGetter) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>;
    setRowSelection: (updater: Updater<RowSelectionState>) => void;
    resetRowSelection: () => void;
    toggleRowSelected: (rowId: string, value?: boolean) => void;
    getRowCanSelect: (rowId: string) => boolean;
    getRowCanSelectSubRows: (rowId: string) => boolean;
    getRowCanMultiSelect: (rowId: string) => boolean;
    getRowIsSelected: (rowId: string) => boolean;
    getRowIsSomeSelected: (rowId: string) => boolean;
    getIsAllRowsSelected: () => boolean;
    getIsAllPageRowsSelected: () => boolean;
    getIsSomeRowsSelected: () => boolean;
    getIsSomePageRowsSelected: () => boolean;
    toggleAllRowsSelected: (value: boolean) => void;
    toggleAllPageRowsSelected: (value: boolean) => void;
    getPreSelectedRowModel: () => RowModel<TGenerics>;
    getSelectedRowModel: () => RowModel<TGenerics>;
    getFilteredSelectedRowModel: () => RowModel<TGenerics>;
    getGroupedSelectedRowModel: () => RowModel<TGenerics>;
};
export declare const RowSelection: {
    getInitialState: () => RowSelectionTableState;
    getDefaultOptions: <TGenerics extends AnyGenerics>(instance: TableInstance<TGenerics>) => RowSelectionOptions<TGenerics>;
    getInstance: <TGenerics_1 extends AnyGenerics>(instance: TableInstance<TGenerics_1>) => RowSelectionInstance<TGenerics_1>;
    createRow: <TGenerics_2 extends AnyGenerics>(row: Row<TGenerics_2>, instance: TableInstance<TGenerics_2>) => RowSelectionRow;
};
export declare function selectRowsFn<TGenerics extends AnyGenerics>(instance: TableInstance<TGenerics>, rowModel: RowModel<TGenerics>): RowModel<TGenerics>;
export declare function isRowSelected<TGenerics extends AnyGenerics>(row: Row<TGenerics>, selection: Record<string, boolean>, instance: TableInstance<TGenerics>): boolean | 'some';
export {};

import { Column, Getter, Header, OnChangeFn, AnyGenerics, PropGetterValue, TableInstance, Updater } from '../types';
export declare type ColumnSizing = Record<string, number>;
export declare type ColumnSizingInfoState = {
    startOffset: null | number;
    startSize: null | number;
    deltaOffset: null | number;
    deltaPercentage: null | number;
    isResizingColumn: false | string;
    columnSizingStart: [string, number][];
};
export declare type ColumnSizingTableState = {
    columnSizing: ColumnSizing;
    columnSizingInfo: ColumnSizingInfoState;
};
export declare type ColumnResizeMode = 'onChange' | 'onEnd';
export declare type ColumnSizingOptions = {
    enableColumnResizing?: boolean;
    columnResizeMode?: ColumnResizeMode;
    onColumnSizingChange?: OnChangeFn<ColumnSizing>;
    onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>;
};
export declare type ColumnSizingDefaultOptions = {
    columnResizeMode: ColumnResizeMode;
    onColumnSizingChange: OnChangeFn<ColumnSizing>;
    onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>;
};
export declare type ColumnResizerProps = {
    title?: string;
    onMouseDown?: (e: MouseEvent) => void;
    onTouchStart?: (e: TouchEvent) => void;
    draggable?: boolean;
    role?: string;
};
export declare type ColumnSizingInstance<TGenerics extends AnyGenerics> = {
    getColumnWidth: (columnId: string) => number;
    setColumnSizing: (updater: Updater<ColumnSizing>) => void;
    setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void;
    resetColumnSizing: () => void;
    resetColumnSize: (columnId: string) => void;
    resetHeaderSize: (headerId: string) => void;
    resetHeaderSizeInfo: () => void;
    getColumnCanResize: (columnId: string) => boolean;
    getHeaderCanResize: (headerId: string) => boolean;
    getHeaderResizerProps: <TGetter extends Getter<ColumnResizerProps>>(headerId: string, userProps?: TGetter) => undefined | PropGetterValue<ColumnResizerProps, TGetter>;
    getColumnIsResizing: (columnId: string) => boolean;
    getHeaderIsResizing: (headerId: string) => boolean;
};
export declare type ColumnSizingColumnDef = {
    enableResizing?: boolean;
    defaultCanResize?: boolean;
    width?: number;
    minWidth?: number;
    maxWidth?: number;
};
export declare type ColumnSizingColumn<TGenerics extends AnyGenerics> = {
    getCanResize: () => boolean;
    getIsResizing: () => boolean;
    resetSize: () => void;
};
export declare type ColumnSizingHeader<TGenerics extends AnyGenerics> = {
    getCanResize: () => boolean;
    getIsResizing: () => boolean;
    getResizerProps: <TGetter extends Getter<ColumnResizerProps>>(userProps?: TGetter) => undefined | PropGetterValue<ColumnResizerProps, TGetter>;
    resetSize: () => void;
};
export declare const defaultColumnSizing: {
    width: number;
    minWidth: number;
    maxWidth: number;
};
export declare const ColumnSizing: {
    getDefaultColumn: () => ColumnSizingColumnDef;
    getInitialState: () => ColumnSizingTableState;
    getDefaultOptions: <TGenerics extends AnyGenerics>(instance: TableInstance<TGenerics>) => ColumnSizingDefaultOptions;
    getInstance: <TGenerics_1 extends AnyGenerics>(instance: TableInstance<TGenerics_1>) => ColumnSizingInstance<TGenerics_1>;
    createColumn: <TGenerics_2 extends AnyGenerics>(column: Column<TGenerics_2>, instance: TableInstance<TGenerics_2>) => ColumnSizingColumn<TGenerics_2>;
    createHeader: <TGenerics_3 extends AnyGenerics>(header: Header<TGenerics_3>, instance: TableInstance<TGenerics_3>) => ColumnSizingHeader<TGenerics_3>;
};
export declare function passiveEventSupported(): boolean;

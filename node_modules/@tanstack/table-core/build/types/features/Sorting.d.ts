import { MouseEvent, TouchEvent } from 'react';
import { RowModel } from '..';
import { BuiltInSortType } from '../sortTypes';
import { Column, Getter, OnChangeFn, AnyGenerics, PropGetterValue, TableInstance, Row, Updater } from '../types';
import { Overwrite } from '../utils';
export declare type SortDirection = 'asc' | 'desc';
export declare type ColumnSort = {
    id: string;
    desc: boolean;
};
export declare type SortingState = ColumnSort[];
export declare type SortingFn<TGenerics extends AnyGenerics> = {
    (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number;
};
export declare type CustomSortingTypes<TGenerics extends AnyGenerics> = Record<string, SortingFn<TGenerics>>;
export declare type SortingTableState = {
    sorting: SortingState;
};
export declare type SortType<TGenerics extends AnyGenerics> = 'auto' | BuiltInSortType | keyof TGenerics['SortingFns'] | SortingFn<TGenerics>;
export declare type SortingColumnDef<TGenerics extends AnyGenerics> = {
    sortType?: SortType<Overwrite<TGenerics, {
        Value: any;
    }>>;
    sortDescFirst?: boolean;
    enableSorting?: boolean;
    enableMultiSort?: boolean;
    defaultCanSort?: boolean;
    invertSorting?: boolean;
    sortUndefined?: false | -1 | 1;
};
export declare type SortingColumn<TGenerics extends AnyGenerics> = {
    sortType: SortType<Overwrite<TGenerics, {
        Value: any;
    }>>;
    getCanSort: () => boolean;
    getCanMultiSort: () => boolean;
    getSortIndex: () => number;
    getIsSorted: () => false | SortDirection;
    resetSorting: () => void;
    toggleSorting: (desc?: boolean, isMulti?: boolean) => void;
    getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(userProps?: TGetter) => undefined | PropGetterValue<ToggleSortingProps, TGetter>;
};
export declare type SortingOptions<TGenerics extends AnyGenerics> = {
    sortTypes?: TGenerics['SortingFns'];
    onSortingChange?: OnChangeFn<SortingState>;
    autoResetSorting?: boolean;
    enableSorting?: boolean;
    enableSortingRemoval?: boolean;
    enableMultiRemove?: boolean;
    enableMultiSort?: boolean;
    sortDescFirst?: boolean;
    sortRowsFn?: (instance: TableInstance<TGenerics>, rowModel: RowModel<TGenerics>) => RowModel<TGenerics>;
    maxMultiSortColCount?: number;
    isMultiSortEvent?: (e: MouseEvent | TouchEvent) => boolean;
};
export declare type ToggleSortingProps = {
    title?: string;
    onClick?: (event: MouseEvent | TouchEvent) => void;
};
export declare type SortingInstance<TGenerics extends AnyGenerics> = {
    _notifySortingReset: () => void;
    getColumnAutoSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined;
    getColumnAutoSortDir: (columnId: string) => SortDirection;
    getColumnSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined;
    setSorting: (updater: Updater<SortingState>) => void;
    toggleColumnSorting: (columnId: string, desc?: boolean, multi?: boolean) => void;
    resetSorting: (columnId?: string) => void;
    getColumnCanSort: (columnId: string) => boolean;
    getColumnCanMultiSort: (columnId: string) => boolean;
    getColumnIsSorted: (columnId: string) => false | 'asc' | 'desc';
    getColumnSortIndex: (columnId: string) => number;
    getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(columnId: string, userProps?: TGetter) => undefined | PropGetterValue<ToggleSortingProps, TGetter>;
    getPreSortedRowModel: () => RowModel<TGenerics>;
    getSortedRowModel: () => RowModel<TGenerics>;
};
export declare const Sorting: {
    getDefaultColumn: <TGenerics extends AnyGenerics>() => SortingColumnDef<TGenerics>;
    getInitialState: () => SortingTableState;
    getDefaultOptions: <TGenerics_1 extends AnyGenerics>(instance: TableInstance<TGenerics_1>) => SortingOptions<TGenerics_1>;
    createColumn: <TGenerics_2 extends AnyGenerics>(column: Column<TGenerics_2>, instance: TableInstance<TGenerics_2>) => SortingColumn<TGenerics_2>;
    getInstance: <TGenerics_3 extends AnyGenerics>(instance: TableInstance<TGenerics_3>) => SortingInstance<TGenerics_3>;
};

import { RowModel } from '..';
import { BuiltInAggregationType } from '../aggregationTypes';
import { Cell, Column, Getter, OnChangeFn, PropGetterValue, TableInstance, Row, Updater, Renderable, UseRenderer, AnyGenerics } from '../types';
import { Overwrite } from '../utils';
export declare type GroupingState = string[];
export declare type AggregationFn<TGenerics extends AnyGenerics> = (getLeafValues: () => TGenerics['Row'][], getChildValues: () => TGenerics['Row'][]) => any;
export declare type CustomAggregationTypes<TGenerics extends AnyGenerics> = Record<string, AggregationFn<TGenerics>>;
export declare type AggregationType<TGenerics extends AnyGenerics> = 'auto' | BuiltInAggregationType | keyof TGenerics['AggregationFns'] | AggregationFn<TGenerics>;
export declare type GroupingTableState = {
    grouping: GroupingState;
};
export declare type GroupingColumnDef<TGenerics extends AnyGenerics> = {
    aggregationType?: AggregationType<Overwrite<TGenerics, {
        Value: any;
    }>>;
    aggregateValue?: (columnValue: unknown) => any;
    aggregatedCell?: Renderable<TGenerics, {
        instance: TableInstance<TGenerics>;
        row: Row<TGenerics>;
        column: Column<TGenerics>;
        cell: Cell<TGenerics>;
        value: TGenerics['Value'];
    }>;
    enableGrouping?: boolean;
    defaultCanGroup?: boolean;
};
export declare type GroupingColumn<TGenerics extends AnyGenerics> = {
    aggregationType?: AggregationType<Overwrite<TGenerics, {
        Value: any;
    }>>;
    getCanGroup: () => boolean;
    getIsGrouped: () => boolean;
    getGroupedIndex: () => number;
    toggleGrouping: () => void;
    getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(userProps?: TGetter) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>;
};
export declare type GroupingRow = {
    groupingColumnId?: string;
    groupingValue?: any;
    getIsGrouped: () => boolean;
};
export declare type GroupingCell<TGenerics extends AnyGenerics> = {
    getIsGrouped: () => boolean;
    getIsPlaceholder: () => boolean;
    getIsAggregated: () => boolean;
    renderAggregatedCell: () => string | null | ReturnType<UseRenderer<TGenerics>>;
};
export declare type ColumnDefaultOptions = {
    onGroupingChange: OnChangeFn<GroupingState>;
    autoResetGrouping: boolean;
    enableGrouping: boolean;
};
export declare type GroupingOptions<TGenerics extends AnyGenerics> = {
    aggregationTypes?: TGenerics['AggregationFns'];
    onGroupingChange?: OnChangeFn<GroupingState>;
    autoResetGrouping?: boolean;
    enableGrouping?: boolean;
    enableGroupingRemoval?: boolean;
    groupRowsFn?: (instance: TableInstance<TGenerics>, rowModel: RowModel<TGenerics>) => RowModel<TGenerics>;
    groupedColumnMode?: false | 'reorder' | 'remove';
};
export declare type GroupingColumnMode = false | 'reorder' | 'remove';
export declare type ToggleGroupingProps = {
    title?: string;
    onClick?: (event: MouseEvent | TouchEvent) => void;
};
export declare type GroupingInstance<TGenerics extends AnyGenerics> = {
    _notifyGroupingReset: () => void;
    getColumnAutoAggregationFn: (columnId: string) => AggregationFn<TGenerics> | undefined;
    getColumnAggregationFn: (columnId: string) => AggregationFn<TGenerics> | undefined;
    setGrouping: (updater: Updater<GroupingState>) => void;
    resetGrouping: () => void;
    toggleColumnGrouping: (columnId: string) => void;
    getColumnCanGroup: (columnId: string) => boolean;
    getColumnIsGrouped: (columnId: string) => boolean;
    getColumnGroupedIndex: (columnId: string) => number;
    getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(columnId: string, userProps?: TGetter) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>;
    getRowIsGrouped: (rowId: string) => boolean;
    getPreGroupedRowModel: () => RowModel<TGenerics>;
    getGroupedRowModel: () => RowModel<TGenerics>;
};
export declare const Grouping: {
    getDefaultColumn: <TGenerics extends AnyGenerics>() => GroupingColumnDef<TGenerics>;
    getInitialState: () => GroupingTableState;
    getDefaultOptions: <TGenerics_1 extends AnyGenerics>(instance: TableInstance<TGenerics_1>) => GroupingOptions<TGenerics_1>;
    createColumn: <TGenerics_2 extends AnyGenerics>(column: Column<TGenerics_2>, instance: TableInstance<TGenerics_2>) => GroupingColumn<TGenerics_2>;
    getInstance: <TGenerics_3 extends AnyGenerics>(instance: TableInstance<TGenerics_3>) => GroupingInstance<TGenerics_3>;
    createRow: <TGenerics_4 extends AnyGenerics>(row: Row<TGenerics_4>, instance: TableInstance<TGenerics_4>) => GroupingRow;
    createCell: <TGenerics_5 extends AnyGenerics>(cell: Cell<TGenerics_5>, column: Column<TGenerics_5>, row: Row<TGenerics_5>, instance: TableInstance<TGenerics_5>) => GroupingCell<TGenerics_5>;
    orderColumns: <TGenerics_6 extends AnyGenerics>(leafColumns: Column<TGenerics_6>[], grouping: string[], groupedColumnMode?: GroupingColumnMode | undefined) => Column<TGenerics_6>[];
};

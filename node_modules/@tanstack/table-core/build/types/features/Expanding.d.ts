import { MouseEvent, TouchEvent } from 'react';
import { RowModel } from '..';
import { Getter, OnChangeFn, AnyGenerics, PropGetterValue, TableInstance, Row, Updater } from '../types';
export declare type ExpandedStateList = Record<string, boolean>;
export declare type ExpandedState = true | Record<string, boolean>;
export declare type ExpandedTableState = {
    expanded: ExpandedState;
};
export declare type ExpandedRow = {
    toggleExpanded: (expanded?: boolean) => void;
    getIsExpanded: () => boolean;
    getCanExpand: () => boolean;
    getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(userProps?: TGetter) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>;
};
export declare type ExpandedOptions<TGenerics extends AnyGenerics> = {
    onExpandedChange?: OnChangeFn<ExpandedState>;
    autoResetExpanded?: boolean;
    enableExpanded?: boolean;
    expandRowsFn?: (instance: TableInstance<TGenerics>, rowModel: RowModel<TGenerics>) => RowModel<TGenerics>;
    expandSubRows?: boolean;
    defaultCanExpand?: boolean;
    getIsRowExpanded?: (row: Row<TGenerics>) => boolean;
    getRowCanExpand?: (row: Row<TGenerics>) => boolean;
    paginateExpandedRows?: boolean;
};
export declare type ToggleExpandedProps = {
    title?: string;
    onClick?: (event: MouseEvent | TouchEvent) => void;
};
export declare type ExpandedInstance<TGenerics extends AnyGenerics> = {
    _notifyExpandedReset: () => void;
    setExpanded: (updater: Updater<ExpandedState>) => void;
    toggleRowExpanded: (rowId: string, expanded?: boolean) => void;
    toggleAllRowsExpanded: (expanded?: boolean) => void;
    resetExpanded: () => void;
    getRowCanExpand: (rowId: string) => boolean;
    getIsRowExpanded: (rowId: string) => boolean;
    getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(rowId: string, userProps?: TGetter) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>;
    getToggleAllRowsExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(userProps?: TGetter) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>;
    getIsSomeRowsExpanded: () => boolean;
    getIsAllRowsExpanded: () => boolean;
    getExpandedDepth: () => number;
    getExpandedRowModel: () => RowModel<TGenerics>;
    getPreExpandedRowModel: () => RowModel<TGenerics>;
};
export declare const Expanding: {
    getInitialState: () => ExpandedTableState;
    getDefaultOptions: <TGenerics extends AnyGenerics>(instance: TableInstance<TGenerics>) => ExpandedOptions<TGenerics>;
    getInstance: <TGenerics_1 extends AnyGenerics>(instance: TableInstance<TGenerics_1>) => ExpandedInstance<TGenerics_1>;
    createRow: <TGenerics_2 extends AnyGenerics>(row: Row<TGenerics_2>, instance: TableInstance<TGenerics_2>) => ExpandedRow;
};

import { Cell, Column, FooterGroupProps, FooterProps, Getter, Header, HeaderGroup, HeaderGroupProps, HeaderProps, AnyGenerics, PropGetterValue, TableInstance, Row } from '../types';
export declare type HeadersRow<TGenerics extends AnyGenerics> = {
    _getAllVisibleCells: () => Cell<TGenerics>[];
    getVisibleCells: () => Cell<TGenerics>[];
    getLeftVisibleCells: () => Cell<TGenerics>[];
    getCenterVisibleCells: () => Cell<TGenerics>[];
    getRightVisibleCells: () => Cell<TGenerics>[];
};
export declare type HeadersInstance<TGenerics extends AnyGenerics> = {
    createHeader: (column: Column<TGenerics>, options: {
        id?: string;
        isPlaceholder?: boolean;
        placeholderId?: string;
        depth: number;
    }) => Header<TGenerics>;
    getHeaderGroups: () => HeaderGroup<TGenerics>[];
    getLeftHeaderGroups: () => HeaderGroup<TGenerics>[];
    getCenterHeaderGroups: () => HeaderGroup<TGenerics>[];
    getRightHeaderGroups: () => HeaderGroup<TGenerics>[];
    getFooterGroups: () => HeaderGroup<TGenerics>[];
    getLeftFooterGroups: () => HeaderGroup<TGenerics>[];
    getCenterFooterGroups: () => HeaderGroup<TGenerics>[];
    getRightFooterGroups: () => HeaderGroup<TGenerics>[];
    getFlatHeaders: () => Header<TGenerics>[];
    getLeftFlatHeaders: () => Header<TGenerics>[];
    getCenterFlatHeaders: () => Header<TGenerics>[];
    getRightFlatHeaders: () => Header<TGenerics>[];
    getLeafHeaders: () => Header<TGenerics>[];
    getLeftLeafHeaders: () => Header<TGenerics>[];
    getCenterLeafHeaders: () => Header<TGenerics>[];
    getRightLeafHeaders: () => Header<TGenerics>[];
    getHeader: (id: string) => Header<TGenerics>;
    getHeaderGroupProps: <TGetter extends Getter<HeaderGroupProps>>(id: string, userProps?: TGetter) => undefined | PropGetterValue<HeaderGroupProps, TGetter>;
    getFooterGroupProps: <TGetter extends Getter<FooterGroupProps>>(id: string, userProps?: TGetter) => undefined | PropGetterValue<FooterGroupProps, TGetter>;
    getHeaderProps: <TGetter extends Getter<HeaderProps>>(headerId: string, userProps?: TGetter) => undefined | PropGetterValue<HeaderProps, TGetter>;
    getFooterProps: <TGetter extends Getter<FooterProps>>(headerId: string, userProps?: TGetter) => undefined | PropGetterValue<FooterProps, TGetter>;
    getTotalWidth: () => number;
};
export declare const Headers: {
    createRow: <TGenerics extends AnyGenerics>(row: Row<TGenerics>, instance: TableInstance<TGenerics>) => HeadersRow<TGenerics>;
    getInstance: <TGenerics_1 extends AnyGenerics>(instance: TableInstance<TGenerics_1>) => HeadersInstance<TGenerics_1>;
};
export declare function buildHeaderGroups<TGenerics extends AnyGenerics>(allColumns: Column<TGenerics>[], columnsToGroup: Column<TGenerics>[], instance: TableInstance<TGenerics>, headerFamily?: 'center' | 'left' | 'right'): HeaderGroup<TGenerics>[];

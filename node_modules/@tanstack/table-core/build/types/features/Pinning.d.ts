import { OnChangeFn, Updater, TableInstance, Column, AnyGenerics } from '../types';
declare type ColumnPinningPosition = false | 'left' | 'right';
export declare type ColumnPinningState = {
    left?: string[];
    right?: string[];
};
export declare type ColumnPinningTableState = {
    columnPinning: ColumnPinningState;
};
export declare type ColumnPinningOptions = {
    onColumnPinningChange?: OnChangeFn<ColumnPinningState>;
    enablePinning?: boolean;
};
export declare type ColumnPinningDefaultOptions = {
    onColumnPinningChange: OnChangeFn<ColumnPinningState>;
};
export declare type ColumnPinningColumnDef = {
    enablePinning?: boolean;
    defaultCanPin?: boolean;
};
export declare type ColumnPinningColumn = {
    getCanPin: () => boolean;
    getPinnedIndex: () => number;
    getIsPinned: () => ColumnPinningPosition;
    pin: (position: ColumnPinningPosition) => void;
};
export declare type ColumnPinningInstance<TGenerics extends AnyGenerics> = {
    setColumnPinning: (updater: Updater<ColumnPinningState>) => void;
    resetColumnPinning: () => void;
    pinColumn: (columnId: string, position: ColumnPinningPosition) => void;
    getColumnCanPin: (columnId: string) => boolean;
    getColumnIsPinned: (columnId: string) => ColumnPinningPosition;
    getColumnPinnedIndex: (columnId: string) => number;
    getIsSomeColumnsPinned: () => boolean;
};
export declare const Pinning: {
    getInitialState: () => ColumnPinningTableState;
    getDefaultOptions: <TGenerics extends AnyGenerics>(instance: TableInstance<TGenerics>) => ColumnPinningDefaultOptions;
    createColumn: <TGenerics_1 extends AnyGenerics>(column: Column<TGenerics_1>, instance: TableInstance<TGenerics_1>) => ColumnPinningColumn;
    getInstance: <TGenerics_2 extends AnyGenerics>(instance: TableInstance<TGenerics_2>) => ColumnPinningInstance<TGenerics_2>;
};
export {};

import { RowModel } from '..';
import { BuiltInFilterType } from '../filterTypes';
import { Column, OnChangeFn, AnyGenerics, TableInstance, Row, Updater } from '../types';
import { Overwrite } from '../utils';
export declare type ColumnFilter = {
    id: string;
    value: unknown;
};
export declare type ColumnFiltersState = ColumnFilter[];
export declare type FilterFn<TGenerics extends AnyGenerics> = {
    (rows: Row<TGenerics>[], columnIds: string[], filterValue: any): any;
    autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>;
};
export declare type ColumnFilterAutoRemoveTestFn<TGenerics extends AnyGenerics> = (value: unknown, column?: Column<TGenerics>) => boolean;
export declare type CustomFilterTypes<TGenerics extends AnyGenerics> = Record<string, FilterFn<TGenerics>>;
export declare type FiltersTableState = {
    columnFilters: ColumnFiltersState;
    globalFilter: any;
};
export declare type FilterType<TGenerics extends AnyGenerics> = 'auto' | BuiltInFilterType | TGenerics['FilterFns'] | FilterFn<TGenerics>;
export declare type FiltersColumnDef<TGenerics extends AnyGenerics> = {
    filterType?: FilterType<Overwrite<TGenerics, {
        Value: any;
    }>>;
    enableAllFilters?: boolean;
    enableColumnFilter?: boolean;
    enableGlobalFilter?: boolean;
    defaultCanFilter?: boolean;
    defaultCanColumnFilter?: boolean;
    defaultCanGlobalFilter?: boolean;
};
export declare type FiltersColumn<TGenerics extends AnyGenerics> = {
    filterType: FilterType<Overwrite<TGenerics, {
        Value: any;
    }>>;
    getCanColumnFilter: () => boolean;
    getCanGlobalFilter: () => boolean;
    getColumnFilterIndex: () => number;
    getIsColumnFiltered: () => boolean;
    getColumnFilterValue: () => unknown;
    setColumnFilterValue: (value: any) => void;
    getPreFilteredRows: () => Row<TGenerics>[] | undefined;
    getPreFilteredUniqueValues: () => Map<any, number>;
    getPreFilteredMinMaxValues: () => [any, any];
};
export declare type FiltersOptions<TGenerics extends AnyGenerics> = {
    filterFromLeafRows?: boolean;
    filterTypes?: TGenerics['FilterFns'];
    enableFilters?: boolean;
    onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>;
    autoResetColumnFilters?: boolean;
    enableColumnFilters?: boolean;
    columnFilterRowsFn?: (instance: TableInstance<TGenerics>, coreRowModel: RowModel<TGenerics>) => RowModel<TGenerics>;
    globalFilterType?: FilterType<TGenerics>;
    onGlobalFilterChange?: OnChangeFn<any>;
    enableGlobalFilters?: boolean;
    autoResetGlobalFilter?: boolean;
    enableGlobalFilter?: boolean;
    globalFilterRowsFn?: (instance: TableInstance<TGenerics>, rowModel: RowModel<TGenerics>) => RowModel<TGenerics>;
    getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean;
};
export declare type FiltersInstance<TGenerics extends AnyGenerics> = {
    _notifyFiltersReset: () => void;
    getColumnAutoFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined;
    getColumnFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined;
    setColumnFilters: (updater: Updater<ColumnFiltersState>) => void;
    setColumnFilterValue: (columnId: string, value: any) => void;
    resetColumnFilters: () => void;
    getColumnCanColumnFilter: (columnId: string) => boolean;
    getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean;
    getColumnIsFiltered: (columnId: string) => boolean;
    getColumnFilterValue: (columnId: string) => unknown;
    getColumnFilterIndex: (columnId: string) => number;
    getPreFilteredRowModel: () => RowModel<TGenerics>;
    getPreColumnFilteredRowModel: () => RowModel<TGenerics>;
    getColumnFilteredRowModel: () => RowModel<TGenerics>;
    setGlobalFilter: (updater: Updater<any>) => void;
    resetGlobalFilter: () => void;
    getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined;
    getGlobalFilterFn: () => FilterFn<TGenerics> | undefined;
    getColumnCanGlobalFilter: (columnId: string) => boolean;
    getPreGlobalFilteredRowModel: () => RowModel<TGenerics>;
    getGlobalFilteredRowModel: () => RowModel<TGenerics>;
};
export declare const Filters: {
    getDefaultColumn: <TGenerics extends AnyGenerics>() => FiltersColumnDef<TGenerics>;
    getInitialState: () => FiltersTableState;
    getDefaultOptions: <TGenerics_1 extends AnyGenerics>(instance: TableInstance<TGenerics_1>) => FiltersOptions<TGenerics_1>;
    createColumn: <TGenerics_2 extends AnyGenerics>(column: Column<TGenerics_2>, instance: TableInstance<TGenerics_2>) => FiltersColumn<TGenerics_2>;
    getInstance: <TGenerics_3 extends AnyGenerics>(instance: TableInstance<TGenerics_3>) => FiltersInstance<TGenerics_3>;
};
export declare function shouldAutoRemoveFilter<TGenerics extends AnyGenerics>(filterFn?: FilterFn<TGenerics>, value?: any, column?: Column<TGenerics>): boolean;

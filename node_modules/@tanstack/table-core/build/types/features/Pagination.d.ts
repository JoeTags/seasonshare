import { OnChangeFn, AnyGenerics, TableInstance, RowModel, Updater } from '../types';
export declare type PaginationState = {
    pageIndex: number;
    pageSize: number;
    pageCount: number;
};
export declare type PaginationTableState = {
    pagination: PaginationState;
};
export declare type PaginationOptions<TGenerics extends AnyGenerics> = {
    onPaginationChange?: OnChangeFn<PaginationState>;
    autoResetPageIndex?: boolean;
    paginateRowsFn?: (instance: TableInstance<TGenerics>, rowModel: RowModel<TGenerics>) => RowModel<TGenerics>;
};
export declare type PaginationDefaultOptions = {
    onPaginationChange: OnChangeFn<PaginationState>;
    autoResetPageIndex: boolean;
};
export declare type PaginationInstance<TGenerics extends AnyGenerics> = {
    _notifyPageIndexReset: () => void;
    setPagination: (updater: Updater<PaginationState>) => void;
    resetPagination: () => void;
    setPageIndex: (updater: Updater<number>) => void;
    resetPageIndex: () => void;
    setPageSize: (updater: Updater<number>) => void;
    resetPageSize: () => void;
    setPageCount: (updater: Updater<number>) => void;
    getPageOptions: () => number[];
    getCanPreviousPage: () => boolean;
    getCanNextPage: () => boolean;
    previousPage: () => void;
    nextPage: () => void;
    getPrePaginationRowModel: () => RowModel<TGenerics>;
    getPaginationRowModel: () => RowModel<TGenerics>;
    getPageCount: () => number;
};
export declare const Pagination: {
    getInitialState: () => PaginationTableState;
    getDefaultOptions: <TGenerics extends AnyGenerics>(instance: TableInstance<TGenerics>) => PaginationDefaultOptions;
    getInstance: <TGenerics_1 extends AnyGenerics>(instance: TableInstance<TGenerics_1>) => PaginationInstance<TGenerics_1>;
};

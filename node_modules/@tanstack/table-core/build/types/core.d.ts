import { RequiredKeys } from './utils';
import { Updater, PropGetterValue, Options, TableState, ColumnDef, Row, Column, Cell, Header, AccessorFn, TableProps, TableBodyProps, PropGetter, Getter, RowProps, CellProps, TableInstance, RowValues, Renderable, UseRenderer, RowModel, AnyGenerics } from './types';
export declare type CoreOptions<TGenerics extends AnyGenerics> = {
    data: TGenerics['Row'][];
    columns: ColumnDef<TGenerics>[];
    state: Partial<TableState>;
    onStateChange: (updater: Updater<TableState>) => void;
    render: TGenerics['Render'];
    debugAll?: boolean;
    debugTable?: boolean;
    debugHeaders?: boolean;
    debugColumns?: boolean;
    debugRows?: boolean;
    defaultColumn?: Partial<ColumnDef<TGenerics>>;
    initialState?: Partial<TableState>;
    getSubRows?: (originalRow: TGenerics['Row'], index: number) => TGenerics['Row'][];
    getRowId?: (originalRow: TGenerics['Row'], index: number, parent?: Row<TGenerics>) => string;
    autoResetAll?: boolean;
};
export declare type TableCore<TGenerics extends AnyGenerics> = {
    initialState: TableState;
    reset: () => void;
    options: RequiredKeys<Options<TGenerics>, 'state'>;
    setOptions: (newOptions: Updater<Options<TGenerics>>) => void;
    getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) => string;
    getState: () => TableState;
    setState: (updater: Updater<TableState>) => void;
    getDefaultColumn: () => Partial<ColumnDef<TGenerics>>;
    getColumnDefs: () => ColumnDef<TGenerics>[];
    createColumn: (columnDef: ColumnDef<TGenerics>, depth: number, parent?: Column<TGenerics>) => Column<TGenerics>;
    getAllColumns: () => Column<TGenerics>[];
    getAllFlatColumns: () => Column<TGenerics>[];
    getAllFlatColumnsById: () => Record<string, Column<TGenerics>>;
    getAllLeafColumns: () => Column<TGenerics>[];
    getColumn: (columnId: string) => Column<TGenerics>;
    getTotalWidth: () => number;
    createCell: (row: Row<TGenerics>, column: Column<TGenerics>, value: any) => Cell<TGenerics>;
    createRow: (id: string, original: TGenerics['Row'] | undefined, rowIndex: number, depth: number, values: Record<string, any>) => Row<TGenerics>;
    getCoreRowModel: () => RowModel<TGenerics>;
    getRowModel: () => RowModel<TGenerics>;
    getRow: (id: string) => Row<TGenerics>;
    getCell: (rowId: string, columnId: string) => Cell<TGenerics>;
    getTableProps: PropGetter<TableProps>;
    getTableBodyProps: PropGetter<TableBodyProps>;
    getRowProps: <TGetter extends Getter<RowProps>>(rowId: string, userProps?: TGetter) => undefined | PropGetterValue<RowProps, TGetter>;
    getCellProps: <TGetter extends Getter<CellProps>>(rowId: string, columnId: string, userProps?: TGetter) => undefined | PropGetterValue<CellProps, TGetter>;
    getTableWidth: () => number;
    getLeftTableWidth: () => number;
    getCenterTableWidth: () => number;
    getRightTableWidth: () => number;
    render: <TProps>(template: Renderable<TGenerics, TProps>, props: TProps) => string | null | ReturnType<UseRenderer<TGenerics>>;
};
export declare type CoreRow<TGenerics extends AnyGenerics> = {
    id: string;
    index: number;
    original?: TGenerics['Row'];
    depth: number;
    values: RowValues;
    subRows: Row<TGenerics>[];
    getLeafRows: () => Row<TGenerics>[];
    getRowProps: PropGetter<RowProps>;
    originalSubRows?: TGenerics['Row'][];
    getAllCells: () => Cell<TGenerics>[];
    getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>;
};
export declare type CoreColumnDef<TGenerics extends AnyGenerics> = {
    id: string;
    accessorKey?: string & keyof TGenerics['Row'];
    accessorFn?: AccessorFn<TGenerics['Row']>;
    columns?: ColumnDef<TGenerics>[];
    header?: Renderable<TGenerics, {
        instance: TableInstance<TGenerics>;
        header: Header<TGenerics>;
        column: Column<TGenerics>;
    }>;
    footer?: Renderable<TGenerics, {
        instance: TableInstance<TGenerics>;
        header: Header<TGenerics>;
        column: Column<TGenerics>;
    }>;
    cell?: Renderable<TGenerics, {
        instance: TableInstance<TGenerics>;
        row: Row<TGenerics>;
        column: Column<TGenerics>;
        cell: Cell<TGenerics>;
        value: TGenerics['Value'];
    }>;
    meta?: TGenerics['ColumnMeta'];
};
export declare type CoreColumnDefType = 'data' | 'display' | 'group';
export declare type CoreColumn<TGenerics extends AnyGenerics> = {
    id: string;
    depth: number;
    accessorFn?: AccessorFn<TGenerics['Row']>;
    columnDef: ColumnDef<TGenerics>;
    columnDefType: CoreColumnDefType;
    getWidth: () => number;
    columns: Column<TGenerics>[];
    parent?: Column<TGenerics>;
    getFlatColumns: () => Column<TGenerics>[];
    getLeafColumns: () => Column<TGenerics>[];
};
export declare function createTableInstance<TGenerics extends AnyGenerics>(options: Options<TGenerics>): TableInstance<TGenerics>;

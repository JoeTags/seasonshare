{"version":3,"file":"index.development.js","sources":["../../src/utils.tsx","../../src/features/ColumnSizing.ts","../../src/features/Expanding.ts","../../src/filterTypes.ts","../../src/features/Filters.ts","../../src/aggregationTypes.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pagination.ts","../../src/features/Pinning.ts","../../src/features/RowSelection.ts","../../src/sortTypes.ts","../../src/features/Sorting.ts","../../src/features/Visibility.ts","../../src/features/Headers.ts","../../src/core.tsx","../../src/createTable.tsx","../../src/utils/filterRowsUtils.ts","../../src/utils/columnFilterRowsFn.ts","../../src/utils/globalFilterRowsFn.ts","../../src/utils/sortRowsFn.ts","../../src/utils/groupRowsFn.ts","../../src/utils/expandRowsFn.ts","../../src/utils/paginateRowsFn.ts"],"sourcesContent":["import { Getter, NoInfer, PropGetterValue, TableState, Updater } from './types'\n\nexport type IsAny<T> = 0 extends 1 & T ? true : false\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type DataUpdateFunction<T> = (input: T) => T\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<T>)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, instance: unknown) {\n  return (updater: Updater<any>) => {\n    ;(instance as any).setState(<TTableState,>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\ntype PropGetterImpl = <TBaseProps, TGetter extends Getter<TBaseProps>>(\n  initial: TBaseProps,\n  userProps?: TGetter\n) => PropGetterValue<TBaseProps, TGetter>\n\n// @ts-ignore // Just rely on the type, not the implementation\nexport const propGetter: PropGetterImpl = (initial, getter) => {\n  if (isFunction(getter)) {\n    return getter(initial)\n  }\n\n  return {\n    ...initial,\n    ...(getter ?? {}),\n  }\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: string\n    debug?: () => any\n    onChange?: (result: TResult, previousResult?: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = performance.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (depsChanged) {\n      let oldResult = result\n      let resultTime: number\n      if (opts.key && opts.debug) resultTime = performance.now()\n      result = fn(...newDeps)\n      deps = newDeps\n      opts?.onChange?.(result, oldResult)\n\n      if (opts.key && opts.debug) {\n        if (opts?.debug()) {\n          const depEndTime =\n            Math.round((performance.now() - depTime!) * 100) / 100\n          const resultEndTime =\n            Math.round((performance.now() - resultTime!) * 100) / 100\n          const resultFpsPercentage = resultEndTime / 16\n\n          const pad = (str: number | string, num: number) => {\n            str = String(str)\n            while (str.length < num) {\n              str = ' ' + str\n            }\n            return str\n          }\n\n          console.info(\n            `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n            `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n            opts?.key,\n            {\n              length: `${deps.length} -> ${newDeps.length}`,\n              ...newDeps\n                .map((_, index) => {\n                  if (deps[index] !== newDeps[index]) {\n                    return [index, deps[index], newDeps[index]]\n                  }\n\n                  return false\n                })\n                .filter(Boolean)\n                .reduce(\n                  (accu, [a, b]: any) => ({\n                    ...accu,\n                    [a]: b,\n                  }),\n                  {}\n                ),\n              parent,\n            }\n          )\n        }\n      }\n\n      oldResult = undefined\n    }\n\n    return result!\n  }\n}\n\n// export function hashString(str: string, seed = 0): string {\n//   let h1 = 0xdeadbeef ^ seed,\n//     h2 = 0x41c6ce57 ^ seed\n//   for (let i = 0, ch; i < str.length; i++) {\n//     ch = str.charCodeAt(i)\n//     h1 = Math.imul(h1 ^ ch, 2654435761)\n//     h2 = Math.imul(h2 ^ ch, 1597334677)\n//   }\n//   h1 =\n//     Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\n//     Math.imul(h2 ^ (h2 >>> 13), 3266489909)\n//   h2 =\n//     Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\n//     Math.imul(h1 ^ (h1 >>> 13), 3266489909)\n//   return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString()\n// }\n","import {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\n//\n\nexport type ColumnSizing = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizing\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnResizerProps = {\n  title?: string\n  onMouseDown?: (e: MouseEvent) => void\n  onTouchStart?: (e: TouchEvent) => void\n  draggable?: boolean\n  role?: string\n}\n\nexport type ColumnSizingInstance<TGenerics extends AnyGenerics> = {\n  getColumnWidth: (columnId: string) => number\n  setColumnSizing: (updater: Updater<ColumnSizing>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: () => void\n  resetColumnSize: (columnId: string) => void\n  resetHeaderSize: (headerId: string) => void\n  resetHeaderSizeInfo: () => void\n  getColumnCanResize: (columnId: string) => boolean\n  getHeaderCanResize: (headerId: string) => boolean\n  getHeaderResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  getColumnIsResizing: (columnId: string) => boolean\n  getHeaderIsResizing: (headerId: string) => boolean\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  defaultCanResize?: boolean\n  width?: number\n  minWidth?: number\n  maxWidth?: number\n}\n\nexport type ColumnSizingColumn<TGenerics extends AnyGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends AnyGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  getResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  resetSize: () => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  width: 150,\n  minWidth: 20,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport const ColumnSizing = {\n  getDefaultColumn: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: {\n        startOffset: null,\n        startSize: null,\n        deltaOffset: null,\n        deltaPercentage: null,\n        isResizingColumn: false,\n        columnSizingStart: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      getColumnWidth: (columnId: string) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const columnSize = instance.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.minWidth ?? defaultColumnSizing.minWidth,\n            columnSize ?? column.width ?? defaultColumnSizing.width\n          ),\n          column.maxWidth ?? defaultColumnSizing.maxWidth\n        )\n      },\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizing)\n        ),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizingInfo)\n        ),\n      resetColumnSizing: () => {\n        instance.setColumnSizing(instance.initialState.columnSizing ?? {})\n      },\n      resetHeaderSizeInfo: () => {\n        instance.setColumnSizingInfo(\n          instance.initialState.columnSizingInfo ?? {}\n        )\n      },\n      resetColumnSize: columnId => {\n        instance.setColumnSizing(({ [columnId]: _, ...rest }) => {\n          return rest\n        })\n      },\n      resetHeaderSize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        return instance.resetColumnSize(header.column.id)\n      },\n      getHeaderCanResize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnCanResize(header.column.id)\n      },\n      getColumnCanResize: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableResizing ??\n          instance.options.enableColumnResizing ??\n          column.defaultCanResize ??\n          true\n        )\n      },\n      getColumnIsResizing: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === columnId\n        )\n      },\n      getHeaderIsResizing: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnIsResizing(header.column.id)\n      },\n\n      getHeaderResizerProps: (headerId, userProps) => {\n        const header = instance.getHeader(headerId)\n        const column = instance.getColumn(header.column.id)\n\n        const canResize = column.getCanResize()\n\n        const onResizeStart = (e: MouseEvent | TouchEvent) => {\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const header = headerId ? instance.getHeader(headerId) : undefined\n\n          const startSize = header ? header.getWidth() : column.getWidth()\n\n          const columnSizingStart: [string, number][] = header\n            ? header.getLeafHeaders().map(d => [d.column.id, d.getWidth()])\n            : [[column.id, column.getWidth()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0].clientX)\n            : e.clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizing = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerWidth]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerWidth + headerWidth * deltaPercentage, 0) *\n                      100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0].clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0].clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n\n        const initialProps: ColumnResizerProps = canResize\n          ? {\n              title: 'Toggle Grouping',\n              draggable: false,\n              role: 'separator',\n              onMouseDown: (e: MouseEvent & { persist?: () => void }) => {\n                e.persist?.()\n                onResizeStart(e)\n              },\n              onTouchStart: (e: TouchEvent & { persist?: () => void }) => {\n                e.persist?.()\n                onResizeStart(e)\n              },\n            }\n          : {}\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(column.id),\n      getCanResize: () => instance.getColumnCanResize(column.id),\n      resetSize: () => instance.resetColumnSize(column.id),\n    }\n  },\n\n  createHeader: <TGenerics extends AnyGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(header.column.id),\n      getCanResize: () => instance.getColumnCanResize(header.column.id),\n      resetSize: () => instance.resetColumnSize(header.column.id),\n      getResizerProps: userProps =>\n        instance.getHeaderResizerProps(header.id, userProps),\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: TouchEvent | MouseEvent): e is TouchEvent {\n  return e.type === 'touchstart'\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport {\n  Getter,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n}\n\nexport type ExpandedOptions<TGenerics extends AnyGenerics> = {\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanded?: boolean\n  expandRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  expandSubRows?: boolean\n  defaultCanExpand?: boolean\n  getIsRowExpanded?: (row: Row<TGenerics>) => boolean\n  getRowCanExpand?: (row: Row<TGenerics>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ToggleExpandedProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type ExpandedInstance<TGenerics extends AnyGenerics> = {\n  _notifyExpandedReset: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleRowExpanded: (rowId: string, expanded?: boolean) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: () => void\n  getRowCanExpand: (rowId: string) => boolean\n  getIsRowExpanded: (rowId: string) => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getToggleAllRowsExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TGenerics>\n  getPreExpandedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Expanding = {\n  getInitialState: (): ExpandedTableState => {\n    return {\n      expanded: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedOptions<TGenerics> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', instance),\n      autoResetExpanded: true,\n      expandSubRows: true,\n      paginateExpandedRows: true,\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyExpandedReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetExpanded\n        ) {\n          instance.resetExpanded()\n        }\n      },\n      setExpanded: updater =>\n        instance.options.onExpandedChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().expanded)\n        ),\n      toggleRowExpanded: (rowId, expanded) => {\n        if (!rowId) return\n\n        instance.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[rowId]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(instance.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [rowId]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [rowId]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !instance.getIsAllRowsExpanded()) {\n          instance.setExpanded(true)\n        } else {\n          instance.setExpanded({})\n        }\n      },\n      resetExpanded: () => {\n        instance.setExpanded(instance.initialState?.expanded ?? {})\n      },\n      getIsRowExpanded: rowId => {\n        const row = instance.getPreExpandedRowModel().rowsById[rowId]\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `[Table] getIsRowExpanded: no row found with id ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        const expanded = instance.getState().expanded\n\n        return !!(\n          instance.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[rowId])\n        )\n      },\n      getRowCanExpand: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `[Table] getRowCanExpand: no row found with id ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        return (\n          instance.options.getRowCanExpand?.(row) ??\n          instance.options.enableExpanded ??\n          instance.options.defaultCanExpand ??\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedProps: (rowId, userProps) => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          return\n        }\n\n        const canExpand = instance.getRowCanExpand(rowId)\n\n        const initialProps: ToggleExpandedProps = {\n          title: canExpand ? 'Toggle Expanded' : undefined,\n          onClick: canExpand\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                instance.toggleRowExpanded(rowId)\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n      getToggleAllRowsExpandedProps: userProps => {\n        const initialProps: ToggleExpandedProps = {\n          title: 'Toggle All Expanded',\n          onClick: (e: MouseEvent | TouchEvent) => {\n            e.persist()\n            instance.toggleAllRowsExpanded()\n          },\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (expanded === true) {\n          return true\n        }\n\n        // If any row is not expanded, return false\n        if (\n          Object.keys(instance.getRowModel().rowsById).some(\n            id => !instance.getIsRowExpanded(id)\n          )\n        ) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          instance.getState().expanded === true\n            ? Object.keys(instance.getRowModel().rowsById)\n            : Object.keys(instance.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getExpandedRowModel: memo(\n        () => [\n          instance.getState().expanded,\n          instance.getGroupedRowModel(),\n          instance.options.expandRowsFn,\n          instance.options.paginateExpandedRows,\n        ],\n        (expanded, rowModel, expandRowsFn, paginateExpandedRows) => {\n          if (\n            !expandRowsFn ||\n            // Do not expand if rows are not included in pagination\n            !paginateExpandedRows ||\n            (expanded !== true && !Object.keys(expanded ?? {}).length)\n          ) {\n            return rowModel\n          }\n\n          return expandRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getExpandedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getPreExpandedRowModel: () => instance.getGroupedRowModel(),\n    }\n  },\n\n  createRow: <TGenerics extends AnyGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded =>\n        void instance.toggleRowExpanded(row.id, expanded),\n      getIsExpanded: () => instance.getIsRowExpanded(row.id),\n      getCanExpand: () => row.subRows && !!row.subRows.length,\n      getToggleExpandedProps: userProps =>\n        instance.getToggleExpandedProps(row.id, userProps),\n    }\n  },\n}\n","import { PartialGenerics, AnyGenerics, Row } from './types'\n\nexport const filterTypes = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  equalsStringSensitive,\n  arrIncludes,\n  arrIncludesAll,\n  equals,\n  weakEquals,\n  betweenNumberRange,\n}\n\nexport type BuiltInFilterType = keyof typeof filterTypes\n\nfunction includesString<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).toLowerCase().includes(search)\n    })\n  })\n  return rows\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nfunction includesStringSensitive<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).includes(search)\n    })\n  })\n  return rows\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsString<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === search\n        : true\n    })\n  })\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsStringSensitive<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined ? String(rowValue) === search : true\n    })\n  })\n}\n\nequalsStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction arrIncludes<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction arrIncludesAll<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown[]\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction equals<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nfunction weakEquals<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nfunction betweenNumberRange<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: [unknown, unknown]\n) {\n  let [unsafeMin, unsafeMax] = filterValue || []\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetweenNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { BuiltInFilterType, filterTypes } from '../filterTypes'\nimport {\n  Column,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type FilterFn<TGenerics extends AnyGenerics> = {\n  (rows: Row<TGenerics>[], columnIds: string[], filterValue: any): any\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends AnyGenerics> = (\n  value: unknown,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterTypes<TGenerics extends AnyGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type FilterType<TGenerics extends AnyGenerics> =\n  | 'auto'\n  | BuiltInFilterType\n  | TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends AnyGenerics> = {\n  filterType?: FilterType<Overwrite<TGenerics, { Value: any }>>\n  enableAllFilters?: boolean\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  defaultCanFilter?: boolean\n  defaultCanColumnFilter?: boolean\n  defaultCanGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends AnyGenerics> = {\n  filterType: FilterType<Overwrite<TGenerics, { Value: any }>>\n  getCanColumnFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getColumnFilterIndex: () => number\n  getIsColumnFiltered: () => boolean\n  getColumnFilterValue: () => unknown\n  setColumnFilterValue: (value: any) => void\n  getPreFilteredRows: () => Row<TGenerics>[] | undefined\n  getPreFilteredUniqueValues: () => Map<any, number>\n  getPreFilteredMinMaxValues: () => [any, any]\n}\n\nexport type FiltersOptions<TGenerics extends AnyGenerics> = {\n  filterFromLeafRows?: boolean\n  filterTypes?: TGenerics['FilterFns']\n  enableFilters?: boolean\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  autoResetColumnFilters?: boolean\n  enableColumnFilters?: boolean\n  columnFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    coreRowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  // Global\n  globalFilterType?: FilterType<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilters?: boolean\n  autoResetGlobalFilter?: boolean\n  enableGlobalFilter?: boolean\n  globalFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n}\n\nexport type FiltersInstance<TGenerics extends AnyGenerics> = {\n  _notifyFiltersReset: () => void\n  getColumnAutoFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  getColumnFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  setColumnFilterValue: (columnId: string, value: any) => void\n  resetColumnFilters: () => void\n  getColumnCanColumnFilter: (columnId: string) => boolean\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n\n  getColumnIsFiltered: (columnId: string) => boolean\n  getColumnFilterValue: (columnId: string) => unknown\n  getColumnFilterIndex: (columnId: string) => number\n\n  // All\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n\n  // Column Filters\n  getPreColumnFilteredRowModel: () => RowModel<TGenerics>\n  getColumnFilteredRowModel: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: () => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getColumnCanGlobalFilter: (columnId: string) => boolean\n  getPreGlobalFilteredRowModel: () => RowModel<TGenerics>\n  getGlobalFilteredRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Filters = {\n  getDefaultColumn: <\n    TGenerics extends AnyGenerics\n  >(): FiltersColumnDef<TGenerics> => {\n    return {\n      filterType: 'auto',\n    }\n  },\n\n  getInitialState: (): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      autoResetColumnFilters: true,\n      filterFromLeafRows: true,\n      autoResetGlobalFilter: true,\n      globalFilterType: 'auto',\n      getColumnCanGlobalFilterFn: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?.getAllCellsByColumnId()[column.id]?.value\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    const getFacetInfo = memo(\n      () => [column.getPreFilteredRows()],\n      (rows = []) => {\n        let preFilteredUniqueValues = new Map<any, number>()\n\n        let preFilteredMinMaxValues: [any, any] = [\n          rows[0]?.values[column.id] ?? null,\n          rows[0]?.values[column.id] ?? null,\n        ]\n\n        for (let i = 0; i < rows.length; i++) {\n          const value = rows[i]?.values[column.id]\n\n          if (preFilteredUniqueValues.has(value)) {\n            preFilteredUniqueValues.set(\n              value,\n              (preFilteredUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            preFilteredUniqueValues.set(value, 1)\n          }\n\n          if (value < preFilteredMinMaxValues[0]) {\n            preFilteredMinMaxValues[0] = value\n          } else if (value > preFilteredMinMaxValues[1]) {\n            preFilteredMinMaxValues[1] = value\n          }\n        }\n\n        return {\n          preFilteredUniqueValues,\n          preFilteredMinMaxValues,\n        }\n      },\n      {\n        key: 'column.getFacetInfo',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    )\n\n    return {\n      filterType: column.filterType,\n      getCanColumnFilter: () => instance.getColumnCanColumnFilter(column.id),\n      getCanGlobalFilter: () => instance.getColumnCanGlobalFilter(column.id),\n      getColumnFilterIndex: () => instance.getColumnFilterIndex(column.id),\n      getIsColumnFiltered: () => instance.getColumnIsFiltered(column.id),\n      getColumnFilterValue: () => instance.getColumnFilterValue(column.id),\n      setColumnFilterValue: val =>\n        instance.setColumnFilterValue(column.id, val),\n      getPreFilteredUniqueValues: () => getFacetInfo().preFilteredUniqueValues,\n      getPreFilteredMinMaxValues: () => getFacetInfo().preFilteredMinMaxValues,\n      getPreFilteredRows: () => undefined,\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyFiltersReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (instance.options.autoResetAll === true) {\n          instance.resetSorting()\n        } else {\n          if (instance.options.autoResetColumnFilters) {\n            instance.resetColumnFilters()\n          }\n          if (instance.options.autoResetGlobalFilter) {\n            instance.resetGlobalFilter()\n          }\n        }\n      },\n      getColumnAutoFilterFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return filterTypes.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterTypes.betweenNumberRange\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterTypes.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterTypes.arrIncludes\n        }\n\n        return filterTypes.weakEquals\n      },\n      getGlobalAutoFilterFn: () => {\n        return filterTypes.includesString\n      },\n      getColumnFilterFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userFilterTypes = instance.options.filterTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.filterType)\n          ? column.filterType\n          : column.filterType === 'auto'\n          ? instance.getColumnAutoFilterFn(columnId)\n          : (userFilterTypes as Record<string, any>)?.[\n              column.filterType as string\n            ] ??\n            (filterTypes[\n              column.filterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterTypes: userFilterTypes, globalFilterType } =\n          instance.options\n\n        return isFunction(globalFilterType)\n          ? globalFilterType\n          : globalFilterType === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterTypes as Record<string, any>)?.[\n              globalFilterType as string\n            ] ??\n            (filterTypes[\n              globalFilterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = instance.getColumnFilterFn(column.id)\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(\n          updateFn,\n          updateFn(instance.getState().columnFilters)\n        )\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().globalFilter)\n        )\n      },\n\n      resetGlobalFilter: () => {\n        instance.setGlobalFilter(undefined)\n      },\n\n      getColumnCanColumnFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableAllFilters ??\n          column.enableColumnFilter ??\n          instance.options.enableFilters ??\n          instance.options.enableColumnFilters ??\n          column.defaultCanFilter ??\n          column.defaultCanColumnFilter ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnCanGlobalFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          ((instance.options.enableFilters ??\n            instance.options.enableGlobalFilter ??\n            column.enableAllFilters ??\n            column.enableGlobalFilter ??\n            column.defaultCanFilter ??\n            column.defaultCanGlobalFilter ??\n            !!column.accessorFn) &&\n            instance.options.getColumnCanGlobalFilterFn?.(column)) ??\n          true\n        )\n      },\n\n      getColumnIsFiltered: columnId =>\n        instance.getColumnFilterIndex(columnId) > -1,\n\n      getColumnFilterValue: columnId =>\n        instance.getState().columnFilters?.find(d => d.id === columnId)?.value,\n\n      getColumnFilterIndex: columnId =>\n        instance.getState().columnFilters?.findIndex(d => d.id === columnId) ??\n        -1,\n\n      setColumnFilterValue: (columnId, value) => {\n        if (!columnId) return\n\n        instance.setColumnFilters(old => {\n          const column = instance.getColumn(columnId)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Table: Could not find a column with id: ${columnId}`\n              )\n            }\n            throw new Error()\n          }\n\n          const filterFn = instance.getColumnFilterFn(column.id)\n          const previousfilter = old?.find(d => d.id === columnId)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== columnId) ?? []\n          }\n\n          const newFilterObj = { id: columnId, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === columnId) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n\n      resetColumnFilters: () => {\n        instance.setColumnFilters(instance.initialState?.columnFilters ?? [])\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      getPreColumnFilteredRowModel: () => instance.getCoreRowModel(),\n      getColumnFilteredRowModel: memo(\n        () => [\n          instance.getState().columnFilters,\n          instance.getCoreRowModel(),\n          instance.options.columnFilterRowsFn,\n        ],\n        (columnFilters, rowModel, columnFiltersFn) => {\n          const columnFilteredRowModel = (() => {\n            if (!columnFilters?.length || !columnFiltersFn) {\n              return rowModel\n            }\n\n            return columnFiltersFn(instance as any, rowModel)\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => columnFilteredRowModel.rows\n          })\n\n          return columnFilteredRowModel\n        },\n        {\n          key: 'getColumnFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n      getPreGlobalFilteredRowModel: () => instance.getColumnFilteredRowModel(),\n      getGlobalFilteredRowModel: memo(\n        () => [\n          instance.getState().globalFilter,\n          instance.getColumnFilteredRowModel(),\n          instance.options.globalFilterRowsFn,\n        ],\n        (globalFilterValue, columnFilteredRowModel, globalFiltersFn) => {\n          const globalFilteredRowModel = (() => {\n            if (!globalFiltersFn || !globalFilterValue) {\n              return columnFilteredRowModel\n            }\n\n            return globalFiltersFn(\n              instance as TableInstance<TGenerics>,\n              columnFilteredRowModel\n            )\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => globalFilteredRowModel.rows\n          })\n\n          return globalFilteredRowModel\n        },\n        {\n          key: 'getGlobalFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifySortingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends AnyGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","export const aggregationTypes = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationType = keyof typeof aggregationTypes\n\nfunction sum(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return getChildValues().reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let min: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_getLeafValues: () => unknown[], getChildValues: () => unknown[]) {\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(\n  _getLeafValues: () => unknown[],\n  getChildValues: () => unknown[]\n) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of getChildValues() as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nfunction mean(getLeafValues: () => unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of getLeafValues() as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(getLeafValues: () => unknown[]) {\n  const leafValues = getLeafValues()\n  if (!leafValues.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafValues.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(getLeafValues: () => T[]) {\n  return Array.from(new Set(getLeafValues()).values())\n}\n\nfunction uniqueCount(getLeafValues: () => unknown[]) {\n  return new Set(getLeafValues()).size\n}\n\nfunction count(getLeafValues: () => unknown[]) {\n  return getLeafValues().length\n}\n","import { RowModel } from '..'\nimport { BuiltInAggregationType, aggregationTypes } from '../aggregationTypes'\nimport {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n  PartialGenerics,\n  Renderable,\n  UseRenderer,\n  AnyGenerics,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n  propGetter,\n} from '../utils'\n\nexport type GroupingState = string[]\n\nexport type AggregationFn<TGenerics extends AnyGenerics> = (\n  getLeafValues: () => TGenerics['Row'][],\n  getChildValues: () => TGenerics['Row'][]\n) => any\n\nexport type CustomAggregationTypes<TGenerics extends AnyGenerics> = Record<\n  string,\n  AggregationFn<TGenerics>\n>\n\nexport type AggregationType<TGenerics extends AnyGenerics> =\n  | 'auto'\n  | BuiltInAggregationType\n  | keyof TGenerics['AggregationFns']\n  | AggregationFn<TGenerics>\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type GroupingColumnDef<TGenerics extends AnyGenerics> = {\n  aggregationType?: AggregationType<Overwrite<TGenerics, { Value: any }>>\n  aggregateValue?: (columnValue: unknown) => any\n  aggregatedCell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      value: TGenerics['Value']\n    }\n  >\n  enableGrouping?: boolean\n  defaultCanGroup?: boolean\n}\n\nexport type GroupingColumn<TGenerics extends AnyGenerics> = {\n  aggregationType?: AggregationType<Overwrite<TGenerics, { Value: any }>>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n}\n\nexport type GroupingCell<TGenerics extends AnyGenerics> = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n  renderAggregatedCell: () => string | null | ReturnType<UseRenderer<TGenerics>>\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  autoResetGrouping: boolean\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<TGenerics extends AnyGenerics> = {\n  aggregationTypes?: TGenerics['AggregationFns']\n  onGroupingChange?: OnChangeFn<GroupingState>\n  autoResetGrouping?: boolean\n  enableGrouping?: boolean\n  enableGroupingRemoval?: boolean\n  groupRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type ToggleGroupingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type GroupingInstance<TGenerics extends AnyGenerics> = {\n  _notifyGroupingReset: () => void\n  getColumnAutoAggregationFn: (\n    columnId: string\n  ) => AggregationFn<TGenerics> | undefined\n  getColumnAggregationFn: (\n    columnId: string\n  ) => AggregationFn<TGenerics> | undefined\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: () => void\n  toggleColumnGrouping: (columnId: string) => void\n  getColumnCanGroup: (columnId: string) => boolean\n  getColumnIsGrouped: (columnId: string) => boolean\n  getColumnGroupedIndex: (columnId: string) => number\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n  getRowIsGrouped: (rowId: string) => boolean\n  getPreGroupedRowModel: () => RowModel<TGenerics>\n  getGroupedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Grouping = {\n  getDefaultColumn: <\n    TGenerics extends AnyGenerics\n  >(): GroupingColumnDef<TGenerics> => {\n    return {\n      aggregationType: 'auto',\n    }\n  },\n\n  getInitialState: (): GroupingTableState => {\n    return {\n      grouping: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingOptions<TGenerics> => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', instance),\n      autoResetGrouping: true,\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingColumn<TGenerics> => {\n    return {\n      aggregationType: column.aggregationType,\n      getCanGroup: () => instance.getColumnCanGroup(column.id),\n      getGroupedIndex: () => instance.getColumnGroupedIndex(column.id),\n      getIsGrouped: () => instance.getColumnIsGrouped(column.id),\n      toggleGrouping: () => instance.toggleColumnGrouping(column.id),\n      getToggleGroupingProps: userProps =>\n        instance.getToggleGroupingProps(column.id, userProps),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyGroupingReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetGrouping\n        ) {\n          instance.resetGrouping()\n        }\n      },\n      getColumnAutoAggregationFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'number') {\n          return aggregationTypes.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationTypes.extent\n        }\n\n        return aggregationTypes.count\n      },\n      getColumnAggregationFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userAggregationTypes = instance.options.aggregationTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.aggregationType)\n          ? column.aggregationType\n          : column.aggregationType === 'auto'\n          ? instance.getColumnAutoAggregationFn(columnId)\n          : (userAggregationTypes as Record<string, any>)?.[\n              column.aggregationType as string\n            ] ??\n            (aggregationTypes[\n              column.aggregationType as BuiltInAggregationType\n            ] as AggregationFn<TGenerics>)\n      },\n\n      setGrouping: updater =>\n        instance.options.onGroupingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().grouping)\n        ),\n\n      toggleColumnGrouping: columnId => {\n        instance.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(columnId)) {\n            return old.filter(d => d !== columnId)\n          }\n\n          return [...(old ?? []), columnId]\n        })\n      },\n\n      getColumnCanGroup: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableGrouping ??\n          instance.options.enableGrouping ??\n          column.defaultCanGroup ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnIsGrouped: columnId => {\n        return instance.getState().grouping?.includes(columnId)\n      },\n\n      getColumnGroupedIndex: columnId =>\n        instance.getState().grouping?.indexOf(columnId),\n\n      resetGrouping: () => {\n        instance.setGrouping(instance.initialState?.grouping ?? [])\n      },\n\n      getToggleGroupingProps: (columnId, userProps) => {\n        const column = instance.getColumn(columnId)\n\n        const canGroup = column.getCanGroup()\n\n        const initialProps: ToggleGroupingProps = {\n          title: canGroup ? 'Toggle Grouping' : undefined,\n          onClick: canGroup\n            ? (e: MouseEvent | TouchEvent) => {\n                column.toggleGrouping?.()\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getRowIsGrouped: rowId => !!instance.getRow(rowId)?.groupingColumnId,\n\n      getPreGroupedRowModel: () => instance.getSortedRowModel(),\n      getGroupedRowModel: memo(\n        () => [\n          instance.getState().grouping,\n          instance.getSortedRowModel(),\n          instance.options.groupRowsFn,\n        ],\n        (grouping, rowModel, groupRowsFn) => {\n          if (!groupRowsFn || !grouping.length) {\n            return rowModel\n          }\n\n          return groupRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getGroupedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n    }\n  },\n\n  createRow: <TGenerics extends AnyGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => instance.getRowIsGrouped(row.id),\n    }\n  },\n\n  createCell: <TGenerics extends AnyGenerics>(\n    cell: Cell<TGenerics>,\n    column: Column<TGenerics>,\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingCell<TGenerics> => {\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        row.subRows?.length > 1,\n      renderAggregatedCell: () => {\n        const template = column.aggregatedCell ?? column.cell\n\n        return template\n          ? instance.render(template, {\n              instance,\n              column,\n              row,\n              cell,\n              value: cell.value,\n            })\n          : null\n      },\n    }\n  },\n\n  orderColumns: <TGenerics extends AnyGenerics>(\n    leafColumns: Column<TGenerics>[],\n    grouping: string[],\n    groupedColumnMode?: GroupingColumnMode\n  ) => {\n    if (!grouping?.length || !groupedColumnMode) {\n      return leafColumns\n    }\n\n    const nonGroupingColumns = leafColumns.filter(\n      col => !grouping.includes(col.id)\n    )\n\n    if (groupedColumnMode === 'remove') {\n      return nonGroupingColumns\n    }\n\n    const groupingColumns = grouping\n      .map(g => leafColumns.find(col => col.id === g)!)\n      .filter(Boolean)\n\n    return [...groupingColumns, ...nonGroupingColumns]\n  },\n}\n","import { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  AnyGenerics,\n  PartialGenerics,\n} from '../types'\n\nimport { Grouping } from './Grouping'\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends AnyGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: () => void\n  getOrderColumnsFn: () => (columns: Column<TGenerics>[]) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering = {\n  getInitialState: (): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnOrder)\n        ),\n      resetColumnOrder: () => {\n        instance.setColumnOrder(instance.initialState.columnOrder ?? [])\n      },\n      getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return Grouping.orderColumns(\n            orderedColumns,\n            grouping,\n            groupedColumnMode\n          )\n        },\n        {\n          key: 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationOptions<TGenerics extends AnyGenerics> = {\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  paginateRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n  autoResetPageIndex: boolean\n}\n\nexport type PaginationInstance<TGenerics extends AnyGenerics> = {\n  _notifyPageIndexReset: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: () => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: () => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: () => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nexport const Pagination = {\n  getInitialState: (): PaginationTableState => {\n    return {\n      pagination: {\n        pageCount: -1,\n        pageIndex: 0,\n        pageSize: 10,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n      autoResetPageIndex: true,\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    return {\n      _notifyPageIndexReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetPageIndex\n        ) {\n          instance.resetPageIndex()\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(\n          safeUpdater,\n          functionalUpdate(safeUpdater, instance.getState().pagination)\n        )\n      },\n      resetPagination: () => {\n        instance.setPagination(\n          instance.initialState.pagination ?? {\n            pageIndex: 0,\n            pageSize: 10,\n            pageCount: -1,\n          }\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            old.pageCount && old.pageCount > 0\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: () => {\n        instance.setPageIndex(0)\n      },\n      resetPageSize: () => {\n        instance.setPageSize(instance.initialState?.pagination?.pageSize ?? 10)\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex, pageSize } = instance.getState().pagination\n\n        const pageCount = instance.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return (\n          pageIndex <\n          Math.ceil(\n            instance.getPrePaginationRowModel().rows.length / pageSize\n          ) -\n            1\n        )\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: memo(\n        () => [\n          instance.getState().pagination,\n          instance.getExpandedRowModel(),\n          instance.options.paginateRowsFn,\n        ],\n        (_pagination, rowModel, paginateRowsFn) => {\n          if (!paginateRowsFn || !rowModel.rows.length) {\n            return rowModel\n          }\n\n          return paginateRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getPaginationRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n        if (pageCount > 0) {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  Updater,\n  TableInstance,\n  Column,\n  AnyGenerics,\n  PartialGenerics,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater } from '../utils'\n\ntype ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n  defaultCanPin?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningInstance<TGenerics extends AnyGenerics> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: () => void\n  pinColumn: (columnId: string, position: ColumnPinningPosition) => void\n  getColumnCanPin: (columnId: string) => boolean\n  getColumnIsPinned: (columnId: string) => ColumnPinningPosition\n  getColumnPinnedIndex: (columnId: string) => number\n  getIsSomeColumnsPinned: () => boolean\n}\n\n//\n\nexport const Pinning = {\n  getInitialState: (): ColumnPinningTableState => {\n    return {\n      columnPinning: {\n        left: [],\n        right: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningColumn => {\n    return {\n      getCanPin: () => instance.getColumnCanPin(column.id),\n      getPinnedIndex: () => instance.getColumnPinnedIndex(column.id),\n      getIsPinned: () => instance.getColumnIsPinned(column.id),\n      pin: position => instance.pinColumn(column.id, position),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningInstance<TGenerics> => {\n    return {\n      setColumnPinning: updater =>\n        instance.options.onColumnPinningChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnPinning)\n        ),\n\n      resetColumnPinning: () =>\n        instance.setColumnPinning(instance.initialState?.columnPinning ?? {}),\n\n      pinColumn: (columnId, position) => {\n        const column = instance.getColumn(columnId)\n\n        const columnIds = column\n          ?.getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        instance.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getColumnCanPin: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            d.enablePinning ??\n            instance.options.enablePinning ??\n            d.defaultCanPin ??\n            !!d.accessorFn\n        )\n      },\n\n      getColumnIsPinned: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = instance.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getColumnPinnedIndex: columnId => {\n        const position = instance.getColumnIsPinned(columnId)\n\n        return position\n          ? instance.getState().columnPinning?.[position]?.indexOf(columnId) ??\n              -1\n          : 0\n      },\n\n      getIsSomeColumnsPinned: () => {\n        const { left, right } = instance.getState().columnPinning\n\n        return Boolean(left?.length || right?.length)\n      },\n    }\n  },\n}\n","import {\n  Getter,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TGenerics extends AnyGenerics> = {\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  autoResetRowSelection?: boolean\n  enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TGenerics>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: MouseEvent | TouchEvent) => boolean\n  // isInclusiveSelectEvent?: (e: MouseEvent | TouchEvent) => boolean\n  // selectRowsFn?: (\n  //   instance: TableInstance<\n  //     TData,\n  //     TValue,\n  //     TFilterFns,\n  //     TSortingFns,\n  //     TAggregationFns\n  //   >,\n  //   rowModel: RowModel<TGenerics>\n  // ) => RowModel<TGenerics>\n}\n\ntype ToggleRowSelectedProps = {\n  onChange?: (e: MouseEvent | TouchEvent) => void\n  checked?: boolean\n  title?: string\n  indeterminate?: boolean\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n}\n\nexport type RowSelectionInstance<TGenerics extends AnyGenerics> = {\n  _notifyRowSelectionReset: () => void\n  getToggleRowSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  getToggleAllRowsSelectedProps: <\n    TGetter extends Getter<ToggleRowSelectedProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  getToggleAllPageRowsSelectedProps: <\n    TGetter extends Getter<ToggleRowSelectedProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: () => void\n  toggleRowSelected: (rowId: string, value?: boolean) => void\n  getRowCanSelect: (rowId: string) => boolean\n  getRowCanSelectSubRows: (rowId: string) => boolean\n  getRowCanMultiSelect: (rowId: string) => boolean\n  // getGroupingRowCanSelect: (rowId: string) => boolean\n  getRowIsSelected: (rowId: string) => boolean\n  getRowIsSomeSelected: (rowId: string) => boolean\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value: boolean) => void\n  toggleAllPageRowsSelected: (value: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TGenerics>\n  getSelectedRowModel: () => RowModel<TGenerics>\n  getFilteredSelectedRowModel: () => RowModel<TGenerics>\n  getGroupedSelectedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const RowSelection = {\n  getInitialState: (): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionOptions<TGenerics> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', instance),\n      autoResetRowSelection: true,\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.shiftKey,\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionInstance<TGenerics> => {\n    let registered = false\n\n    // const pageRows = instance.getPageRows()\n\n    return {\n      _notifyRowSelectionReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetRowSelection\n        ) {\n          instance.resetRowSelection()\n        }\n      },\n      setRowSelection: updater =>\n        instance.options.onRowSelectionChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().rowSelection)\n        ),\n      resetRowSelection: () =>\n        instance.setRowSelection(instance.initialState.rowSelection ?? {}),\n      toggleAllRowsSelected: value => {\n        instance.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        instance.setRowSelection(old => {\n          const selectAll =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          instance.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, value, instance)\n          })\n\n          return rowSelection\n        }),\n      toggleRowSelected: (rowId, value) => {\n        const row = instance.getRow(rowId)\n        const isSelected = row.getIsSelected()\n\n        instance.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, rowId, value, instance)\n\n          return selectedRowIds\n        })\n      },\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = instance\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   instance.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   instance.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => instance.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [\n          instance.getState().rowSelection,\n          instance.getGlobalFilteredRowModel(),\n        ],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getFilteredSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getGroupedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getGroupedSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      ///\n\n      getRowIsSelected: rowId => {\n        const { rowSelection } = instance.getState()\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        return isRowSelected(row, rowSelection, instance) === true\n      },\n\n      getRowIsSomeSelected: rowId => {\n        const { rowSelection } = instance.getState()\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        return isRowSelected(row, rowSelection, instance) === 'some'\n      },\n\n      getRowCanSelect: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableRowSelection === 'function') {\n          return instance.options.enableRowSelection(row)\n        }\n\n        return instance.options.enableRowSelection ?? true\n      },\n\n      getRowCanSelectSubRows: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableSubRowSelection === 'function') {\n          return instance.options.enableSubRowSelection(row)\n        }\n\n        return instance.options.enableSubRowSelection ?? true\n      },\n\n      getRowCanMultiSelect: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableMultiRowSelection === 'function') {\n          return instance.options.enableMultiRowSelection(row)\n        }\n\n        return instance.options.enableMultiRowSelection ?? true\n      },\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = instance.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {\n      //     return instance.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return instance.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows =\n          instance.getPreGlobalFilteredRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !instance.getIsAllRowsSelected() &&\n          !!Object.keys(instance.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        return instance.getIsAllPageRowsSelected()\n          ? false\n          : !!paginationFlatRows?.length\n      },\n\n      getToggleRowSelectedProps: (rowId, userProps) => {\n        const row = instance.getRow(rowId)\n\n        const isSelected = row.getIsSelected()\n        const isSomeSelected = row.getIsSomeSelected()\n        const canSelect = row.getCanSelect()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: canSelect\n            ? (e: MouseEvent | TouchEvent) => {\n                row.toggleSelected((e.target as HTMLInputElement).checked)\n              }\n            : undefined,\n          checked: isSelected,\n          title: 'Toggle Row Selected',\n          indeterminate: isSomeSelected,\n          // onChange: forInput\n          //   ? (e: Event) => e.stopPropagation()\n          //   : (e: Event) => {\n          //       if (instance.options.isAdditiveSelectEvent(e)) {\n          //         row.toggleSelected()\n          //       } else if (instance.options.isInclusiveSelectEvent(e)) {\n          //         instance.addRowSelectionRange(row.id)\n          //       } else {\n          //         instance.setRowSelection({})\n          //         row.toggleSelected()\n          //       }\n\n          //       if (props.onClick) props.onClick(e)\n          //     },\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getToggleAllRowsSelectedProps: userProps => {\n        const isSomeRowsSelected = instance.getIsSomeRowsSelected()\n        const isAllRowsSelected = instance.getIsAllRowsSelected()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: (e: MouseEvent | TouchEvent) => {\n            instance.toggleAllRowsSelected(\n              (e.target as HTMLInputElement).checked\n            )\n          },\n          checked: isAllRowsSelected,\n          title: 'Toggle All Rows Selected',\n          indeterminate: isSomeRowsSelected,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getToggleAllPageRowsSelectedProps: userProps => {\n        const isSomePageRowsSelected = instance.getIsSomePageRowsSelected()\n        const isAllPageRowsSelected = instance.getIsAllPageRowsSelected()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: (e: MouseEvent | TouchEvent) => {\n            instance.toggleAllPageRowsSelected(\n              (e.target as HTMLInputElement).checked\n            )\n          },\n          checked: isAllPageRowsSelected,\n          title: 'Toggle All Current Page Rows Selected',\n          indeterminate: isSomePageRowsSelected,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createRow: <TGenerics extends AnyGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): RowSelectionRow => {\n    return {\n      getIsSelected: () => instance.getRowIsSelected(row.id),\n      getIsSomeSelected: () => instance.getRowIsSomeSelected(row.id),\n      toggleSelected: value => instance.toggleRowSelected(row.id, value),\n      getToggleSelectedProps: userProps =>\n        instance.getToggleRowSelectedProps(row.id, userProps),\n      getCanMultiSelect: () => instance.getRowCanMultiSelect(row.id),\n      getCanSelect: () => instance.getRowCanSelect(row.id),\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TGenerics extends AnyGenerics>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  instance: TableInstance<TGenerics>\n) => {\n  const row = instance.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && instance.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && instance.getRowCanSelectSubRows(row.id)) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n    )\n  }\n}\n\nexport function selectRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const rowSelection = instance.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TGenerics>[] = []\n  const newSelectedRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TGenerics>[], depth = 0) => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection, instance) === true\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TGenerics>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TGenerics extends AnyGenerics>(\n  row: Row<TGenerics>,\n  selection: Record<string, boolean>,\n  instance: TableInstance<TGenerics>\n): boolean | 'some' {\n  if (selection[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection, instance)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? true : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { PartialGenerics, AnyGenerics, Row } from './types'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nexport const sortTypes = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortType = keyof typeof sortTypes\n\nfunction alphanumeric<TGenerics extends AnyGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\nfunction alphanumericCaseSensitive<TGenerics extends AnyGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction text<TGenerics extends AnyGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction textCaseSensitive<TGenerics extends AnyGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\nfunction datetime<TGenerics extends AnyGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    (rowA.values[columnId] as Date).getTime(),\n    (rowB.values[columnId] as Date).getTime()\n  )\n}\n\nfunction basic<TGenerics extends AnyGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(rowA.values[columnId], rowB.values[columnId])\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInSortType, reSplitAlphaNumeric, sortTypes } from '../sortTypes'\n\nimport {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\n\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n  propGetter,\n} from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingFn<TGenerics extends AnyGenerics> = {\n  (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number\n}\n\nexport type CustomSortingTypes<TGenerics extends AnyGenerics> = Record<\n  string,\n  SortingFn<TGenerics>\n>\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortType<TGenerics extends AnyGenerics> =\n  | 'auto'\n  | BuiltInSortType\n  | keyof TGenerics['SortingFns']\n  | SortingFn<TGenerics>\n\nexport type SortingColumnDef<TGenerics extends AnyGenerics> = {\n  sortType?: SortType<Overwrite<TGenerics, { Value: any }>>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  defaultCanSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TGenerics extends AnyGenerics> = {\n  sortType: SortType<Overwrite<TGenerics, { Value: any }>>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  resetSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n}\n\nexport type SortingOptions<TGenerics extends AnyGenerics> = {\n  sortTypes?: TGenerics['SortingFns']\n  onSortingChange?: OnChangeFn<SortingState>\n  autoResetSorting?: boolean\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  sortRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: MouseEvent | TouchEvent) => boolean\n}\n\nexport type ToggleSortingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type SortingInstance<TGenerics extends AnyGenerics> = {\n  _notifySortingReset: () => void\n  getColumnAutoSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined\n  getColumnAutoSortDir: (columnId: string) => SortDirection\n\n  getColumnSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined\n\n  setSorting: (updater: Updater<SortingState>) => void\n  toggleColumnSorting: (\n    columnId: string,\n    desc?: boolean,\n    multi?: boolean\n  ) => void\n  resetSorting: (columnId?: string) => void\n  getColumnCanSort: (columnId: string) => boolean\n  getColumnCanMultiSort: (columnId: string) => boolean\n  getColumnIsSorted: (columnId: string) => false | 'asc' | 'desc'\n  getColumnSortIndex: (columnId: string) => number\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n  getPreSortedRowModel: () => RowModel<TGenerics>\n  getSortedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Sorting = {\n  getDefaultColumn: <\n    TGenerics extends AnyGenerics\n  >(): SortingColumnDef<TGenerics> => {\n    return {\n      sortType: 'auto',\n    }\n  },\n\n  getInitialState: (): SortingTableState => {\n    return {\n      sorting: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingOptions<TGenerics> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', instance),\n      autoResetSorting: true,\n      isMultiSortEvent: (e: MouseEvent | TouchEvent) => {\n        return e.shiftKey\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): SortingColumn<TGenerics> => {\n    return {\n      sortType: column.sortType,\n      getCanSort: () => instance.getColumnCanSort(column.id),\n      getCanMultiSort: () => instance.getColumnCanMultiSort(column.id),\n      getSortIndex: () => instance.getColumnSortIndex(column.id),\n      getIsSorted: () => instance.getColumnIsSorted(column.id),\n      resetSorting: () => instance.resetSorting(column.id),\n      toggleSorting: (desc, isMulti) =>\n        instance.toggleColumnSorting(column.id, desc, isMulti),\n      getToggleSortingProps: userProps =>\n        instance.getToggleSortingProps(column.id, userProps),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifySortingReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetSorting\n        ) {\n          instance.resetSorting()\n        }\n      },\n      getColumnAutoSortingFn: columnId => {\n        const firstRows = instance\n          .getGlobalFilteredRowModel()\n          .flatRows.slice(100)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.values[columnId]\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortTypes.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortTypes.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortTypes.text\n        }\n\n        return sortTypes.basic\n      },\n      getColumnAutoSortDir: columnId => {\n        const firstRow = instance.getGlobalFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getColumnSortingFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userSortTypes = instance.options.sortTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.sortType)\n          ? column.sortType\n          : column.sortType === 'auto'\n          ? instance.getColumnAutoSortingFn(columnId)\n          : (userSortTypes as Record<string, any>)?.[\n              column.sortType as string\n            ] ??\n            (sortTypes[\n              column.sortType as BuiltInSortType\n            ] as SortingFn<TGenerics>)\n      },\n\n      setSorting: updater =>\n        instance.options.onSortingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().sorting)\n        ),\n\n      toggleColumnSorting: (columnId, desc, multi) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       instance.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        instance.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === columnId)\n          const existingIndex = old?.findIndex(d => d.id === columnId)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          const sortDescFirst =\n            column.sortDescFirst ??\n            instance.options.sortDescFirst ??\n            instance.getColumnAutoSortDir(columnId) === 'desc'\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            (existingSorting?.desc // Finally, detect if it should indeed be removed\n              ? !sortDescFirst\n              : sortDescFirst)\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: columnId,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: columnId,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (instance.options.maxMultiSortColCount ??\n                  Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === columnId) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : !existingSorting?.desc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== columnId)\n          }\n\n          return newSorting\n        })\n      },\n\n      getColumnCanSort: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableSorting ??\n          instance.options.enableSorting ??\n          column.defaultCanSort ??\n          !!column.accessorFn\n          // (!!column.accessorFn ||\n          //   column.columns?.some(c => c.id && instance.getColumnCanSort(c.id))) ??\n          // false\n        )\n      },\n\n      getColumnCanMultiSort: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableMultiSort ??\n          instance.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnIsSorted: columnId => {\n        const columnSort = instance\n          .getState()\n          .sorting?.find(d => d.id === columnId)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getColumnSortIndex: columnId =>\n        instance.getState().sorting?.findIndex(d => d.id === columnId) ?? -1,\n\n      resetSorting: (columnId?: string) => {\n        if (columnId) {\n          instance.setSorting(old =>\n            old?.length ? old.filter(d => d.id !== columnId) : []\n          )\n        } else {\n          instance.setSorting(instance.initialState?.sorting ?? [])\n        }\n      },\n\n      getToggleSortingProps: (columnId, userProps) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const canSort = column.getCanSort()\n\n        const initialProps: ToggleSortingProps = {\n          title: canSort ? 'Toggle Sorting' : undefined,\n          onClick: canSort\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                column.toggleSorting?.(\n                  undefined,\n                  column.getCanMultiSort()\n                    ? instance.options.isMultiSortEvent?.(e)\n                    : false\n                )\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getPreSortedRowModel: () => instance.getGlobalFilteredRowModel(),\n      getSortedRowModel: memo(\n        () => [\n          instance.getState().sorting,\n          instance.getGlobalFilteredRowModel(),\n          instance.options.sortRowsFn,\n        ],\n        (sorting, rowModel, sortingFn) => {\n          if (!sortingFn || !sorting?.length) {\n            return rowModel\n          }\n\n          return sortingFn(instance, rowModel)\n        },\n        {\n          key: 'getSortedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifyGroupingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n","import {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<TGenerics extends AnyGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  toggleColumnVisibility: (columnId: string, value?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getColumnIsVisible: (columId: string) => boolean\n  getColumnCanHide: (columnId: string) => boolean\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityProps: <\n    TGetter extends Getter<ToggleAllColumnsVisibilityProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleAllColumnsVisibilityProps, TGetter>\n}\n\ntype ToggleVisibilityProps = {}\ntype ToggleAllColumnsVisibilityProps = {}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultCanHide?: boolean\n  defaultIsVisible?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends AnyGenerics> = {\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityProps: <TGetter extends Getter<ToggleVisibilityProps>>(\n    userProps?: TGetter\n  ) => PropGetterValue<ToggleVisibilityProps, TGetter>\n}\n\n//\n\nexport const Visibility = {\n  getInitialState: (): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  getDefaultColumn: () => {\n    return {\n      defaultIsVisible: true,\n    }\n  },\n\n  createColumn: <TGenerics extends AnyGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      getCanHide: () => instance.getColumnCanHide(column.id),\n      getIsVisible: () => instance.getColumnIsVisible(column.id),\n      toggleVisibility: value =>\n        instance.toggleColumnVisibility(column.id, value),\n      getToggleVisibilityProps: userProps => {\n        const props: ToggleVisibilityProps = {\n          type: 'checkbox',\n          checked: column.getIsVisible?.(),\n          title: 'Toggle Column Visibility',\n          onChange: (e: MouseEvent | TouchEvent) => {\n            column.toggleVisibility?.((e.target as HTMLInputElement).checked)\n          },\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    return {\n      getVisibleFlatColumns: memo(\n        () => [\n          instance.getAllFlatColumns(),\n          instance\n            .getAllFlatColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleFlatColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getVisibleLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance\n            .getAllLeafColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnVisibility)\n        ),\n\n      toggleColumnVisibility: (columnId, value) => {\n        if (!columnId) return\n\n        if (instance.getColumnCanHide(columnId)) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [columnId]: value ?? !instance.getColumnIsVisible(columnId),\n          }))\n        }\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getColumnIsVisible: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnVisibility?.[columnId] ??\n          column.defaultIsVisible ??\n          true\n        )\n      },\n\n      getColumnCanHide: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.options.enableHiding ??\n          column.enableHiding ??\n          column.defaultCanHide ??\n          true\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityProps: userProps => {\n        const props: ToggleAllColumnsVisibilityProps = {\n          onChange: (e: MouseEvent) => {\n            instance.toggleAllColumnsVisible(\n              (e.target as HTMLInputElement)?.checked\n            )\n          },\n          type: 'checkbox',\n          title: 'Toggle visibility for all columns',\n          checked: instance.getIsAllColumnsVisible(),\n          indeterminate:\n            !instance.getIsAllColumnsVisible() &&\n            instance.getIsSomeColumnsVisible()\n              ? 'indeterminate'\n              : undefined,\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n}\n","import {\n  Cell,\n  Column,\n  CoreHeader,\n  FooterGroupProps,\n  FooterProps,\n  Getter,\n  Header,\n  HeaderGroup,\n  HeaderGroupProps,\n  HeaderProps,\n  AnyGenerics,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n} from '../types'\nimport { propGetter, memo } from '../utils'\nimport { ColumnSizing } from './ColumnSizing'\n\nexport type HeadersRow<TGenerics extends AnyGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type HeadersInstance<TGenerics extends AnyGenerics> = {\n  createHeader: (\n    column: Column<TGenerics>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      depth: number\n    }\n  ) => Header<TGenerics>\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n\n  getHeader: (id: string) => Header<TGenerics>\n\n  getHeaderGroupProps: <TGetter extends Getter<HeaderGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderGroupProps, TGetter>\n  getFooterGroupProps: <TGetter extends Getter<FooterGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterGroupProps, TGetter>\n  getHeaderProps: <TGetter extends Getter<HeaderProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderProps, TGetter>\n  getFooterProps: <TGetter extends Getter<FooterProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterProps, TGetter>\n  getTotalWidth: () => number\n}\n\n//\n\nexport const Headers = {\n  createRow: <TGenerics extends AnyGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): HeadersRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key: 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.columnId))\n        },\n        {\n          key: 'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  getInstance: <TGenerics extends AnyGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      createHeader: (\n        column: Column<TGenerics>,\n        options: {\n          id?: string\n          isPlaceholder?: boolean\n          placeholderId?: string\n          depth: number\n        }\n      ) => {\n        const id = options.id ?? column.id\n\n        let header: CoreHeader<TGenerics> = {\n          id,\n          column,\n          isPlaceholder: options.isPlaceholder,\n          placeholderId: options.placeholderId,\n          depth: options.depth,\n          subHeaders: [],\n          colSpan: 0,\n          rowSpan: 0,\n          getWidth: () => {\n            let sum = 0\n\n            const recurse = (header: CoreHeader<TGenerics>) => {\n              if (header.subHeaders.length) {\n                header.subHeaders.forEach(recurse)\n              } else {\n                sum += header.column.getWidth() ?? 0\n              }\n            }\n\n            recurse(header)\n\n            return sum\n          },\n          getLeafHeaders: (): Header<TGenerics>[] => {\n            const leafHeaders: CoreHeader<TGenerics>[] = []\n\n            const recurseHeader = (h: CoreHeader<TGenerics>) => {\n              if (h.subHeaders && h.subHeaders.length) {\n                h.subHeaders.map(recurseHeader)\n              }\n              leafHeaders.push(h)\n            }\n\n            recurseHeader(header)\n\n            return leafHeaders as Header<TGenerics>[]\n          },\n          getHeaderProps: userProps =>\n            instance.getHeaderProps(header.id, userProps)!,\n          getFooterProps: userProps =>\n            instance.getFooterProps(header.id, userProps)!,\n          renderHeader: () =>\n            column.header\n              ? instance.render(column.header, {\n                  instance,\n                  header: header as Header<TGenerics>,\n                  column,\n                })\n              : null,\n          renderFooter: () =>\n            column.footer\n              ? instance.render(column.footer, {\n                  instance,\n                  header: header as Header<TGenerics>,\n                  column,\n                })\n              : null,\n        }\n\n        // Yes, we have to convert instance to unknown, because we know more than the compiler here.\n        return Object.assign(\n          header,\n          ColumnSizing.createHeader(header as Header<TGenerics>, instance)\n        ) as Header<TGenerics>\n      },\n\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns = leafColumns.filter(column =>\n            left?.includes(column.id)\n          )\n          const rightColumns = leafColumns.filter(column =>\n            right?.includes(column.id)\n          )\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key: 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          leafColumns = leafColumns.filter(column => left?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'left')\n        },\n        {\n          key: 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          leafColumns = leafColumns.filter(column => right?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'right')\n        },\n        {\n          key: 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getHeader: (id: string) => {\n        const header = [\n          ...instance.getFlatHeaders(),\n          ...instance.getCenterFlatHeaders(),\n          ...instance.getLeftFlatHeaders(),\n          ...instance.getRightFlatHeaders(),\n        ].find(d => d.id === id)\n\n        if (!header) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Could not find header with id: ${id}`)\n          }\n          throw new Error()\n        }\n\n        return header\n      },\n\n      getHeaderGroupProps: (id, userProps) => {\n        const headerGroup = instance.getHeaderGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        return propGetter(\n          {\n            key: headerGroup.id,\n            role: 'row',\n          },\n          userProps\n        )\n      },\n\n      getFooterGroupProps: (id, userProps) => {\n        const headerGroup = instance.getFooterGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        const initialProps = {\n          key: headerGroup.id,\n          role: 'row',\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getHeaderProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        const initialProps: HeaderProps = {\n          key: header.id,\n          role: 'columnheader',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getFooterProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        const initialProps: FooterProps = {\n          key: header.id,\n          role: 'columnfooter',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getTotalWidth: () => {\n        let width = 0\n\n        instance.getVisibleLeafColumns().forEach(column => {\n          width += column.getWidth() ?? 0\n        })\n\n        return width\n      },\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends AnyGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n      getHeaderGroupProps: getterValue =>\n        instance.getHeaderGroupProps(`${depth}`, getterValue)!,\n      getFooterGroupProps: getterValue =>\n        instance.getFooterGroupProps(`${depth}`, getterValue)!,\n    }\n\n    // The parent columns we're going to scan next\n    const parentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestParentHeader = [...parentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      const header = instance.createHeader(column, {\n        id: [headerFamily, depth, column.id, headerToGroup?.id]\n          .filter(Boolean)\n          .join('_'),\n        isPlaceholder,\n        placeholderId: isPlaceholder\n          ? `${parentHeaders.filter(d => d.column === column).length}`\n          : undefined,\n        depth,\n      })\n\n      if (!latestParentHeader || latestParentHeader.column !== header.column) {\n        header.subHeaders.push(headerToGroup)\n        parentHeaders.push(header)\n      } else {\n        latestParentHeader.subHeaders.push(headerToGroup)\n      }\n\n      // if (!headerToGroup.isPlaceholder) {\n      //   headerToGroup.column.header = headerToGroup;\n      // }\n\n      headerGroup.headers.push(headerToGroup)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(parentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map(column =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (headers: Header<TGenerics>[]) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import {\n  flattenBy,\n  functionalUpdate,\n  propGetter,\n  memo,\n  RequiredKeys,\n} from './utils'\n\nimport {\n  Updater,\n  PropGetterValue,\n  Options,\n  TableState,\n  ColumnDef,\n  Row,\n  Column,\n  Cell,\n  Header,\n  AccessorFn,\n  HeaderRenderProps,\n  TableProps,\n  TableBodyProps,\n  PropGetter,\n  Getter,\n  RowProps,\n  CellProps,\n  TableInstance,\n  RowValues,\n  PartialGenerics,\n  CoreCell,\n  Renderable,\n  UseRenderer,\n  RowModel,\n  TableFeature,\n  AnyGenerics,\n} from './types'\n\nimport { ColumnSizing } from './features/ColumnSizing'\nimport { Expanding } from './features/Expanding'\nimport { Filters } from './features/Filters'\nimport { Grouping } from './features/Grouping'\nimport { Ordering } from './features/Ordering'\nimport { Pagination } from './features/Pagination'\nimport { Pinning } from './features/Pinning'\nimport { RowSelection } from './features/RowSelection'\nimport { Sorting } from './features/Sorting'\nimport { Visibility } from './features/Visibility'\nimport { Headers } from './features/Headers'\n\nconst features: TableFeature[] = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n]\n\nexport type CoreOptions<TGenerics extends AnyGenerics> = {\n  data: TGenerics['Row'][]\n  columns: ColumnDef<TGenerics>[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  render: TGenerics['Render']\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n  initialState?: Partial<TableState>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  autoResetAll?: boolean\n}\n\nexport type TableCore<TGenerics extends AnyGenerics> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<Options<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<Options<TGenerics>>) => void\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n  getTotalWidth: () => number\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    value: any\n  ) => Cell<TGenerics>\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    values: Record<string, any>\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n  getTableProps: PropGetter<TableProps>\n  getTableBodyProps: PropGetter<TableBodyProps>\n  getRowProps: <TGetter extends Getter<RowProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<RowProps, TGetter>\n  getCellProps: <TGetter extends Getter<CellProps>>(\n    rowId: string,\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<CellProps, TGetter>\n  getTableWidth: () => number\n  getLeftTableWidth: () => number\n  getCenterTableWidth: () => number\n  getRightTableWidth: () => number\n  render: <TProps>(\n    template: Renderable<TGenerics, TProps>,\n    props: TProps\n  ) => string | null | ReturnType<UseRenderer<TGenerics>>\n}\n\nexport type CoreRow<TGenerics extends AnyGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  values: RowValues\n  subRows: Row<TGenerics>[]\n  getLeafRows: () => Row<TGenerics>[]\n  getRowProps: PropGetter<RowProps>\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CoreColumnDef<TGenerics extends AnyGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columns?: ColumnDef<TGenerics>[]\n  header?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  footer?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      header: Header<TGenerics>\n      column: Column<TGenerics>\n    }\n  >\n  cell?: Renderable<\n    TGenerics,\n    {\n      instance: TableInstance<TGenerics>\n      row: Row<TGenerics>\n      column: Column<TGenerics>\n      cell: Cell<TGenerics>\n      value: TGenerics['Value']\n    }\n  >\n  meta?: TGenerics['ColumnMeta']\n}\n// & GeneratedProperties<true>\n\nexport type CoreColumnDefType = 'data' | 'display' | 'group'\n\nexport type CoreColumn<TGenerics extends AnyGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  columnDefType: CoreColumnDefType\n  getWidth: () => number\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport function createTableInstance<TGenerics extends AnyGenerics>(\n  options: Options<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let instance = {} as TableInstance<TGenerics>\n\n  const defaultOptions = features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(instance))\n  }, {})\n\n  const buildOptions = (options: Options<TGenerics>) => ({\n    ...defaultOptions,\n    ...options,\n  })\n\n  instance.options = buildOptions(options)\n\n  const initialState = {\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, feature.getInitialState?.())\n    }, {}),\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  const finalInstance: TableInstance<TGenerics> = {\n    ...instance,\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, feature.getInstance?.(instance))\n    }, {}),\n    initialState,\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      instance.options = buildOptions(\n        functionalUpdate(updater, instance.options)\n      )\n    },\n    render: (template, props) => {\n      if (typeof instance.options.render === 'function') {\n        return instance.options.render(template, props)\n      }\n\n      if (typeof template === 'function') {\n        return (template as Function)(props)\n      }\n\n      return template\n    },\n\n    getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) =>\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    getDefaultColumn: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n        return {\n          header: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          footer: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          cell: ({ value = '' }: { value: any }): JSX.Element =>\n            typeof value === 'boolean' ? value.toString() : value,\n          ...features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumn?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TGenerics>>\n      },\n      {\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n        key: 'getDefaultColumn',\n      }\n    ),\n\n    getColumnDefs: () => instance.options.columns,\n\n    createColumn: (\n      columnDef: ColumnDef<TGenerics> & { columnDefType?: CoreColumnDefType },\n      depth: number,\n      parent\n    ) => {\n      const defaultColumn = instance.getDefaultColumn()\n\n      let id =\n        columnDef.id ??\n        columnDef.accessorKey ??\n        (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n      let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n      if (columnDef.accessorFn) {\n        accessorFn = columnDef.accessorFn\n      } else if (columnDef.accessorKey) {\n        accessorFn = (originalRow?: TGenerics['Row']) =>\n          (originalRow as any)[columnDef.accessorKey]\n      }\n\n      if (!id) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            columnDef.accessorFn\n              ? `Columns require an id when using an accessorFn`\n              : `Columns require an id when using a non-string header`\n          )\n        }\n        throw new Error()\n      }\n\n      let column: CoreColumn<TGenerics> = {\n        ...defaultColumn,\n        ...columnDef,\n        id: `${id}`,\n        accessorFn,\n        parent: parent as any,\n        depth,\n        columnDef,\n        columnDefType: columnDef.columnDefType as CoreColumnDefType,\n        columns: [],\n        getWidth: () => instance.getColumnWidth(column.id),\n        getFlatColumns: memo(\n          () => [true],\n          () => {\n            return [\n              column as Column<TGenerics>,\n              ...column.columns?.flatMap(d => d.getFlatColumns()),\n            ]\n          },\n          {\n            key: 'column.getFlatColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n        getLeafColumns: memo(\n          () => [instance.getOrderColumnsFn()],\n          orderColumns => {\n            if (column.columns?.length) {\n              let leafColumns = column.columns.flatMap(column =>\n                column.getLeafColumns()\n              )\n\n              return orderColumns(leafColumns)\n            }\n\n            return [column as Column<TGenerics>]\n          },\n          {\n            key: 'column.getLeafColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n      }\n\n      column = features.reduce((obj, feature) => {\n        return Object.assign(obj, feature.createColumn?.(column, instance))\n      }, column)\n\n      // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n      return column as Column<TGenerics>\n    },\n\n    getAllColumns: memo(\n      () => [instance.getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TGenerics>[],\n          parent?: Column<TGenerics>,\n          depth = 0\n        ): Column<TGenerics>[] => {\n          return columnDefs.map(columnDef => {\n            const column = instance.createColumn(columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: 'getAllColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: 'getAllFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TGenerics>>)\n      },\n      {\n        key: 'getAllFlatColumnsById',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance.getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: 'getAllLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = instance.getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`[Table] Column with id ${columnId} does not exist.`)\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n\n    createCell: (row, column, value) => {\n      const cell: CoreCell<TGenerics> = {\n        id: `${row.id}_${column.id}`,\n        rowId: row.id,\n        columnId: column.id,\n        row,\n        column,\n        value,\n        getCellProps: userProps =>\n          instance.getCellProps(row.id, column.id, userProps)!,\n        renderCell: () =>\n          column.cell\n            ? instance.render(column.cell, {\n                instance,\n                column,\n                row,\n                cell: cell as Cell<TGenerics>,\n                value,\n              })\n            : null,\n      }\n\n      features.forEach(feature => {\n        Object.assign(\n          cell,\n          feature.createCell?.(\n            cell as Cell<TGenerics>,\n            column,\n            row as Row<TGenerics>,\n            instance\n          )\n        )\n      }, {})\n\n      return cell as Cell<TGenerics>\n    },\n\n    createRow: (id, original, rowIndex, depth, values) => {\n      let row: CoreRow<TGenerics> = {\n        id,\n        index: rowIndex,\n        original,\n        depth,\n        values,\n        subRows: [],\n        getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n        getRowProps: userProps => instance.getRowProps(row.id, userProps)!,\n        getAllCells: undefined!,\n        getAllCellsByColumnId: undefined!,\n      }\n\n      row.getAllCells = memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(\n              row as Row<TGenerics>,\n              column,\n              row.values[column.id]\n            )\n          })\n        },\n        {\n          key: process.env.NODE_ENV !== 'production' ? 'row.getAllCells' : '',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      row.getAllCellsByColumnId = memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key: 'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      for (let i = 0; i < features.length; i++) {\n        const feature = features[i]\n        Object.assign(row, feature.createRow?.(row, instance))\n      }\n\n      return row as Row<TGenerics>\n    },\n\n    getCoreRowModel: memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        // Access the row model using initial columns\n        const rows: Row<TGenerics>[] = []\n        const flatRows: Row<TGenerics>[] = []\n        const rowsById: Record<string, Row<TGenerics>> = {}\n\n        const leafColumns = instance.getAllLeafColumns()\n\n        const accessRow = (\n          originalRow: TGenerics['Row'],\n          rowIndex: number,\n          depth = 0,\n          parentRows: Row<TGenerics>[],\n          parent?: Row<TGenerics>\n        ) => {\n          const id = instance.getRowId(originalRow, rowIndex, parent)\n\n          if (!id) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`getRowId expected an ID, but got ${id}`)\n            }\n          }\n\n          const values: Record<string, any> = {}\n\n          for (let i = 0; i < leafColumns.length; i++) {\n            const column = leafColumns[i]\n            if (column && column.accessorFn) {\n              values[column.id] = column.accessorFn(originalRow, rowIndex)\n            }\n          }\n\n          // Make the row\n          const row = instance.createRow(\n            id,\n            originalRow,\n            rowIndex,\n            depth,\n            values\n          )\n\n          // Push instance row into the parentRows array\n          parentRows.push(row)\n          // Keep track of every row in a flat array\n          flatRows.push(row)\n          // Also keep track of every row by its ID\n          rowsById[id] = row\n\n          // Get the original subrows\n          if (instance.options.getSubRows) {\n            const originalSubRows = instance.options.getSubRows(\n              originalRow,\n              rowIndex\n            )\n\n            // Then recursively access them\n            if (originalSubRows?.length) {\n              row.originalSubRows = originalSubRows\n              const subRows: Row<TGenerics>[] = []\n\n              for (let i = 0; i < row.originalSubRows.length; i++) {\n                accessRow(\n                  row.originalSubRows[i] as TGenerics['Row'],\n                  i,\n                  depth + 1,\n                  subRows,\n                  row\n                )\n              }\n              row.subRows = subRows\n            }\n          }\n        }\n\n        for (let i = 0; i < data.length; i++) {\n          accessRow(data[i] as TGenerics['Row'], i, 0, rows)\n        }\n\n        return { rows, flatRows, rowsById }\n      },\n      {\n        key: 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._notifyFiltersReset()\n          instance._notifyRowSelectionReset()\n        },\n      }\n    ),\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getPaginationRowModel()\n    },\n\n    getRow: (id: string) => {\n      const row = instance.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n\n    getCell: (rowId: string, columnId: string) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`[Table] could not find row with id ${rowId}`)\n        }\n        throw new Error()\n      }\n\n      const cell = row.getAllCellsByColumnId()[columnId]\n\n      if (!cell) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `[Table] could not find cell ${columnId} in row ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return cell\n    },\n\n    getTableProps: userProps => {\n      return propGetter(\n        {\n          role: 'table',\n        },\n        userProps\n      )\n    },\n\n    getTableBodyProps: userProps => {\n      return propGetter(\n        {\n          role: 'rowgroup',\n        },\n        userProps\n      )\n    },\n\n    getRowProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n      if (!row) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: row.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getCellProps: (rowId, columnId, userProps) => {\n      const cell = instance.getCell(rowId, columnId)\n\n      if (!cell) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: cell.id,\n          role: 'gridcell',\n        },\n        userProps\n      )\n    },\n\n    getTableWidth: () =>\n      instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getLeftTableWidth: () =>\n      instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getCenterTableWidth: () =>\n      instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getRightTableWidth: () =>\n      instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n  }\n\n  instance = Object.assign(instance, finalInstance)\n\n  return instance\n}\n","import { CustomFilterTypes } from './features/Filters'\nimport { CustomAggregationTypes } from './features/Grouping'\nimport { CustomSortingTypes } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  PartialGenerics,\n  AnyRender,\n  AnyGenerics,\n} from './types'\nimport { Overwrite, PartialKeys } from './utils'\n\nexport type CreateTableFactory<TGenerics extends AnyGenerics> = <\n  TSubGenerics extends {\n    Row: any\n    ColumnMeta?: object\n  }\n>() => Table<\n  Overwrite<\n    TGenerics,\n    { Row: TSubGenerics['Row']; ColumnMeta: TSubGenerics['ColumnMeta'] }\n  >\n>\n\nexport type CreateTableFactoryOptions<\n  TRender extends AnyRender,\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n> = {\n  render: TRender\n  filterFns?: TFilterFns\n  sortingFns?: TSortingFns\n  aggregationFns?: TAggregationFns\n}\n\nexport type Table<TGenerics extends AnyGenerics> = {\n  generics: TGenerics\n  __options: CreateTableFactoryOptions<any, any, any, any>\n  createColumns: <TColumnDef extends ColumnDef<any>>(\n    columns: TColumnDef[]\n  ) => TColumnDef[]\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          ColumnDef<any>,\n          {\n            id: string\n            header?: string | ((...any: any) => any)\n          }\n        >,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: Overwrite<\n      PartialKeys<ColumnDef<TGenerics>, 'accessorFn' | 'accessorKey'>,\n      {\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          ColumnDef<Overwrite<TGenerics, { Value: ReturnType<TAccessor> }>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            ColumnDef<\n              Overwrite<TGenerics, { Value: TGenerics['Row'][TAccessor] }>\n            >,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n        columns?: ColumnDef<any>[]\n      }\n    >\n  ) => ColumnDef<TGenerics>\n}\n\ntype InitTable<TRender extends AnyRender> = {\n  createTableFactory: <TGenerics extends AnyGenerics>(\n    options: CreateTableFactoryOptions<TRender, any, any, any>\n  ) => CreateTableFactory<Overwrite<TGenerics, { Render: TRender }>>\n  createTable: CreateTableFactory<\n    Overwrite<PartialGenerics, { Render: TRender }>\n  >\n}\n\n//\n\nexport function init<TRender extends AnyRender>(opts: {\n  render: TRender\n}): InitTable<TRender> {\n  return {\n    createTableFactory: factoryOptions => () =>\n      _createTable(undefined, undefined, { ...factoryOptions, ...opts }),\n    createTable: () => _createTable(undefined, undefined, opts),\n  }\n}\n\nfunction _createTable<TGenerics extends AnyGenerics>(\n  _: undefined,\n  __: undefined,\n  __options: CreateTableFactoryOptions<any, any, any, any>\n): Table<TGenerics> {\n  return {\n    generics: undefined!,\n    __options: __options ?? {\n      render: () => {\n        throw new Error()\n      },\n    },\n    createColumns: columns => columns,\n    createDisplayColumn: column => ({ ...column, columnDefType: 'display' }),\n    createGroup: column => ({ ...column, columnDefType: 'group' } as any),\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        columnDefType: 'data',\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n  }\n}\n","import { AnyGenerics, Row, RowModel, TableInstance } from '../types'\n\nexport function filterRowModelFromLeafs<TGenerics extends AnyGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRows: (\n    rowsToFilter: Row<TGenerics>[],\n    depth: number\n  ) => Row<TGenerics>[],\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    rowsToFilter = rowsToFilter.slice()\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      const row = rowsToFilter[i]\n\n      if (!row.subRows?.length) {\n        continue\n      }\n\n      rowsToFilter[i] = instance.createRow(\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        row.values\n      )\n\n      rowsToFilter[i].subRows = recurseFilterRows(row.subRows, depth + 1)\n\n      if (!rowsToFilter[i].subRows.length) {\n        rowsToFilter.splice(i, 1)\n        i--\n      }\n    }\n\n    rowsToFilter = filterRows(rowsToFilter, depth)\n\n    // Apply the filter to any subRows\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TGenerics extends AnyGenerics>(\n  rowsToFilter: Row<TGenerics>[],\n  filterRows: (\n    rowsToFilter: Row<TGenerics>[],\n    depth: number\n  ) => Row<TGenerics>[],\n  instance: TableInstance<TGenerics>\n): RowModel<TGenerics> {\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward first\n    rowsToFilter = filterRows(rowsToFilter, depth)\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      const row = rowsToFilter[i]\n\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!row.subRows?.length) {\n        rowsToFilter.splice(i, 1)\n        i--\n        continue\n      }\n\n      rowsToFilter[i] = instance.createRow(\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        row.values\n      )\n\n      rowsToFilter[i].subRows = recurseFilterRows(row.subRows, depth + 1)\n    }\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { AnyGenerics, TableInstance, Row, RowModel } from '../types'\nimport {\n  filterRowModelFromLeafs,\n  filterRowModelFromRoot,\n} from './filterRowsUtils'\n\nexport function columnFilterRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const columnFilters = instance.getState().columnFilters\n  const filterFromLeafRows = instance.options.filterFromLeafRows\n\n  const filterRows = (rowsToFilter: Row<TGenerics>[], depth: number) => {\n    for (let i = 0; i < columnFilters.length; i++) {\n      const { id: columnId, value: filterValue } = columnFilters[i]\n      // Find the columnFilters column\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(`Table: Could not find a column with id: ${columnId}`)\n        }\n        throw new Error()\n      }\n\n      if (depth === 0) {\n        const preFilteredRows = [...rowsToFilter]\n        column.getPreFilteredRows = () => preFilteredRows\n      }\n\n      const filterFn = instance.getColumnFilterFn(column.id)\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Could not find a valid 'column.filterType' for column with the ID: ${column.id}.`\n          )\n        }\n        continue\n      }\n\n      // Pass the rows, id, filterValue and column to the filterFn\n      // to get the filtered rows back\n      rowsToFilter = filterFn(rowsToFilter, [columnId], filterValue)\n    }\n\n    return rowsToFilter\n  }\n\n  if (filterFromLeafRows) {\n    return filterRowModelFromLeafs(rowModel.rows, filterRows, instance)\n  }\n\n  return filterRowModelFromRoot(rowModel.rows, filterRows, instance)\n}\n","import { TableInstance, Row, RowModel, AnyGenerics } from '../types'\nimport {\n  filterRowModelFromLeafs,\n  filterRowModelFromRoot,\n} from './filterRowsUtils'\n\nexport function globalFilterRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const globalFilter = instance.getState().globalFilter\n\n  const filterFromLeafRows = instance.options.filterFromLeafRows\n\n  const filterFn = instance.getGlobalFilterFn()\n\n  if (!filterFn) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`Could not find a valid 'globalFilterType'`)\n    }\n    return rowModel\n  }\n\n  const filterableColumns = instance\n    .getAllLeafColumns()\n    .filter(column => column.getCanGlobalFilter())\n\n  const filterableColumnIds = filterableColumns.map(d => d.id)\n\n  const filterRows = (rows: Row<TGenerics>[]) => {\n    return filterFn(rows, filterableColumnIds, globalFilter)\n  }\n\n  if (filterFromLeafRows) {\n    filterRowModelFromLeafs(rowModel.rows, filterRows, instance)\n  }\n\n  return filterRowModelFromRoot(rowModel.rows, filterRows, instance)\n}\n","import { TableInstance, Row, RowModel, AnyGenerics } from '../types'\nimport { SortingFn } from '../features/Sorting'\n\nexport function sortRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const sortingState = instance.getState().sorting\n\n  const sortedFlatRows: Row<TGenerics>[] = []\n\n  // Filter out sortings that correspond to non existing columns\n  const availableSorting = sortingState.filter(sort =>\n    instance.getColumnCanSort(sort.id)\n  )\n\n  const columnInfoById: Record<\n    string,\n    {\n      sortUndefined?: false | -1 | 1\n      invertSorting?: boolean\n      sortingFn: SortingFn<TGenerics>\n    }\n  > = {}\n\n  availableSorting.forEach(sortEntry => {\n    const column = instance.getColumn(sortEntry.id)!\n\n    columnInfoById[sortEntry.id] = {\n      sortUndefined: column.sortUndefined,\n      invertSorting: column.invertSorting,\n      sortingFn: instance.getColumnSortingFn(sortEntry.id)!,\n    }\n  })\n\n  const sortData = (rows: Row<TGenerics>[]) => {\n    // This will also perform a stable sorting using the row index\n    // if needed.\n    const sortedData = rows.slice()\n\n    sortedData.sort((rowA, rowB) => {\n      for (let i = 0; i < availableSorting.length; i += 1) {\n        const sortEntry = availableSorting[i]!\n        const columnInfo = columnInfoById[sortEntry.id]!\n        const isDesc = sortEntry?.desc ?? false\n\n        if (columnInfo.sortUndefined) {\n          const aValue = rowA.values[sortEntry.id]\n          const bValue = rowB.values[sortEntry.id]\n\n          const aUndefined = typeof aValue === 'undefined'\n          const bUndefined = typeof bValue === 'undefined'\n\n          if (aUndefined || bUndefined) {\n            return aUndefined && bUndefined\n              ? 0\n              : aUndefined\n              ? columnInfo.sortUndefined\n              : -columnInfo.sortUndefined\n          }\n        }\n\n        // This function should always return in ascending order\n        let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n        if (sortInt !== 0) {\n          if (isDesc) {\n            sortInt *= -1\n          }\n\n          if (columnInfo.invertSorting) {\n            sortInt *= -1\n          }\n\n          return sortInt\n        }\n      }\n\n      return rowA.index - rowB.index\n    })\n\n    // If there are sub-rows, sort them\n    sortedData.forEach(row => {\n      sortedFlatRows.push(row)\n      if (!row.subRows || row.subRows.length <= 1) {\n        return\n      }\n      row.subRows = sortData(row.subRows)\n    })\n\n    return sortedData\n  }\n\n  return {\n    rows: sortData(rowModel.rows),\n    flatRows: sortedFlatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import {\n  TableInstance,\n  Row,\n  RowModel,\n  AnyGenerics,\n  PartialGenerics,\n} from '../types'\nimport { flattenBy } from '../utils'\n\nexport function groupRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const groupingState = instance.getState().grouping\n  // Filter the grouping list down to columns that exist\n  const existingGrouping = groupingState.filter(columnId =>\n    instance.getColumn(columnId)\n  )\n\n  // Find the columns that can or are aggregating\n  // Uses each column to aggregate rows into a single value\n  const aggregateRowsToValues = (\n    leafRows: Row<TGenerics>[],\n    groupedRows: Row<TGenerics>[],\n    depth: number\n  ) => {\n    const values: Record<string, unknown> = {}\n\n    instance.getAllLeafColumns().forEach(column => {\n      // Don't aggregate columns that are in the grouping\n      if (existingGrouping.includes(column.id)) {\n        values[column.id] = groupedRows[0]\n          ? groupedRows[0].values[column.id]\n          : null\n        return\n      }\n\n      // Aggregate the values\n      const aggregateFn = instance.getColumnAggregationFn(column.id)\n\n      if (aggregateFn) {\n        values[column.id] = aggregateFn(\n          () =>\n            leafRows.map(row => {\n              let columnValue = row.values[column.id]\n\n              if (!depth && column.aggregateValue) {\n                columnValue = column.aggregateValue(columnValue)\n              }\n\n              return columnValue\n            }),\n          () => groupedRows.map(row => row.values[column.id])\n        )\n      } else if (column.aggregationType) {\n        console.info({ column })\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `Table: Invalid column.aggregateType option for column listed above`\n            : ''\n        )\n      } else {\n        values[column.id] = null\n      }\n    })\n\n    return values\n  }\n\n  const groupedFlatRows: Row<TGenerics>[] = []\n  const groupedRowsById: Record<string, Row<TGenerics>> = {}\n  // const onlyGroupedFlatRows: Row[] = [];\n  // const onlyGroupedRowsById: Record<RowId, Row> = {};\n  // const nonGroupedFlatRows: Row[] = [];\n  // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n  // Recursively group the data\n  const groupUpRecursively = (\n    rows: Row<TGenerics>[],\n    depth = 0,\n    parentId: string\n  ) => {\n    // This is the last level, just return the rows\n    if (depth === existingGrouping.length) {\n      return rows\n    }\n\n    const columnId = existingGrouping[depth]!\n\n    // Group the rows together for this level\n    const rowGroupsMap = groupBy(rows, columnId)\n\n    // Peform aggregations for each group\n    const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n      ([groupingValue, groupedRows], index) => {\n        let id = `${columnId}:${groupingValue}`\n        id = parentId ? `${parentId}>${id}` : id\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth\n          ? flattenBy(groupedRows, row => row.subRows)\n          : groupedRows\n\n        const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n        const row = instance.createRow(id, undefined, index, depth, values)\n\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n        })\n\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return row\n      }\n    )\n\n    return aggregatedGroupedRows\n  }\n\n  const groupedRows = groupUpRecursively(sortedRowModel.rows, 0, '')\n\n  groupedRows.forEach(subRow => {\n    groupedFlatRows.push(subRow)\n    groupedRowsById[subRow.id] = subRow\n    // if (subRow.getIsGrouped?.()) {\n    //   onlyGroupedFlatRows.push(subRow);\n    //   onlyGroupedRowsById[subRow.id] = subRow;\n    // } else {\n    //   nonGroupedFlatRows.push(subRow);\n    //   nonGroupedRowsById[subRow.id] = subRow;\n    // }\n  })\n\n  return {\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n  }\n}\n\nfunction groupBy<TGenerics extends AnyGenerics>(\n  rows: Row<TGenerics>[],\n  columnId: string\n) {\n  const groupMap = new Map<any, Row<TGenerics>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.values[columnId]}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import {\n  TableInstance,\n  Row,\n  RowModel,\n  AnyGenerics,\n  PartialGenerics,\n} from '../types'\n\nexport function expandRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (\n      instance.options.expandSubRows &&\n      row.subRows?.length &&\n      instance.getIsRowExpanded(row.id)\n    ) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  sortedRowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: sortedRowModel.flatRows,\n    rowsById: sortedRowModel.rowsById,\n  }\n}\n","import { TableInstance, RowModel, AnyGenerics } from '../types'\nimport { expandRowsFn } from './expandRowsFn'\n\nexport function paginateRowsFn<TGenerics extends AnyGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const { pageSize, pageIndex } = instance.getState().pagination\n  let { rows, flatRows, rowsById } = rowModel\n  const pageStart = pageSize * pageIndex\n  const pageEnd = pageStart + pageSize\n\n  rows = rows.slice(pageStart, pageEnd)\n\n  if (!instance.options.paginateExpandedRows) {\n    return expandRowsFn(instance, {\n      rows,\n      flatRows,\n      rowsById,\n    })\n  }\n\n  return {\n    rows,\n    flatRows,\n    rowsById,\n  }\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","propGetter","initial","getter","memo","getDeps","fn","opts","deps","result","depTime","debug","performance","now","newDeps","depsChanged","some","dep","index","oldResult","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","map","_","filter","Boolean","reduce","accu","a","b","parent","undefined","defaultColumnSizing","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumn","getInitialState","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","getInstance","getColumnWidth","columnId","column","getColumn","Error","columnSize","getState","id","setColumnSizing","options","setColumnSizingInfo","resetColumnSizing","initialState","resetHeaderSizeInfo","resetColumnSize","rest","resetHeaderSize","headerId","header","getHeader","getHeaderCanResize","getColumnCanResize","enableResizing","enableColumnResizing","defaultCanResize","getColumnIsResizing","getHeaderIsResizing","getHeaderResizerProps","userProps","canResize","getCanResize","onResizeStart","e","isTouchStartEvent","touches","getWidth","getLeafHeaders","clientX","updateOffset","eventType","clientXPos","newColumnSizing","headerWidth","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","initialProps","title","draggable","role","onMouseDown","persist","onTouchStart","createColumn","getIsResizing","resetSize","createHeader","getResizerProps","passiveSupported","supported","window","err","type","Expanding","expanded","onExpandedChange","autoResetExpanded","expandSubRows","paginateExpandedRows","registered","_notifyExpandedReset","autoResetAll","resetExpanded","setExpanded","toggleRowExpanded","rowId","exists","oldExpanded","Object","keys","getRowModel","rowsById","toggleAllRowsExpanded","getIsAllRowsExpanded","getIsRowExpanded","row","getPreExpandedRowModel","warn","getRowCanExpand","getRow","enableExpanded","defaultCanExpand","subRows","getToggleExpandedProps","canExpand","onClick","getToggleAllRowsExpandedProps","getIsSomeRowsExpanded","values","getExpandedDepth","maxDepth","rowIds","splitId","split","getExpandedRowModel","getGroupedRowModel","expandRowsFn","rowModel","debugAll","debugTable","createRow","toggleExpanded","getIsExpanded","getCanExpand","filterTypes","includesString","includesStringSensitive","equalsString","equalsStringSensitive","arrIncludes","arrIncludesAll","equals","weakEquals","betweenNumberRange","rows","columnIds","filterValue","search","toLowerCase","includes","autoRemove","val","testFalsey","rowValue","every","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","Filters","filterType","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","autoResetColumnFilters","filterFromLeafRows","autoResetGlobalFilter","globalFilterType","getColumnCanGlobalFilterFn","value","getCoreRowModel","flatRows","getAllCellsByColumnId","getFacetInfo","getPreFilteredRows","preFilteredUniqueValues","Map","preFilteredMinMaxValues","i","has","set","get","debugColumns","getCanColumnFilter","getColumnCanColumnFilter","getCanGlobalFilter","getColumnCanGlobalFilter","getColumnFilterIndex","getIsColumnFiltered","getColumnIsFiltered","getColumnFilterValue","setColumnFilterValue","getPreFilteredUniqueValues","getPreFilteredMinMaxValues","_notifyFiltersReset","resetSorting","resetColumnFilters","resetGlobalFilter","getColumnAutoFilterFn","firstRow","Array","isArray","getGlobalAutoFilterFn","getColumnFilterFn","userFilterTypes","getGlobalFilterFn","setColumnFilters","leafColumns","getAllLeafColumns","updateFn","find","filterFn","shouldAutoRemoveFilter","setGlobalFilter","enableAllFilters","enableColumnFilter","enableFilters","enableColumnFilters","defaultCanFilter","defaultCanColumnFilter","accessorFn","enableGlobalFilter","defaultCanGlobalFilter","findIndex","previousfilter","newFilter","newFilterObj","getPreFilteredRowModel","getPreColumnFilteredRowModel","getColumnFilteredRowModel","columnFilterRowsFn","columnFiltersFn","columnFilteredRowModel","nonFilteredColumns","getPreGlobalFilteredRowModel","getGlobalFilteredRowModel","globalFilterRowsFn","globalFilterValue","globalFiltersFn","globalFilteredRowModel","_notifySortingReset","aggregationTypes","sum","extent","mean","median","unique","uniqueCount","count","_getLeafValues","getChildValues","next","getLeafValues","leafValues","from","Set","size","Grouping","aggregationType","grouping","onGroupingChange","autoResetGrouping","groupedColumnMode","getCanGroup","getColumnCanGroup","getGroupedIndex","getColumnGroupedIndex","getIsGrouped","getColumnIsGrouped","toggleGrouping","toggleColumnGrouping","getToggleGroupingProps","_notifyGroupingReset","resetGrouping","getColumnAutoAggregationFn","prototype","toString","call","getColumnAggregationFn","userAggregationTypes","setGrouping","enableGrouping","defaultCanGroup","indexOf","canGroup","getRowIsGrouped","groupingColumnId","getPreGroupedRowModel","getSortedRowModel","groupRowsFn","createCell","cell","getIsPlaceholder","getIsAggregated","renderAggregatedCell","template","aggregatedCell","render","orderColumns","nonGroupingColumns","col","groupingColumns","g","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","getOrderColumnsFn","columns","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","splice","Pagination","pagination","pageCount","pageIndex","pageSize","onPaginationChange","autoResetPageIndex","_notifyPageIndexReset","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","pageOptions","fill","getCanPreviousPage","getCanNextPage","getPageCount","ceil","getPrePaginationRowModel","previousPage","nextPage","getPaginationRowModel","paginateRowsFn","_pagination","Pinning","columnPinning","left","right","onColumnPinningChange","getCanPin","getColumnCanPin","getPinnedIndex","getColumnPinnedIndex","getIsPinned","getColumnIsPinned","pin","position","pinColumn","setColumnPinning","resetColumnPinning","getLeafColumns","enablePinning","defaultCanPin","leafColumnIds","isLeft","isRight","getIsSomeColumnsPinned","RowSelection","rowSelection","onRowSelectionChange","autoResetRowSelection","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","_notifyRowSelectionReset","resetRowSelection","setRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","getIsAllPageRowsSelected","mutateRowIsSelected","toggleRowSelected","isSelected","getIsSelected","selectedRowIds","getPreSelectedRowModel","getSelectedRowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","getRowIsSelected","isRowSelected","getRowIsSomeSelected","getRowCanSelect","getRowCanSelectSubRows","getRowCanMultiSelect","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","getIsSomePageRowsSelected","getToggleRowSelectedProps","isSomeSelected","getIsSomeSelected","canSelect","getCanSelect","toggleSelected","target","checked","indeterminate","getToggleAllRowsSelectedProps","isSomeRowsSelected","getToggleAllPageRowsSelectedProps","isSomePageRowsSelected","getToggleSelectedProps","getCanMultiSelect","newSelectedFlatRows","newSelectedRowsById","recurseRows","depth","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","sortTypes","alphanumeric","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","rowA","rowB","compareAlphanumeric","aStr","bStr","aa","bb","an","parseInt","bn","combo","sort","compareBasic","getTime","Sorting","sortType","sorting","onSortingChange","autoResetSorting","isMultiSortEvent","shiftKey","getCanSort","getColumnCanSort","getCanMultiSort","getColumnCanMultiSort","getSortIndex","getColumnSortIndex","getIsSorted","getColumnIsSorted","toggleSorting","desc","isMulti","toggleColumnSorting","getToggleSortingProps","getColumnAutoSortingFn","firstRows","slice","isString","getColumnAutoSortDir","getColumnSortingFn","userSortTypes","setSorting","multi","existingSorting","existingIndex","hasDescDefined","newSorting","sortAction","sortDescFirst","enableSortingRemoval","enableMultiRemove","maxMultiSortColCount","enableSorting","defaultCanSort","enableMultiSort","columnSort","canSort","getPreSortedRowModel","sortRowsFn","sortingFn","Visibility","columnVisibility","onColumnVisibilityChange","defaultIsVisible","getCanHide","getColumnCanHide","getIsVisible","getColumnIsVisible","toggleVisibility","toggleColumnVisibility","getToggleVisibilityProps","props","getVisibleFlatColumns","getAllFlatColumns","join","allFlatColumns","getVisibleLeafColumns","setColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","obj","enableHiding","defaultCanHide","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityProps","Headers","_getAllVisibleCells","getAllCells","debugRows","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","center","allCells","leftAndRight","cells","isPlaceholder","placeholderId","subHeaders","colSpan","rowSpan","leafHeaders","recurseHeader","h","getHeaderProps","getFooterProps","renderHeader","renderFooter","footer","assign","getHeaderGroups","getAllColumns","allColumns","leftColumns","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headerGroup","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","getHeaderGroupProps","getFooterGroupProps","getTotalWidth","columnsToGroup","headerFamily","findMaxDepth","createHeaderGroup","headersToGroup","getterValue","parentHeaders","headerToGroup","latestParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","features","createTableInstance","defaultOptions","feature","buildOptions","finalInstance","reset","setOptions","getRowId","state","onStateChange","defaultColumn","getColumnDefs","columnDef","accessorKey","originalRow","columnDefType","getFlatColumns","flatMap","columnDefs","recurseColumns","getAllFlatColumnsById","flatColumns","acc","getCellProps","renderCell","original","rowIndex","getLeafRows","getRowProps","data","accessRow","parentRows","getSubRows","originalSubRows","getCell","getTableProps","getTableBodyProps","getTableWidth","getLeftTableWidth","getCenterTableWidth","getRightTableWidth","init","createTableFactory","factoryOptions","_createTable","createTable","__","__options","generics","createColumns","createDisplayColumn","createGroup","createDataColumn","accessor","filterRowModelFromLeafs","rowsToFilter","filterRows","newFilteredFlatRows","newFilteredRowsById","recurseFilterRows","filterRowModelFromRoot","preFilteredRows","filterableColumns","filterableColumnIds","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","sortedRowModel","groupingState","existingGrouping","aggregateRowsToValues","leafRows","groupedRows","aggregateFn","columnValue","aggregateValue","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupMap","resKey","previous","expandedRows","handleRow","pageStart","pageEnd"],"mappings":"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"}